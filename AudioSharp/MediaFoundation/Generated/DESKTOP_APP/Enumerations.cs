// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.MediaFoundation namespace.
//     This code was generated by a tool.
//     Date : 2017/7/15 0:31:15
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.MediaFoundation {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfidl_0000_0027_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfidl_0000_0027_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfidl_0000_0027_0001</unmanaged-short>	
    [Flags]
    public enum ActivateCustomMixerFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL']/*"/>	
        /// <unmanaged>MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL</unmanaged>	
        /// <unmanaged-short>MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL</unmanaged-short>	
        AllowFail = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfidl_0000_0027_0002']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfidl_0000_0027_0002</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfidl_0000_0027_0002</unmanaged-short>	
    [Flags]
    public enum ActivateCustomPresenterFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL']/*"/>	
        /// <unmanaged>MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL</unmanaged>	
        /// <unmanaged-short>MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL</unmanaged-short>	
        AllowFail = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the ASF indexer options.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_INDEXERFLAGS']/*"/>	
    /// <msdn-id>ms704695</msdn-id>	
    /// <unmanaged>MFASF_INDEXERFLAGS</unmanaged>	
    /// <unmanaged-short>MFASF_INDEXERFLAGS</unmanaged-short>	
    [Flags]
    public enum AsfIndexerFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The indexer creates a new index object.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_INDEXER_WRITE_NEW_INDEX']/*"/>	
        /// <msdn-id>ms704695</msdn-id>	
        /// <unmanaged>MFASF_INDEXER_WRITE_NEW_INDEX</unmanaged>	
        /// <unmanaged-short>MFASF_INDEXER_WRITE_NEW_INDEX</unmanaged-short>	
        WriteNewIndex = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The indexer returns values for reverse playback.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK']/*"/>	
        /// <msdn-id>ms704695</msdn-id>	
        /// <unmanaged>MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK</unmanaged>	
        /// <unmanaged-short>MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK</unmanaged-short>	
        ReadForReversePlayback = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The indexer creates an index object for a live ASF stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_INDEXER_WRITE_FOR_LIVEREAD']/*"/>	
        /// <msdn-id>ms704695</msdn-id>	
        /// <unmanaged>MFASF_INDEXER_WRITE_FOR_LIVEREAD</unmanaged>	
        /// <unmanaged-short>MFASF_INDEXER_WRITE_FOR_LIVEREAD</unmanaged-short>	
        WriteForLiveread = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the ASF multiplexer options.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_MULTIPLEXERFLAGS']/*"/>	
    /// <msdn-id>ms698843</msdn-id>	
    /// <unmanaged>MFASF_MULTIPLEXERFLAGS</unmanaged>	
    /// <unmanaged-short>MFASF_MULTIPLEXERFLAGS</unmanaged-short>	
    [Flags]
    public enum AsfMultiplexerflags : int {	
        
        /// <summary>	
        /// <dd> <p>The multiplexer automatically adjusts the bit rate of the ASF content in response to the characteristics of the streams being multiplexed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_MULTIPLEXER_AUTOADJUST_BITRATE']/*"/>	
        /// <msdn-id>ms698843</msdn-id>	
        /// <unmanaged>MFASF_MULTIPLEXER_AUTOADJUST_BITRATE</unmanaged>	
        /// <unmanaged-short>MFASF_MULTIPLEXER_AUTOADJUST_BITRATE</unmanaged-short>	
        AutoadjustBitRate = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the selection options for an ASF stream.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_SELECTION_STATUS']/*"/>	
    /// <msdn-id>ms694827</msdn-id>	
    /// <unmanaged>ASF_SELECTION_STATUS</unmanaged>	
    /// <unmanaged-short>ASF_SELECTION_STATUS</unmanaged-short>	
    public enum AsfSelectionStatus : int {	
        
        /// <summary>	
        /// <dd> <p>No samples from the stream are delivered.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUS_NOTSELECTED']/*"/>	
        /// <msdn-id>ms694827</msdn-id>	
        /// <unmanaged>ASF_STATUS_NOTSELECTED</unmanaged>	
        /// <unmanaged-short>ASF_STATUS_NOTSELECTED</unmanaged-short>	
        NotSelected = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Only samples from the stream that are clean points are delivered.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUS_CLEANPOINTSONLY']/*"/>	
        /// <msdn-id>ms694827</msdn-id>	
        /// <unmanaged>ASF_STATUS_CLEANPOINTSONLY</unmanaged>	
        /// <unmanaged-short>ASF_STATUS_CLEANPOINTSONLY</unmanaged-short>	
        CleanPointsOnly = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>All samples from the stream are delivered.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUS_ALLDATAUNITS']/*"/>	
        /// <msdn-id>ms694827</msdn-id>	
        /// <unmanaged>ASF_STATUS_ALLDATAUNITS</unmanaged>	
        /// <unmanaged-short>ASF_STATUS_ALLDATAUNITS</unmanaged-short>	
        AllDataUnits = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the ASF splitter options.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_SPLITTERFLAGS']/*"/>	
    /// <msdn-id>ms700211</msdn-id>	
    /// <unmanaged>MFASF_SPLITTERFLAGS</unmanaged>	
    /// <unmanaged-short>MFASF_SPLITTERFLAGS</unmanaged-short>	
    [Flags]
    public enum AsfSplitterflags : int {	
        
        /// <summary>	
        /// <dd> <p>The splitter delivers samples for the ASF content in reverse order to accommodate reverse playback.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_SPLITTER_REVERSE']/*"/>	
        /// <msdn-id>ms700211</msdn-id>	
        /// <unmanaged>MFASF_SPLITTER_REVERSE</unmanaged>	
        /// <unmanaged-short>MFASF_SPLITTER_REVERSE</unmanaged-short>	
        Reverse = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The splitter delivers samples for streams that are protected with Windows Media Digital Rights Management.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_SPLITTER_WMDRM']/*"/>	
        /// <msdn-id>ms700211</msdn-id>	
        /// <unmanaged>MFASF_SPLITTER_WMDRM</unmanaged>	
        /// <unmanaged-short>MFASF_SPLITTER_WMDRM</unmanaged-short>	
        Wmdrm = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines status conditions for the <strong><see cref="SharpDX.MediaFoundation.ASFSplitter.GetNextSample"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUSFLAGS']/*"/>	
    /// <msdn-id>ms703127</msdn-id>	
    /// <unmanaged>ASF_STATUSFLAGS</unmanaged>	
    /// <unmanaged-short>ASF_STATUSFLAGS</unmanaged-short>	
    [Flags]
    public enum AsfStatusflags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUSFLAGS_INCOMPLETE']/*"/>	
        /// <msdn-id>ms703127</msdn-id>	
        /// <unmanaged>ASF_STATUSFLAGS_INCOMPLETE</unmanaged>	
        /// <unmanaged-short>ASF_STATUSFLAGS_INCOMPLETE</unmanaged-short>	
        Incomplete = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_STATUSFLAGS_NONFATAL_ERROR']/*"/>	
        /// <msdn-id>ms703127</msdn-id>	
        /// <unmanaged>ASF_STATUSFLAGS_NONFATAL_ERROR</unmanaged>	
        /// <unmanaged-short>ASF_STATUSFLAGS_NONFATAL_ERROR</unmanaged-short>	
        NonfatalError = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the ASF stream selector options.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_STREAMSELECTORFLAGS']/*"/>	
    /// <msdn-id>ms696200</msdn-id>	
    /// <unmanaged>MFASF_STREAMSELECTORFLAGS</unmanaged>	
    /// <unmanaged-short>MFASF_STREAMSELECTORFLAGS</unmanaged-short>	
    [Flags]
    public enum AsfStreamSelectorFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The stream selector will not set thinning. Thinning is the process of removing samples from a stream to reduce the bit rate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_STREAMSELECTOR_DISABLE_THINNING']/*"/>	
        /// <msdn-id>ms696200</msdn-id>	
        /// <unmanaged>MFASF_STREAMSELECTOR_DISABLE_THINNING</unmanaged>	
        /// <unmanaged-short>MFASF_STREAMSELECTOR_DISABLE_THINNING</unmanaged-short>	
        DisableThinning = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The stream selector will use the average bit rate of streams when selecting streams.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE']/*"/>	
        /// <msdn-id>ms696200</msdn-id>	
        /// <unmanaged>MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE</unmanaged>	
        /// <unmanaged-short>MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE</unmanaged-short>	
        UseAverageBitRate = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_FLAGS']/*"/>	
    /// <unmanaged>MFASYNC_CALLBACK_FLAGS</unmanaged>	
    /// <unmanaged-short>MFASYNC_CALLBACK_FLAGS</unmanaged-short>	
    [Flags]
    public enum AsyncCallbackFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_FAST_IO_PROCESSING_CALLBACK']/*"/>	
        /// <unmanaged>MFASYNC_FAST_IO_PROCESSING_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFASYNC_FAST_IO_PROCESSING_CALLBACK</unmanaged-short>	
        FastIoProcessing = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_SIGNAL_CALLBACK']/*"/>	
        /// <unmanaged>MFASYNC_SIGNAL_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFASYNC_SIGNAL_CALLBACK</unmanaged-short>	
        Signal = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_BLOCKING_CALLBACK']/*"/>	
        /// <unmanaged>MFASYNC_BLOCKING_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFASYNC_BLOCKING_CALLBACK</unmanaged-short>	
        Blocking = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_REPLY_CALLBACK']/*"/>	
        /// <unmanaged>MFASYNC_REPLY_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFASYNC_REPLY_CALLBACK</unmanaged-short>	
        Reply = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_LOCALIZE_REMOTE_CALLBACK']/*"/>	
        /// <unmanaged>MFASYNC_LOCALIZE_REMOTE_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFASYNC_LOCALIZE_REMOTE_CALLBACK</unmanaged-short>	
        LocalizeRemote = unchecked((int)16),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies the type of work queue for the <strong><see cref="SharpDX.MediaFoundation.MediaFactory.AllocateWorkQueueEx"/></strong> function to create.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_WORKQUEUE_TYPE']/*"/>	
    /// <msdn-id>dd388081</msdn-id>	
    /// <unmanaged>MFASYNC_WORKQUEUE_TYPE</unmanaged>	
    /// <unmanaged-short>MFASYNC_WORKQUEUE_TYPE</unmanaged-short>	
    public enum AsyncWorkqueueType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_STANDARD_WORKQUEUE']/*"/>	
        /// <msdn-id>dd388081</msdn-id>	
        /// <unmanaged>MF_STANDARD_WORKQUEUE</unmanaged>	
        /// <unmanaged-short>MF_STANDARD_WORKQUEUE</unmanaged-short>	
        MfStandardWorkqueue = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_WINDOW_WORKQUEUE']/*"/>	
        /// <msdn-id>dd388081</msdn-id>	
        /// <unmanaged>MF_WINDOW_WORKQUEUE</unmanaged>	
        /// <unmanaged-short>MF_WINDOW_WORKQUEUE</unmanaged-short>	
        MfWindowWorkqueue = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MULTITHREADED_WORKQUEUE']/*"/>	
        /// <msdn-id>dd388081</msdn-id>	
        /// <unmanaged>MF_MULTITHREADED_WORKQUEUE</unmanaged>	
        /// <unmanaged-short>MF_MULTITHREADED_WORKQUEUE</unmanaged-short>	
        MfMultithreadedWorkqueue = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines flags for serializing and deserializing attribute stores.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_SERIALIZE_OPTIONS']/*"/>	
    /// <msdn-id>ms704675</msdn-id>	
    /// <unmanaged>MF_ATTRIBUTE_SERIALIZE_OPTIONS</unmanaged>	
    /// <unmanaged-short>MF_ATTRIBUTE_SERIALIZE_OPTIONS</unmanaged-short>	
    public enum AttributeSerializeOptions : int {	
        
        /// <summary>	
        /// <dd> <p>If this flag is set, <strong><see cref="SharpDX.ComObject"/></strong> references in the attribute store are marshaled to and from the stream. If this flag is absent, <strong><see cref="SharpDX.ComObject"/></strong> references in the attribute store are not marshaled or serialized.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF']/*"/>	
        /// <msdn-id>ms704675</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF</unmanaged-short>	
        UnknownByref = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how to compare the attributes on two objects.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_TYPE']/*"/>	
    /// <msdn-id>ms703793</msdn-id>	
    /// <unmanaged>MF_ATTRIBUTES_MATCH_TYPE</unmanaged>	
    /// <unmanaged-short>MF_ATTRIBUTES_MATCH_TYPE</unmanaged-short>	
    public enum AttributesMatchType : int {	
        
        /// <summary>	
        /// <dd> <p>Check whether all the attributes in <em>pThis</em> exist in <em>pTheirs</em> and have the same data, where <em>pThis</em> is the object whose <strong>Compare</strong> method is being called and <em>pTheirs</em> is the object given in the <em>pTheirs</em> parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_OUR_ITEMS']/*"/>	
        /// <msdn-id>ms703793</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTES_MATCH_OUR_ITEMS</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTES_MATCH_OUR_ITEMS</unmanaged-short>	
        OurItems = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Check whether all the attributes in <em>pTheirs</em> exist in <em>pThis</em> and have the same data, where <em>pThis</em> is the object whose <strong>Compare</strong> method is being called and <em>pTheirs</em> is the object given in the <em>pTheirs</em> parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_THEIR_ITEMS']/*"/>	
        /// <msdn-id>ms703793</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTES_MATCH_THEIR_ITEMS</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTES_MATCH_THEIR_ITEMS</unmanaged-short>	
        TheirItems = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Check whether both objects have identical attributes with the same data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_ALL_ITEMS']/*"/>	
        /// <msdn-id>ms703793</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTES_MATCH_ALL_ITEMS</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTES_MATCH_ALL_ITEMS</unmanaged-short>	
        AllItems = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Check whether the attributes that exist in both objects have the same data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_INTERSECTION']/*"/>	
        /// <msdn-id>ms703793</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTES_MATCH_INTERSECTION</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTES_MATCH_INTERSECTION</unmanaged-short>	
        Intersection = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Find the object with the fewest number of attributes, and check if those attributes exist in the other object and have the same data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTES_MATCH_SMALLER']/*"/>	
        /// <msdn-id>ms703793</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTES_MATCH_SMALLER</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTES_MATCH_SMALLER</unmanaged-short>	
        Smaller = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the data type for a key/value pair.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_TYPE']/*"/>	
    /// <msdn-id>ms694854</msdn-id>	
    /// <unmanaged>MF_ATTRIBUTE_TYPE</unmanaged>	
    /// <unmanaged-short>MF_ATTRIBUTE_TYPE</unmanaged-short>	
    public enum AttributeType : int {	
        
        /// <summary>	
        /// <dd> <p>Unsigned 32-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_UINT32']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_UINT32</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_UINT32</unmanaged-short>	
        UInt32 = unchecked((int)19),			
        
        /// <summary>	
        /// <dd> <p>Unsigned 64-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_UINT64']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_UINT64</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_UINT64</unmanaged-short>	
        UInt64 = unchecked((int)21),			
        
        /// <summary>	
        /// <dd> <p>Floating-point number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_DOUBLE']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_DOUBLE</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_DOUBLE</unmanaged-short>	
        Double = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p><strong><see cref="System.Guid"/></strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_GUID']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_GUID</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_GUID</unmanaged-short>	
        Guid = unchecked((int)72),			
        
        /// <summary>	
        /// <dd> <p><c>null</c>-terminated wide-character string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_STRING']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_STRING</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_STRING</unmanaged-short>	
        String = unchecked((int)31),			
        
        /// <summary>	
        /// <dd> <p>Byte array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_BLOB']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_BLOB</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_BLOB</unmanaged-short>	
        Blob = unchecked((int)4113),			
        
        /// <summary>	
        /// <dd> <p><strong><see cref="SharpDX.ComObject"/></strong> reference.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ATTRIBUTE_IUNKNOWN']/*"/>	
        /// <msdn-id>ms694854</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_IUNKNOWN</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_IUNKNOWN</unmanaged-short>	
        IUnknown = unchecked((int)13),			
    }
    
    /// <summary>	
    /// <p>Specifies values for audio constriction.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Values defined by the <strong><see cref="SharpDX.MediaFoundation.AudioConstriction"/></strong> enumeration matches the <strong>EAudioConstriction</strong> enumeration defined <strong>audioenginebaseapo.h</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAudioConstriction']/*"/>	
    /// <msdn-id>jj128334</msdn-id>	
    /// <unmanaged>MFAudioConstriction</unmanaged>	
    /// <unmanaged-short>MFAudioConstriction</unmanaged-short>	
    public enum AudioConstriction : int {	
        
        /// <summary>	
        /// <dd> <p>Audio is not constricted. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFaudioConstrictionOff']/*"/>	
        /// <msdn-id>jj128334</msdn-id>	
        /// <unmanaged>MFaudioConstrictionOff</unmanaged>	
        /// <unmanaged-short>MFaudioConstrictionOff</unmanaged-short>	
        MFaudioConstrictionOff = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Audio is down sampled to 48 kHz/16-bit.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFaudioConstriction48_16']/*"/>	
        /// <msdn-id>jj128334</msdn-id>	
        /// <unmanaged>MFaudioConstriction48_16</unmanaged>	
        /// <unmanaged-short>MFaudioConstriction48_16</unmanaged-short>	
        MFaudioConstriction4816 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Audio is down sampled to 44 kHz/16-bit.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFaudioConstriction44_16']/*"/>	
        /// <msdn-id>jj128334</msdn-id>	
        /// <unmanaged>MFaudioConstriction44_16</unmanaged>	
        /// <unmanaged-short>MFaudioConstriction44_16</unmanaged-short>	
        MFaudioConstriction4416 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Audio is down sampled to 14hKz/16-bit.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFaudioConstriction14_14']/*"/>	
        /// <msdn-id>jj128334</msdn-id>	
        /// <unmanaged>MFaudioConstriction14_14</unmanaged>	
        /// <unmanaged-short>MFaudioConstriction14_14</unmanaged-short>	
        MFaudioConstriction1414 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Audio is muted.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFaudioConstrictionMute']/*"/>	
        /// <msdn-id>jj128334</msdn-id>	
        /// <unmanaged>MFaudioConstrictionMute</unmanaged>	
        /// <unmanaged-short>MFaudioConstrictionMute</unmanaged-short>	
        MFaudioConstrictionMute = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.Buffer2D2.Lock2DSize"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF2DBuffer_LockFlags']/*"/>	
    /// <msdn-id>hh162742</msdn-id>	
    /// <unmanaged>MF2DBuffer_LockFlags</unmanaged>	
    /// <unmanaged-short>MF2DBuffer_LockFlags</unmanaged-short>	
    public enum Buffer2DLockFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF2DBuffer_LockFlags_LockTypeMask']/*"/>	
        /// <msdn-id>hh162742</msdn-id>	
        /// <unmanaged>MF2DBuffer_LockFlags_LockTypeMask</unmanaged>	
        /// <unmanaged-short>MF2DBuffer_LockFlags_LockTypeMask</unmanaged-short>	
        LockTypeMask = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF2DBuffer_LockFlags_Read']/*"/>	
        /// <msdn-id>hh162742</msdn-id>	
        /// <unmanaged>MF2DBuffer_LockFlags_Read</unmanaged>	
        /// <unmanaged-short>MF2DBuffer_LockFlags_Read</unmanaged-short>	
        Read = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF2DBuffer_LockFlags_Write']/*"/>	
        /// <msdn-id>hh162742</msdn-id>	
        /// <unmanaged>MF2DBuffer_LockFlags_Write</unmanaged>	
        /// <unmanaged-short>MF2DBuffer_LockFlags_Write</unmanaged-short>	
        Write = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF2DBuffer_LockFlags_ReadWrite']/*"/>	
        /// <msdn-id>hh162742</msdn-id>	
        /// <unmanaged>MF2DBuffer_LockFlags_ReadWrite</unmanaged>	
        /// <unmanaged-short>MF2DBuffer_LockFlags_ReadWrite</unmanaged-short>	
        ReadWrite = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies the origin for a seek request.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_SEEK_ORIGIN']/*"/>	
    /// <msdn-id>ms702091</msdn-id>	
    /// <unmanaged>MFBYTESTREAM_SEEK_ORIGIN</unmanaged>	
    /// <unmanaged-short>MFBYTESTREAM_SEEK_ORIGIN</unmanaged-short>	
    public enum ByteStreamSeekOrigin : int {	
        
        /// <summary>	
        /// <dd> <p>The seek position is specified relative to the start of the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='msoBegin']/*"/>	
        /// <msdn-id>ms702091</msdn-id>	
        /// <unmanaged>msoBegin</unmanaged>	
        /// <unmanaged-short>msoBegin</unmanaged-short>	
        MsoBegin = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The seek position is specified relative to the current read/write position in the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='msoCurrent']/*"/>	
        /// <msdn-id>ms702091</msdn-id>	
        /// <unmanaged>msoCurrent</unmanaged>	
        /// <unmanaged-short>msoCurrent</unmanaged-short>	
        MsoCurrent = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies a type of capture device.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_DEVICE_TYPE']/*"/>	
    /// <msdn-id>hh162811</msdn-id>	
    /// <unmanaged>MF_CAPTURE_ENGINE_DEVICE_TYPE</unmanaged>	
    /// <unmanaged-short>MF_CAPTURE_ENGINE_DEVICE_TYPE</unmanaged-short>	
    public enum CaptureEngineDeviceType : int {	
        
        /// <summary>	
        /// <dd> <p>An audio capture device, such as a microphone.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO']/*"/>	
        /// <msdn-id>hh162811</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO</unmanaged-short>	
        Audio = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>A video capture device, such as a webcam.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO']/*"/>	
        /// <msdn-id>hh162811</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO</unmanaged-short>	
        Video = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies a type of capture sink.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_SINK_TYPE']/*"/>	
    /// <msdn-id>hh162824</msdn-id>	
    /// <unmanaged>MF_CAPTURE_ENGINE_SINK_TYPE</unmanaged>	
    /// <unmanaged-short>MF_CAPTURE_ENGINE_SINK_TYPE</unmanaged-short>	
    public enum CaptureEngineSinkType : int {	
        
        /// <summary>	
        /// <dd> <p>A recording sink, for capturing audio and video to a file.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_SINK_TYPE_RECORD']/*"/>	
        /// <msdn-id>hh162824</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_SINK_TYPE_RECORD</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_SINK_TYPE_RECORD</unmanaged-short>	
        Record = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>A preview sink, for previewing live audio or video.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW']/*"/>	
        /// <msdn-id>hh162824</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW</unmanaged-short>	
        Preview = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A photo sink, for capturing still images.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO']/*"/>	
        /// <msdn-id>hh162824</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO</unmanaged-short>	
        Photo = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the values for the source stream category.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY']/*"/>	
    /// <msdn-id>jj159898</msdn-id>	
    /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY</unmanaged>	
    /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY</unmanaged-short>	
    public enum CaptureEngineStreamCategory : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies a video preview stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW</unmanaged-short>	
        VideoPreview = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies a video capture stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE</unmanaged-short>	
        VideoCapture = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies an independent photo stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT</unmanaged-short>	
        PhotoIndependent = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Specifies a dependent photo stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT</unmanaged-short>	
        PhotoDependent = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Specifies an audio stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO</unmanaged-short>	
        Audio = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Specifies an unsupported stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED']/*"/>	
        /// <msdn-id>jj159898</msdn-id>	
        /// <unmanaged>MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED</unmanaged-short>	
        Unsupported = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Contains flags that describe the characteristics of a clock. These flags are returned by the <strong><see cref="SharpDX.MediaFoundation.Clock.GetClockCharacteristics"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_CHARACTERISTICS_FLAGS']/*"/>	
    /// <msdn-id>ms699872</msdn-id>	
    /// <unmanaged>MFCLOCK_CHARACTERISTICS_FLAGS</unmanaged>	
    /// <unmanaged-short>MFCLOCK_CHARACTERISTICS_FLAGS</unmanaged-short>	
    [Flags]
    public enum ClockCharacteristicsFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ']/*"/>	
        /// <msdn-id>ms699872</msdn-id>	
        /// <unmanaged>MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ</unmanaged>	
        /// <unmanaged-short>MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ</unmanaged-short>	
        Frequency10mhz = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING']/*"/>	
        /// <msdn-id>ms699872</msdn-id>	
        /// <unmanaged>MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING</unmanaged>	
        /// <unmanaged-short>MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING</unmanaged-short>	
        AlwaysRunning = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK']/*"/>	
        /// <msdn-id>ms699872</msdn-id>	
        /// <unmanaged>MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK</unmanaged>	
        /// <unmanaged-short>MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK</unmanaged-short>	
        IsSystemClock = unchecked((int)8),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines properties of a clock.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_RELATIONAL_FLAGS']/*"/>	
    /// <msdn-id>ms703927</msdn-id>	
    /// <unmanaged>MFCLOCK_RELATIONAL_FLAGS</unmanaged>	
    /// <unmanaged-short>MFCLOCK_RELATIONAL_FLAGS</unmanaged-short>	
    [Flags]
    public enum ClockRelationalFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Jitter values are always negative. In other words, the time returned by <strong><see cref="SharpDX.MediaFoundation.Clock.GetCorrelatedTime"/></strong> might jitter behind the actual clock time, but will never jitter ahead of the actual time. If this flag is not present, the clock might jitter in either direction.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD']/*"/>	
        /// <msdn-id>ms703927</msdn-id>	
        /// <unmanaged>MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD</unmanaged>	
        /// <unmanaged-short>MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD</unmanaged-short>	
        JitterNeverAhead = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the state of a clock.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_STATE']/*"/>	
    /// <msdn-id>ms700794</msdn-id>	
    /// <unmanaged>MFCLOCK_STATE</unmanaged>	
    /// <unmanaged-short>MFCLOCK_STATE</unmanaged-short>	
    public enum ClockState : int {	
        
        /// <summary>	
        /// <dd> <p>The clock is invalid. A clock might be invalid for several reasons. Some clocks return this state before the first start. This state can also occur if the underlying device is lost.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_STATE_INVALID']/*"/>	
        /// <msdn-id>ms700794</msdn-id>	
        /// <unmanaged>MFCLOCK_STATE_INVALID</unmanaged>	
        /// <unmanaged-short>MFCLOCK_STATE_INVALID</unmanaged-short>	
        Invalid = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The clock is running. While the clock is running, the time advances at the clock's frequency and current rate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_STATE_RUNNING']/*"/>	
        /// <msdn-id>ms700794</msdn-id>	
        /// <unmanaged>MFCLOCK_STATE_RUNNING</unmanaged>	
        /// <unmanaged-short>MFCLOCK_STATE_RUNNING</unmanaged-short>	
        Running = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The clock is stopped. While stopped, the clock reports a time of 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_STATE_STOPPED']/*"/>	
        /// <msdn-id>ms700794</msdn-id>	
        /// <unmanaged>MFCLOCK_STATE_STOPPED</unmanaged>	
        /// <unmanaged-short>MFCLOCK_STATE_STOPPED</unmanaged-short>	
        Stopped = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The clock is paused. While paused, the clock reports the time it was paused.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_STATE_PAUSED']/*"/>	
        /// <msdn-id>ms700794</msdn-id>	
        /// <unmanaged>MFCLOCK_STATE_PAUSED</unmanaged>	
        /// <unmanaged-short>MFCLOCK_STATE_PAUSED</unmanaged-short>	
        Paused = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies how the topology loader connects a topology node. This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.TopologyNodeAttributeKeys.ConnectMethod"/></strong> attribute. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_METHOD']/*"/>	
    /// <msdn-id>ms700178</msdn-id>	
    /// <unmanaged>MF_CONNECT_METHOD</unmanaged>	
    /// <unmanaged-short>MF_CONNECT_METHOD</unmanaged-short>	
    public enum ConnectMethod : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_DIRECT']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_DIRECT</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_DIRECT</unmanaged-short>	
        Direct = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_ALLOW_CONVERTER']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_ALLOW_CONVERTER</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_ALLOW_CONVERTER</unmanaged-short>	
        AllowConverter = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_ALLOW_DECODER']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_ALLOW_DECODER</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_ALLOW_DECODER</unmanaged-short>	
        AllowDecoder = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES</unmanaged-short>	
        ResolveIndependentOutputTypes = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_AS_OPTIONAL']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_AS_OPTIONAL</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_AS_OPTIONAL</unmanaged-short>	
        AsOptional = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CONNECT_AS_OPTIONAL_BRANCH']/*"/>	
        /// <msdn-id>ms700178</msdn-id>	
        /// <unmanaged>MF_CONNECT_AS_OPTIONAL_BRANCH</unmanaged>	
        /// <unmanaged-short>MF_CONNECT_AS_OPTIONAL_BRANCH</unmanaged-short>	
        AsOptionalBranch = unchecked((int)131072),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CROSS_ORIGIN_POLICY']/*"/>	
    /// <unmanaged>MF_CROSS_ORIGIN_POLICY</unmanaged>	
    /// <unmanaged-short>MF_CROSS_ORIGIN_POLICY</unmanaged-short>	
    public enum CrossOriginPolicy : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CROSS_ORIGIN_POLICY_NONE']/*"/>	
        /// <unmanaged>MF_CROSS_ORIGIN_POLICY_NONE</unmanaged>	
        /// <unmanaged-short>MF_CROSS_ORIGIN_POLICY_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CROSS_ORIGIN_POLICY_ANONYMOUS']/*"/>	
        /// <unmanaged>MF_CROSS_ORIGIN_POLICY_ANONYMOUS</unmanaged>	
        /// <unmanaged-short>MF_CROSS_ORIGIN_POLICY_ANONYMOUS</unmanaged-short>	
        Anonymous = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS']/*"/>	
        /// <unmanaged>MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS</unmanaged>	
        /// <unmanaged-short>MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS</unmanaged-short>	
        UseCredentials = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFDepthMeasurement']/*"/>	
    /// <unmanaged>MFDepthMeasurement</unmanaged>	
    /// <unmanaged-short>MFDepthMeasurement</unmanaged-short>	
    public enum DepthMeasurement : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DistanceToFocalPlane']/*"/>	
        /// <unmanaged>DistanceToFocalPlane</unmanaged>	
        /// <unmanaged-short>DistanceToFocalPlane</unmanaged-short>	
        DistanceToFocalPlane = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DistanceToOpticalCenter']/*"/>	
        /// <unmanaged>DistanceToOpticalCenter</unmanaged>	
        /// <unmanaged-short>DistanceToOpticalCenter</unmanaged-short>	
        DistanceToOpticalCenter = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>The <strong>SetOutputStreamState</strong> method sets the Device MFT output stream state and media type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface method helps to transition the output stream to a specified state with specified media type set on the output stream. This will be used by the DTM when the Device Source requests a specific output stream?s state and media type to be changed. Device MFT should change the specified output stream?s media type and state to the requested media type.</p><p>If the incoming media type and stream state are same as the current media type and stream state the method return <strong><see cref="SharpDX.Result.Ok"/></strong>.</p><p>If the incoming media type and current media type of the stream are the same, Device MFT must change the stream?s state to the requested value and return the appropriate <strong><see cref="SharpDX.Result"/></strong>.</p><p>When a change in the output stream?s media type requires a corresponding change in the input then Device MFT must post the <see cref="SharpDX.MediaFoundation.MediaEventTypes.TransformInputStreamStateChanged"/> event  to DTM to change the relevant input stream. The call must return only after changing the input stream?s media type and the appropriate <strong><see cref="SharpDX.Result"/></strong>.</p><p>As an  example, consider a Device MFT that has two input streams and three output streams. Let  Output 1 and Output 2 source from Input 1 and  stream at 720p. Now, let us say Output 2?s media type changes to 1080p. To satisfy this request, Device MFT must  change the Input 1 media type to 1080p, by posting <see cref="SharpDX.MediaFoundation.MediaEventTypes.TransformInputStreamStateChanged"/> event to the DTM. DTM would call <strong>SetInputStreamState</strong> to change the input stream? media type and state. After this call, the <strong>SetOutputStreamState</strong> must return.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DeviceStreamState']/*"/>	
    /// <msdn-id>mt797684</msdn-id>	
    /// <unmanaged>DeviceStreamState</unmanaged>	
    /// <unmanaged-short>DeviceStreamState</unmanaged-short>	
    public enum DeviceStreamState : int {	
        
        /// <summary>	
        /// <dd> <p>Stream ID of the input stream where the state and media type needs to be changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DeviceStreamState_Stop']/*"/>	
        /// <msdn-id>mt797684</msdn-id>	
        /// <unmanaged>DeviceStreamState_Stop</unmanaged>	
        /// <unmanaged-short>DeviceStreamState_Stop</unmanaged-short>	
        Stop = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Preferred media type for the input stream is passed in through this parameter. Device MFT should change the media type only if the incoming media type is different from the current media type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DeviceStreamState_Pause']/*"/>	
        /// <msdn-id>mt797684</msdn-id>	
        /// <unmanaged>DeviceStreamState_Pause</unmanaged>	
        /// <unmanaged-short>DeviceStreamState_Pause</unmanaged-short>	
        Pause = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies the  <strong>DeviceStreamState</strong> which the input stream should transition to.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DeviceStreamState_Run']/*"/>	
        /// <msdn-id>mt797684</msdn-id>	
        /// <unmanaged>DeviceStreamState_Run</unmanaged>	
        /// <unmanaged-short>DeviceStreamState_Run</unmanaged-short>	
        Run = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Must be zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DeviceStreamState_Disabled']/*"/>	
        /// <msdn-id>mt797684</msdn-id>	
        /// <unmanaged>DeviceStreamState_Disabled</unmanaged>	
        /// <unmanaged-short>DeviceStreamState_Disabled</unmanaged-short>	
        Disabled = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_INPLACE_PROCESS_FLAGS']/*"/>	
    /// <unmanaged>_DMO_INPLACE_PROCESS_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_INPLACE_PROCESS_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoInplaceProcessFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPLACE_NORMAL']/*"/>	
        /// <unmanaged>DMO_INPLACE_NORMAL</unmanaged>	
        /// <unmanaged-short>DMO_INPLACE_NORMAL</unmanaged-short>	
        DmoInplaceNormal = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPLACE_ZERO']/*"/>	
        /// <unmanaged>DMO_INPLACE_ZERO</unmanaged>	
        /// <unmanaged-short>DMO_INPLACE_ZERO</unmanaged-short>	
        DmoInplaceZero = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>The <code>DMO_INPUT_DATA_BUFFER_FLAGS</code> enumeration defines flags that describe an input buffer.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_INPUT_DATA_BUFFER_FLAGS']/*"/>	
    /// <msdn-id>dd375501</msdn-id>	
    /// <unmanaged>_DMO_INPUT_DATA_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_INPUT_DATA_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoInputDataBufferFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The beginning of the data is a synchronization point.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_DATA_BUFFERF_SYNCPOINT']/*"/>	
        /// <msdn-id>dd375501</msdn-id>	
        /// <unmanaged>DMO_INPUT_DATA_BUFFERF_SYNCPOINT</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_DATA_BUFFERF_SYNCPOINT</unmanaged-short>	
        DmoInputDataBufferFSyncpoint = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The buffer's time stamp is valid.</p> <p>The buffer's indicated time length is valid.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_DATA_BUFFERF_TIME']/*"/>	
        /// <msdn-id>dd375501</msdn-id>	
        /// <unmanaged>DMO_INPUT_DATA_BUFFERF_TIME</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_DATA_BUFFERF_TIME</unmanaged-short>	
        DmoInputDataBufferFTime = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The buffer's indicated time length is valid.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_DATA_BUFFERF_TIMELENGTH']/*"/>	
        /// <msdn-id>dd375501</msdn-id>	
        /// <unmanaged>DMO_INPUT_DATA_BUFFERF_TIMELENGTH</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_DATA_BUFFERF_TIMELENGTH</unmanaged-short>	
        DmoInputDataBufferFTimelength = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_DATA_BUFFERF_DISCONTINUITY']/*"/>	
        /// <msdn-id>dd375501</msdn-id>	
        /// <unmanaged>DMO_INPUT_DATA_BUFFERF_DISCONTINUITY</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_DATA_BUFFERF_DISCONTINUITY</unmanaged-short>	
        DmoInputDataBufferFDiscontinuity = unchecked((int)8),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Media Foundation transforms (MFTs) are an evolution of the transform model first introduced with DirectX Media Objects (DMOs). This topic summarizes the main ways in which MFTs differ from DMOs. Read this topic if you are already familiar with the DMO interfaces, or if you want to convert an existing DMO into an MFT.</p><p>This topic contains the following sections:</p><p> </p><ul> <li>Number</li> <li>Format</li> <li>Streaming<ul> <li>Allocating</li> <li>Processing</li> <li>Flushing</li> <li>Stream</li> </ul> </li> <li>Miscellaneous</li> <li>Flags<ul> <li>ProcessInput</li> <li>ProcessOutput</li> <li>GetInputStatus</li> <li>GetOutputStatus</li> <li>GetInputStreamInfo</li> <li>GetOutputStreamInfo</li> <li>SetInputType/SetOutputType</li> </ul> </li> <li>Error</li> <li>Creating</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_INPUT_STATUS_FLAGS']/*"/>	
    /// <msdn-id>bb250374</msdn-id>	
    /// <unmanaged>_DMO_INPUT_STATUS_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_INPUT_STATUS_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoInputStatusFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_STATUSF_ACCEPT_DATA']/*"/>	
        /// <msdn-id>bb250374</msdn-id>	
        /// <unmanaged>DMO_INPUT_STATUSF_ACCEPT_DATA</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_STATUSF_ACCEPT_DATA</unmanaged-short>	
        DmoInputStatusfAcceptData = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>The <code>DMO_INPUT_STREAM_INFO_FLAGS</code> enumeration defines flags that describe an input stream.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_INPUT_STREAM_INFO_FLAGS']/*"/>	
    /// <msdn-id>dd375502</msdn-id>	
    /// <unmanaged>_DMO_INPUT_STREAM_INFO_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_INPUT_STREAM_INFO_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoInputStreamInformationFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The stream requires whole samples. Samples must not span multiple buffers, and buffers must not contain partial samples.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_STREAMF_WHOLE_SAMPLES']/*"/>	
        /// <msdn-id>dd375502</msdn-id>	
        /// <unmanaged>DMO_INPUT_STREAMF_WHOLE_SAMPLES</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_STREAMF_WHOLE_SAMPLES</unmanaged-short>	
        DmoInputStreamFWholeSamples = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Each buffer must contain exactly one sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER']/*"/>	
        /// <msdn-id>dd375502</msdn-id>	
        /// <unmanaged>DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER</unmanaged-short>	
        DmoInputStreamFSingleSamplePerBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>All the samples in this stream must be the same size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE']/*"/>	
        /// <msdn-id>dd375502</msdn-id>	
        /// <unmanaged>DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE</unmanaged-short>	
        DmoInputStreamFFixedSampleSize = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The DMO performs lookahead on the incoming data, and may hold multiple input buffers for this stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_INPUT_STREAMF_HOLDS_BUFFERS']/*"/>	
        /// <msdn-id>dd375502</msdn-id>	
        /// <unmanaged>DMO_INPUT_STREAMF_HOLDS_BUFFERS</unmanaged>	
        /// <unmanaged-short>DMO_INPUT_STREAMF_HOLDS_BUFFERS</unmanaged-short>	
        DmoInputStreamFHoldsBuffers = unchecked((int)8),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_OUTPUT_DATA_BUFFER_FLAGS']/*"/>	
    /// <unmanaged>_DMO_OUTPUT_DATA_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_OUTPUT_DATA_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoOutputDataBufferFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT']/*"/>	
        /// <unmanaged>DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT</unmanaged-short>	
        DmoOutputDataBufferFSyncpoint = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFERF_TIME']/*"/>	
        /// <unmanaged>DMO_OUTPUT_DATA_BUFFERF_TIME</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFERF_TIME</unmanaged-short>	
        DmoOutputDataBufferFTime = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH']/*"/>	
        /// <unmanaged>DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH</unmanaged-short>	
        DmoOutputDataBufferFTimelength = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY']/*"/>	
        /// <unmanaged>DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY</unmanaged-short>	
        DmoOutputDataBufferFDiscontinuity = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE']/*"/>	
        /// <unmanaged>DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE</unmanaged-short>	
        DmoOutputDataBufferFIncomplete = unchecked((int)16777216),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_OUTPUT_STREAM_INFO_FLAGS']/*"/>	
    /// <unmanaged>_DMO_OUTPUT_STREAM_INFO_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_OUTPUT_STREAM_INFO_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoOutputStreamInformationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_STREAMF_WHOLE_SAMPLES']/*"/>	
        /// <unmanaged>DMO_OUTPUT_STREAMF_WHOLE_SAMPLES</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_STREAMF_WHOLE_SAMPLES</unmanaged-short>	
        DmoOutputStreamFWholeSamples = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER']/*"/>	
        /// <unmanaged>DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER</unmanaged-short>	
        DmoOutputStreamFSingleSamplePerBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE']/*"/>	
        /// <unmanaged>DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE</unmanaged-short>	
        DmoOutputStreamFFixedSampleSize = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_STREAMF_DISCARDABLE']/*"/>	
        /// <unmanaged>DMO_OUTPUT_STREAMF_DISCARDABLE</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_STREAMF_DISCARDABLE</unmanaged-short>	
        DmoOutputStreamFDiscardable = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_STREAMF_OPTIONAL']/*"/>	
        /// <unmanaged>DMO_OUTPUT_STREAMF_OPTIONAL</unmanaged>	
        /// <unmanaged-short>DMO_OUTPUT_STREAMF_OPTIONAL</unmanaged-short>	
        DmoOutputStreamFOptional = unchecked((int)16),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>The <code>DMO_PROCESS_OUTPUT_FLAGS</code> enumeration defines flags that specify output processing requests.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_PROCESS_OUTPUT_FLAGS']/*"/>	
    /// <msdn-id>dd375511</msdn-id>	
    /// <unmanaged>_DMO_PROCESS_OUTPUT_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_PROCESS_OUTPUT_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoProcessOutputFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Discard the output when the reference to the output buffer is <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER']/*"/>	
        /// <msdn-id>dd375511</msdn-id>	
        /// <unmanaged>DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</unmanaged>	
        /// <unmanaged-short>DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</unmanaged-short>	
        DmoProcessOutputDiscardWhenNoBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_QUALITY_STATUS_FLAGS']/*"/>	
    /// <unmanaged>_DMO_QUALITY_STATUS_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_QUALITY_STATUS_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoQualityStatusFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_QUALITY_STATUS_ENABLED']/*"/>	
        /// <unmanaged>DMO_QUALITY_STATUS_ENABLED</unmanaged>	
        /// <unmanaged-short>DMO_QUALITY_STATUS_ENABLED</unmanaged-short>	
        DmoQualityStatusEnabled = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>The <code>DMO_SET_TYPE_FLAGS</code> enumeration defines flags for setting the media type on a stream.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <see cref="SharpDX.MediaFoundation.DmoSetTypeFlags.DmoSetTypefTestOnly"/> and <see cref="SharpDX.MediaFoundation.DmoSetTypeFlags.DmoSetTypefClear"/> flags are mutually exclusive. Do not set both flags.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_SET_TYPE_FLAGS']/*"/>	
    /// <msdn-id>dd375514</msdn-id>	
    /// <unmanaged>_DMO_SET_TYPE_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_SET_TYPE_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoSetTypeFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Test the media type but do not set it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_SET_TYPEF_TEST_ONLY']/*"/>	
        /// <msdn-id>dd375514</msdn-id>	
        /// <unmanaged>DMO_SET_TYPEF_TEST_ONLY</unmanaged>	
        /// <unmanaged-short>DMO_SET_TYPEF_TEST_ONLY</unmanaged-short>	
        DmoSetTypefTestOnly = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Clear the media type that was set for the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_SET_TYPEF_CLEAR']/*"/>	
        /// <msdn-id>dd375514</msdn-id>	
        /// <unmanaged>DMO_SET_TYPEF_CLEAR</unmanaged>	
        /// <unmanaged-short>DMO_SET_TYPEF_CLEAR</unmanaged-short>	
        DmoSetTypefClear = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_DMO_VIDEO_OUTPUT_STREAM_FLAGS']/*"/>	
    /// <unmanaged>_DMO_VIDEO_OUTPUT_STREAM_FLAGS</unmanaged>	
    /// <unmanaged-short>_DMO_VIDEO_OUTPUT_STREAM_FLAGS</unmanaged-short>	
    [Flags]
    public enum DmoVideoOutputStreamFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_VOSF_NEEDS_PREVIOUS_SAMPLE']/*"/>	
        /// <unmanaged>DMO_VOSF_NEEDS_PREVIOUS_SAMPLE</unmanaged>	
        /// <unmanaged-short>DMO_VOSF_NEEDS_PREVIOUS_SAMPLE</unmanaged-short>	
        DmoVosfNeedsPreviousSample = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='EAllocationType']/*"/>	
    /// <unmanaged>EAllocationType</unmanaged>	
    /// <unmanaged-short>EAllocationType</unmanaged-short>	
    public enum EAllocationType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='eAllocationTypeDynamic']/*"/>	
        /// <unmanaged>eAllocationTypeDynamic</unmanaged>	
        /// <unmanaged-short>eAllocationTypeDynamic</unmanaged-short>	
        EAllocationTypeDynamic = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='eAllocationTypeRT']/*"/>	
        /// <unmanaged>eAllocationTypeRT</unmanaged>	
        /// <unmanaged-short>eAllocationTypeRT</unmanaged-short>	
        EAllocationTypeRT = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='eAllocationTypePageable']/*"/>	
        /// <unmanaged>eAllocationTypePageable</unmanaged>	
        /// <unmanaged-short>eAllocationTypePageable</unmanaged-short>	
        EAllocationTypePageable = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='eAllocationTypeIgnore']/*"/>	
        /// <unmanaged>eAllocationTypeIgnore</unmanaged>	
        /// <unmanaged-short>eAllocationTypeIgnore</unmanaged-short>	
        EAllocationTypeIgnore = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Contains flags that are used to configure the Microsoft DirectShow enhanced video renderer (EVR) filter.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='EVRFilterConfigPrefs']/*"/>	
    /// <msdn-id>dd318789</msdn-id>	
    /// <unmanaged>EVRFilterConfigPrefs</unmanaged>	
    /// <unmanaged-short>EVRFilterConfigPrefs</unmanaged-short>	
    public enum EVRFilterConfigPrefs : int {	
        
        /// <summary>	
        /// <dd> <p>Enables dynamic adjustments to video quality during playback.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='EVRFilterConfigPrefs_EnableQoS']/*"/>	
        /// <msdn-id>dd318789</msdn-id>	
        /// <unmanaged>EVRFilterConfigPrefs_EnableQoS</unmanaged>	
        /// <unmanaged-short>EVRFilterConfigPrefs_EnableQoS</unmanaged-short>	
        EnableQoS = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies the requested access mode for opening a file.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILE_ACCESSMODE']/*"/>	
    /// <msdn-id>ms696239</msdn-id>	
    /// <unmanaged>MF_FILE_ACCESSMODE</unmanaged>	
    /// <unmanaged-short>MF_FILE_ACCESSMODE</unmanaged-short>	
    public enum FileAccessMode : int {	
        
        /// <summary>	
        /// <dd> <p>Read mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ACCESSMODE_READ']/*"/>	
        /// <msdn-id>ms696239</msdn-id>	
        /// <unmanaged>MF_ACCESSMODE_READ</unmanaged>	
        /// <unmanaged-short>MF_ACCESSMODE_READ</unmanaged-short>	
        MfAccessModeRead = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Write mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ACCESSMODE_WRITE']/*"/>	
        /// <msdn-id>ms696239</msdn-id>	
        /// <unmanaged>MF_ACCESSMODE_WRITE</unmanaged>	
        /// <unmanaged-short>MF_ACCESSMODE_WRITE</unmanaged-short>	
        MfAccessModeWrite = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Read and write mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_ACCESSMODE_READWRITE']/*"/>	
        /// <msdn-id>ms696239</msdn-id>	
        /// <unmanaged>MF_ACCESSMODE_READWRITE</unmanaged>	
        /// <unmanaged-short>MF_ACCESSMODE_READWRITE</unmanaged-short>	
        MfAccessModeReadwrite = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p> Specifies the behavior when opening a file. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILE_FLAGS']/*"/>	
    /// <msdn-id>ms694926</msdn-id>	
    /// <unmanaged>MF_FILE_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_FILE_FLAGS</unmanaged-short>	
    [Flags]
    public enum FileFlags : int {	
        
        /// <summary>	
        /// <dd> <p> Use the default behavior. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILEFLAGS_NONE']/*"/>	
        /// <msdn-id>ms694926</msdn-id>	
        /// <unmanaged>MF_FILEFLAGS_NONE</unmanaged>	
        /// <unmanaged-short>MF_FILEFLAGS_NONE</unmanaged-short>	
        FlagsNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Open the file with no system caching. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILEFLAGS_NOBUFFERING']/*"/>	
        /// <msdn-id>ms694926</msdn-id>	
        /// <unmanaged>MF_FILEFLAGS_NOBUFFERING</unmanaged>	
        /// <unmanaged-short>MF_FILEFLAGS_NOBUFFERING</unmanaged-short>	
        FlagsNobuffering = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Subsequent open operations can have write access to the file. </p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILEFLAGS_ALLOW_WRITE_SHARING']/*"/>	
        /// <msdn-id>ms694926</msdn-id>	
        /// <unmanaged>MF_FILEFLAGS_ALLOW_WRITE_SHARING</unmanaged>	
        /// <unmanaged-short>MF_FILEFLAGS_ALLOW_WRITE_SHARING</unmanaged-short>	
        FlagsAllowWriteSharing = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how to open or create a file.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FILE_OPENMODE']/*"/>	
    /// <msdn-id>ms694164</msdn-id>	
    /// <unmanaged>MF_FILE_OPENMODE</unmanaged>	
    /// <unmanaged-short>MF_FILE_OPENMODE</unmanaged-short>	
    public enum FileOpenMode : int {	
        
        /// <summary>	
        /// <dd> <p>Open an existing file. Fail if the file does not exist.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPENMODE_FAIL_IF_NOT_EXIST']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MF_OPENMODE_FAIL_IF_NOT_EXIST</unmanaged>	
        /// <unmanaged-short>MF_OPENMODE_FAIL_IF_NOT_EXIST</unmanaged-short>	
        MfOpenModeFailIfNotExist = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Create a new file. Fail if the file already exists.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPENMODE_FAIL_IF_EXIST']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MF_OPENMODE_FAIL_IF_EXIST</unmanaged>	
        /// <unmanaged-short>MF_OPENMODE_FAIL_IF_EXIST</unmanaged-short>	
        MfOpenModeFailIfExist = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Open an existing file and truncate it, so that the size is zero bytes. Fail if the file does not already exist.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPENMODE_RESET_IF_EXIST']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MF_OPENMODE_RESET_IF_EXIST</unmanaged>	
        /// <unmanaged-short>MF_OPENMODE_RESET_IF_EXIST</unmanaged-short>	
        MfOpenModeResetIfExist = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>If the file does not exist, create a new file. If the file exists, open it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPENMODE_APPEND_IF_EXIST']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MF_OPENMODE_APPEND_IF_EXIST</unmanaged>	
        /// <unmanaged-short>MF_OPENMODE_APPEND_IF_EXIST</unmanaged-short>	
        MfOpenModeAppendIfExist = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Create a new file. If the file exists, overwrite the file.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPENMODE_DELETE_IF_EXIST']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MF_OPENMODE_DELETE_IF_EXIST</unmanaged>	
        /// <unmanaged-short>MF_OPENMODE_DELETE_IF_EXIST</unmanaged-short>	
        MfOpenModeDeleteIfExist = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Describes the type of data provided by a frame source.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values of this enumeration are used with the MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFrameSourceTypes']/*"/>	
    /// <msdn-id>mt764279</msdn-id>	
    /// <unmanaged>MFFrameSourceTypes</unmanaged>	
    /// <unmanaged-short>MFFrameSourceTypes</unmanaged-short>	
    public enum FrameSourceTypes : int {	
        
        /// <summary>	
        /// <dd> <p>The frame source provides color data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFrameSourceTypes_Color']/*"/>	
        /// <msdn-id>mt764279</msdn-id>	
        /// <unmanaged>MFFrameSourceTypes_Color</unmanaged>	
        /// <unmanaged-short>MFFrameSourceTypes_Color</unmanaged-short>	
        Color = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The frame source provides infrared data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFrameSourceTypes_Infrared']/*"/>	
        /// <msdn-id>mt764279</msdn-id>	
        /// <unmanaged>MFFrameSourceTypes_Infrared</unmanaged>	
        /// <unmanaged-short>MFFrameSourceTypes_Infrared</unmanaged-short>	
        Infrared = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The frame source provides depth data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFrameSourceTypes_Depth']/*"/>	
        /// <msdn-id>mt764279</msdn-id>	
        /// <unmanaged>MFFrameSourceTypes_Depth</unmanaged>	
        /// <unmanaged-short>MFFrameSourceTypes_Depth</unmanaged-short>	
        Depth = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The frame source provides custom data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFrameSourceTypes_Custom']/*"/>	
        /// <msdn-id>mt764279</msdn-id>	
        /// <unmanaged>MFFrameSourceTypes_Custom</unmanaged>	
        /// <unmanaged-short>MFFrameSourceTypes_Custom</unmanaged-short>	
        Custom = unchecked((int)128),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_HDCP_STATUS']/*"/>	
    /// <unmanaged>MF_HDCP_STATUS</unmanaged>	
    /// <unmanaged-short>MF_HDCP_STATUS</unmanaged-short>	
    public enum HdcpStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_HDCP_STATUS_ON']/*"/>	
        /// <unmanaged>MF_HDCP_STATUS_ON</unmanaged>	
        /// <unmanaged-short>MF_HDCP_STATUS_ON</unmanaged-short>	
        On = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_HDCP_STATUS_OFF']/*"/>	
        /// <unmanaged>MF_HDCP_STATUS_OFF</unmanaged>	
        /// <unmanaged-short>MF_HDCP_STATUS_OFF</unmanaged-short>	
        Off = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT']/*"/>	
        /// <unmanaged>MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT</unmanaged>	
        /// <unmanaged-short>MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT</unmanaged-short>	
        OnWithTypeEnforcement = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies the likelihood that the Media Engine can play a specified type of media resource.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CANPLAY']/*"/>	
    /// <msdn-id>hh162836</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_CANPLAY</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_CANPLAY</unmanaged-short>	
    public enum MediaEngineCanPlay : int {	
        
        /// <summary>	
        /// <dd> <p>The Media Engine cannot play the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED']/*"/>	
        /// <msdn-id>hh162836</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED</unmanaged-short>	
        NotSupported = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine might be able to play the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CANPLAY_MAYBE']/*"/>	
        /// <msdn-id>hh162836</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_CANPLAY_MAYBE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_CANPLAY_MAYBE</unmanaged-short>	
        Maybe = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine can probably play the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CANPLAY_PROBABLY']/*"/>	
        /// <msdn-id>hh162836</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_CANPLAY_PROBABLY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_CANPLAY_PROBABLY</unmanaged-short>	
        Probably = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.MediaEngineClassFactory.CreateInstance"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CREATEFLAGS']/*"/>	
    /// <msdn-id>hh162839</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_CREATEFLAGS</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_CREATEFLAGS</unmanaged-short>	
    [Flags]
    public enum MediaEngineCreateFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_AUDIOONLY']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_AUDIOONLY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_AUDIOONLY</unmanaged-short>	
        AudioOnly = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_WAITFORSTABLE_STATE']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_WAITFORSTABLE_STATE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_WAITFORSTABLE_STATE</unmanaged-short>	
        WaitForStableState = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_FORCEMUTE']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_FORCEMUTE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_FORCEMUTE</unmanaged-short>	
        ForceMute = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_REAL_TIME_MODE']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_REAL_TIME_MODE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_REAL_TIME_MODE</unmanaged-short>	
        RealTimeMode = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS</unmanaged-short>	
        DisableLocalPlugins = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_CREATEFLAGS_MASK']/*"/>	
        /// <msdn-id>hh162839</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_CREATEFLAGS_MASK</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_CREATEFLAGS_MASK</unmanaged-short>	
        CreateFlagsMask = unchecked((int)31),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines error status codes for the Media Engine.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values greater than zero correspond to error codes defined for the <strong>MediaError</strong> object  in HTML5.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR']/*"/>	
    /// <msdn-id>hh162841</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_ERR</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_ERR</unmanaged-short>	
    public enum MediaEngineErr : int {	
        
        /// <summary>	
        /// <dd> <p>No error.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_NOERROR']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_NOERROR</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_NOERROR</unmanaged-short>	
        Noerror = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The process of fetching the media resource was stopped at the user's request. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_ABORTED']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_ABORTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_ABORTED</unmanaged-short>	
        Aborted = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A network error occurred while fetching the media resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_NETWORK']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_NETWORK</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_NETWORK</unmanaged-short>	
        Network = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>An error occurred while decoding the media resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_DECODE']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_DECODE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_DECODE</unmanaged-short>	
        Decode = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The media resource is not supported. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED</unmanaged-short>	
        SourceNotSupported = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>An error occurred while encrypting the media resource.</p> <p>Supported in Windows?8.1 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ERR_ENCRYPTED']/*"/>	
        /// <msdn-id>hh162841</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ERR_ENCRYPTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ERR_ENCRYPTED</unmanaged-short>	
        Encrypted = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Defines event codes for the Media Engine. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The application receives Media Engine events through the <strong><see cref="SharpDX.MediaFoundation.MediaEngineNotify.EventNotify"/></strong> method. The <strong>EventNotify</strong> method includes two event parameters, <em>param1</em> and <em>param2</em>. The meaning of the parameters depends on the event code. If the event description does not list any parameters, ignore the values of <em>param1</em> and <em>param2</em>.</p><p>Values below 1000 correspond to events defined in HTML 5 for media elements.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT']/*"/>	
    /// <msdn-id>hh162842</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_EVENT</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT</unmanaged-short>	
    public enum MediaEngineEvent : int {	
        
        /// <summary>	
        /// <dd> <p>The Media Engine has started to load the source. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.Load"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_LOADSTART']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_LOADSTART</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_LOADSTART</unmanaged-short>	
        LoadStart = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine is loading the source.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_PROGRESS']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_PROGRESS</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_PROGRESS</unmanaged-short>	
        Progress = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has suspended a load operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_SUSPEND']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_SUSPEND</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_SUSPEND</unmanaged-short>	
        Suspend = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine cancelled a load operation that was in progress. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_ABORT']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_ABORT</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_ABORT</unmanaged-short>	
        Abort = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>An error occurred.</p> <table> <tr><th>Event Parameter</th><th>Description</th></tr> <tr><td><em>param1</em></td><td>A member of the <strong><see cref="SharpDX.MediaFoundation.MediaEngineErr"/></strong> enumeration.</td></tr> <tr><td><em>param2</em></td><td>An <strong><see cref="SharpDX.Result"/></strong> error code, or zero.</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_ERROR']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_ERROR</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_ERROR</unmanaged-short>	
        Error = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has switched to the <strong><see cref="SharpDX.MediaFoundation.MediaEngineNetwork.Empty"/></strong> state. This can occur when the <strong><see cref="SharpDX.MediaFoundation.MediaEngine.Load"/></strong> method is called, or if an error occurs during the <strong>Load</strong> method. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.GetNetworkState"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_EMPTIED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_EMPTIED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_EMPTIED</unmanaged-short>	
        Emptied = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>The <strong>Load</strong> algorithm is stalled, waiting for data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_STALLED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_STALLED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_STALLED</unmanaged-short>	
        Stalled = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine is switching to the playing state. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.Play"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_PLAY']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_PLAY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_PLAY</unmanaged-short>	
        Play = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>The media engine has paused. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.Pause"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_PAUSE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_PAUSE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_PAUSE</unmanaged-short>	
        Pause = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has loaded enough source data to determine the duration and dimensions  of the source.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA</unmanaged-short>	
        LoadedMetadata = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has loaded enough data to render some content (for example, a video frame).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_LOADEDDATA']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_LOADEDDATA</unmanaged-short>	
        LoadedData = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>Playback has stopped because the next frame is not available.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_WAITING']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_WAITING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_WAITING</unmanaged-short>	
        Waiting = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>Playback has started. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.Play"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_PLAYING']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_PLAYING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_PLAYING</unmanaged-short>	
        Playing = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>Playback can start, but the Media Engine might need to stop to buffer more data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_CANPLAY']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_CANPLAY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_CANPLAY</unmanaged-short>	
        CanPlay = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine can probably play through to the end of the resource, without stopping to buffer data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH</unmanaged-short>	
        CanPlayThrough = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has started seeking to a new playback position. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.SetCurrentTime"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_SEEKING']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_SEEKING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_SEEKING</unmanaged-short>	
        Seeking = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has seeked to a new playback position. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.SetCurrentTime"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_SEEKED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_SEEKED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_SEEKED</unmanaged-short>	
        Seeked = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>The playback position has changed. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.GetCurrentTime"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_TIMEUPDATE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_TIMEUPDATE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_TIMEUPDATE</unmanaged-short>	
        TimeUpdate = unchecked((int)18),			
        
        /// <summary>	
        /// <dd> <p>Playback has reached the end of the source. This event is not sent if the <strong>GetLoop</strong>is <strong>TRUE</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_ENDED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_ENDED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_ENDED</unmanaged-short>	
        Ended = unchecked((int)19),			
        
        /// <summary>	
        /// <dd> <p>The playback rate has changed. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.SetPlaybackRate"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_RATECHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_RATECHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_RATECHANGE</unmanaged-short>	
        RateChange = unchecked((int)20),			
        
        /// <summary>	
        /// <dd> <p>The duration of the media source has changed. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.GetDuration"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE</unmanaged-short>	
        DurationChange = unchecked((int)21),			
        
        /// <summary>	
        /// <dd> <p>The audio volume changed. See <strong><see cref="SharpDX.MediaFoundation.MediaEngine.SetVolume"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE</unmanaged-short>	
        VolumeChange = unchecked((int)22),			
        
        /// <summary>	
        /// <dd> <p>The output format of the media source has changed.</p> <table> <tr><th>Event Parameter</th><th>Description</th></tr> <tr><td><em>param1</em></td><td>Zero if the video format changed, 1 if the audio format changed.</td></tr> <tr><td><em>param2</em></td><td>Zero.</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_FORMATCHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_FORMATCHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_FORMATCHANGE</unmanaged-short>	
        FormatChange = unchecked((int)1000),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine flushed any pending events from its 	queue.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS</unmanaged-short>	
        PurgeQueuedEvents = unchecked((int)1001),			
        
        /// <summary>	
        /// <dd> <p>The playback position reached a timeline marker. See <strong><see cref="SharpDX.MediaFoundation.MediaEngineEx.SetTimelineMarkerTimer"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER</unmanaged-short>	
        TimelineMarker = unchecked((int)1002),			
        
        /// <summary>	
        /// <dd> <p>The audio balance changed. See <strong><see cref="SharpDX.MediaFoundation.MediaEngineEx.SetBalance"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_BALANCECHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_BALANCECHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_BALANCECHANGE</unmanaged-short>	
        BalanceChange = unchecked((int)1003),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has finished downloading the source data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE</unmanaged-short>	
        DownloadComplete = unchecked((int)1004),			
        
        /// <summary>	
        /// <dd> <p>The media source has started to buffer data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED</unmanaged-short>	
        BufferingStarted = unchecked((int)1005),			
        
        /// <summary>	
        /// <dd> <p>The media source has stopped buffering data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED</unmanaged-short>	
        BufferingEnded = unchecked((int)1006),			
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.MediaFoundation.MediaEngineEx.FrameStep"/></strong> method completed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED</unmanaged-short>	
        FrameStepCompleted = unchecked((int)1007),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine's <strong>Load</strong> algorithm is waiting to start.</p> <table> <tr><th>Event Parameter</th><th>Description</th></tr> <tr><td><em>param1</em></td><td>A handle to a waitable event, of type <strong>HANDLE</strong>.</td></tr> <tr><td><em>param2</em></td><td>Zero.</td></tr> </table> <p>?</p> <p>If Media Engine is created with the <strong><see cref="SharpDX.MediaFoundation.MediaEngineCreateFlags.WaitForStableState"/></strong> flag, the Media Engine sends the <strong><see cref="SharpDX.MediaFoundation.MediaEngineEvent.NotifyStableState"/></strong> event at the start of the <strong>Load</strong> algorithm. The <em>param1</em> parameter is a handle to a waitable event. The <strong>Load</strong> thread waits for the application to signal the event by calling <strong>SetEvent</strong>.</p> <p>If the Media Engine is not created with the <strong><see cref="SharpDX.MediaFoundation.MediaEngineCreateFlags.WaitForStableState"/></strong>, it does not send this event, and the <strong>Load</strong> thread does not wait to be signalled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE</unmanaged-short>	
        NotifyStableState = unchecked((int)1008),			
        
        /// <summary>	
        /// <dd> <p>The first frame of the media source is ready to render.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY</unmanaged-short>	
        FirstFrameReady = unchecked((int)1009),			
        
        /// <summary>	
        /// <dd> <p>Raised when a new track is added or removed.</p> <p>Supported in Windows?8.1 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE</unmanaged-short>	
        Trackschange = unchecked((int)1010),			
        
        /// <summary>	
        /// <dd> <p>Raised when there is new information about the Output Protection Manager (OPM). </p> <p>This event will be raised when an OPM failure occurs, but ITA allows fallback without the OPM. In this case, constriction can be applied. </p> <p>This event will not be raised when there is an OPM failure and the fallback also fails. For example, if ITA blocks playback entirely when OPM cannot be established.</p> <p>Supported in Windows?8.1 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_OPMINFO']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_OPMINFO</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_OPMINFO</unmanaged-short>	
        OpmInformation = unchecked((int)1011),			
        
        /// <summary>	
        /// <dd> <p>Raised when one of the component streams of a media stream fails. This event is only raised if the media stream contains other component streams that did not fail.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_RESOURCELOST']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_RESOURCELOST</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_RESOURCELOST</unmanaged-short>	
        ResourceLost = unchecked((int)1012),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED</unmanaged-short>	
        DelayloadeventChanged = unchecked((int)1013),			
        
        /// <summary>	
        /// <dd> <p>Raised when one of the component streams of a media stream fails. This event is only raised if the media stream contains other component streams that did not fail.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR</unmanaged-short>	
        StreamRenderingerror = unchecked((int)1014),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED']/*"/>	
        /// <msdn-id>hh162842</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED</unmanaged-short>	
        SupportedRateSChanged = unchecked((int)1015),			
    }
    
    /// <summary>	
    /// <p>Specifies media engine extension types.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EXTENSION_TYPE']/*"/>	
    /// <msdn-id>hh162844</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_EXTENSION_TYPE</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_EXTENSION_TYPE</unmanaged-short>	
    public enum MediaEngineExtensionType : int {	
        
        /// <summary>	
        /// <dd></dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE']/*"/>	
        /// <msdn-id>hh162844</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE</unmanaged-short>	
        MediaSource = unchecked((int)0),			
        
        /// <summary>	
        /// <dd></dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM']/*"/>	
        /// <msdn-id>hh162844</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM</unmanaged-short>	
        ByteStream = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies the content protection requirements for a video frame.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS']/*"/>	
    /// <msdn-id>hh162845</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS</unmanaged-short>	
    [Flags]
    public enum MediaEngineFrameProtectionFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The video frame should be protected.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED']/*"/>	
        /// <msdn-id>hh162845</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED</unmanaged-short>	
        Protected = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Direct3D surface protection must be applied to any surface that contains the frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION']/*"/>	
        /// <msdn-id>hh162845</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION</unmanaged-short>	
        RequiresSurfaceProtection = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Direct3D anti-screen-scrape protection must be applied to any surface that contains the frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION']/*"/>	
        /// <msdn-id>hh162845</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION</unmanaged-short>	
        RequiresAntiScreenScrapeProtection = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines media key error codes for the media engine.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong><see cref="SharpDX.MediaFoundation.MediaEngineKeyerr"/></strong> is used with the <em>code</em> parameter of  <strong><see cref="SharpDX.MediaFoundation.MediaKeySessionNotify.KeyError"/></strong> and the <em>code</em> value returned from <strong><see cref="SharpDX.MediaFoundation.MediaKeySession.GetError"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_KEYERR']/*"/>	
    /// <msdn-id>dn302188</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_KEYERR</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_KEYERR</unmanaged-short>	
    public enum MediaEngineKeyerr : int {	
        
        /// <summary>	
        /// <dd> <p>Unknown error occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_UNKNOWN']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_UNKNOWN</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_UNKNOWN</unmanaged-short>	
        EngineKeyerrUnknown = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>An error with the client occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_CLIENT']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_CLIENT</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_CLIENT</unmanaged-short>	
        EngineKeyerrClient = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>An error with the service occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_SERVICE']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_SERVICE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_SERVICE</unmanaged-short>	
        EngineKeyerrService = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>An error with the output occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_OUTPUT']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_OUTPUT</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_OUTPUT</unmanaged-short>	
        EngineKeyerrOutput = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>An error occurred related to a hardware change.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_HARDWARECHANGE']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_HARDWARECHANGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_HARDWARECHANGE</unmanaged-short>	
        EngineKeyerrHardwarechange = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>An error with the domain occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAENGINE_KEYERR_DOMAIN']/*"/>	
        /// <msdn-id>dn302188</msdn-id>	
        /// <unmanaged>MF_MEDIAENGINE_KEYERR_DOMAIN</unmanaged>	
        /// <unmanaged-short>MF_MEDIAENGINE_KEYERR_DOMAIN</unmanaged-short>	
        EngineKeyerrDomain = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Defines network status codes for the Media Engine.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_NETWORK']/*"/>	
    /// <msdn-id>hh162846</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_NETWORK</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_NETWORK</unmanaged-short>	
    public enum MediaEngineNetwork : int {	
        
        /// <summary>	
        /// <dd> <p>The initial state.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_NETWORK_EMPTY']/*"/>	
        /// <msdn-id>hh162846</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_NETWORK_EMPTY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_NETWORK_EMPTY</unmanaged-short>	
        Empty = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has started the resource selection algorithm, and has selected a media resource, but is not using the network.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_NETWORK_IDLE']/*"/>	
        /// <msdn-id>hh162846</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_NETWORK_IDLE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_NETWORK_IDLE</unmanaged-short>	
        Idle = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine is loading a media resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_NETWORK_LOADING']/*"/>	
        /// <msdn-id>hh162846</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_NETWORK_LOADING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_NETWORK_LOADING</unmanaged-short>	
        Loading = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The Media Engine has started the resource selection algorithm, but has not selected a media resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_NETWORK_NO_SOURCE']/*"/>	
        /// <msdn-id>hh162846</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_NETWORK_NO_SOURCE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_NETWORK_NO_SOURCE</unmanaged-short>	
        NoSource = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Defines the status of the Output Protection Manager (OPM).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_STATUS']/*"/>	
    /// <msdn-id>dn302190</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_OPM_STATUS</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_STATUS</unmanaged-short>	
    public enum MediaEngineOpmStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_NOT_REQUESTED']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_NOT_REQUESTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_NOT_REQUESTED</unmanaged-short>	
        NotRequested = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_ESTABLISHED']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_ESTABLISHED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_ESTABLISHED</unmanaged-short>	
        Established = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_FAILED_VM']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_FAILED_VM</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_FAILED_VM</unmanaged-short>	
        FailedVm = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_FAILED_BDA']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_FAILED_BDA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_FAILED_BDA</unmanaged-short>	
        FailedBda = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER</unmanaged-short>	
        FailedUnsignedDriver = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_OPM_FAILED']/*"/>	
        /// <msdn-id>dn302190</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_OPM_FAILED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_OPM_FAILED</unmanaged-short>	
        Failed = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Defines preload hints for the Media Engine. These values correspond to the <strong>preload</strong> attribute of the <strong>HTMLMediaElement</strong> interface in HTML5.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD']/*"/>	
    /// <msdn-id>hh162851</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD</unmanaged-short>	
    public enum MediaEnginePreload : int {	
        
        /// <summary>	
        /// <dd> <p>The <strong>preload</strong> attribute is missing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD_MISSING']/*"/>	
        /// <msdn-id>hh162851</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD_MISSING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD_MISSING</unmanaged-short>	
        Missing = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The <strong>preload</strong> attribute is an empty string. This value is equivalent to <strong><see cref="SharpDX.MediaFoundation.MediaEnginePreload.Automatic"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD_EMPTY']/*"/>	
        /// <msdn-id>hh162851</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD_EMPTY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD_EMPTY</unmanaged-short>	
        Empty = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The <strong>preload</strong> attribute is "none". This value is a hint to the user agent not to preload the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD_NONE']/*"/>	
        /// <msdn-id>hh162851</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD_NONE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD_NONE</unmanaged-short>	
        None = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The <strong>preload</strong> attribute is "metadata". This value is a hint to the user agent to fetch the resource metadata.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD_METADATA']/*"/>	
        /// <msdn-id>hh162851</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD_METADATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD_METADATA</unmanaged-short>	
        Metadata = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The <strong>preload</strong> attribute is "auto". This value is a hint to the user agent to preload the entire resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC']/*"/>	
        /// <msdn-id>hh162851</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC</unmanaged-short>	
        Automatic = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Contains flags that specify whether the Media Engine will play protected content, and whether the Media Engine will use the Protected Media Path (PMP).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These flags are used with the <see cref="SharpDX.MediaFoundation.MediaEngineAttributeKeys.ContentProtectionFlags"/> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_PROTECTION_FLAGS']/*"/>	
    /// <msdn-id>hh162852</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_PROTECTION_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_PROTECTION_FLAGS</unmanaged-short>	
    [Flags]
    public enum MediaEngineProtectionFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT']/*"/>	
        /// <msdn-id>hh162852</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT</unmanaged-short>	
        EnableProtectedContent = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT']/*"/>	
        /// <msdn-id>hh162852</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT</unmanaged-short>	
        UsePmpForAllContent = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP']/*"/>	
        /// <msdn-id>hh162852</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP</unmanaged-short>	
        UseUnprotectedPmp = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines ready-state values for the Media Engine.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These values correspond to constants defined for the  <strong>HTMLMediaElement.readyState</strong> attribute  in HTML5.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY']/*"/>	
    /// <msdn-id>hh162853</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_READY</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_READY</unmanaged-short>	
    public enum MediaEngineReady : int {	
        
        /// <summary>	
        /// <dd> <p>No data is available.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY_HAVE_NOTHING']/*"/>	
        /// <msdn-id>hh162853</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_READY_HAVE_NOTHING</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_READY_HAVE_NOTHING</unmanaged-short>	
        HaveNothing = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Some metadata is available, including the duration and, for video files, the video dimensions. No media data is available.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY_HAVE_METADATA']/*"/>	
        /// <msdn-id>hh162853</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_READY_HAVE_METADATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_READY_HAVE_METADATA</unmanaged-short>	
        HaveMetadata = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>There is media data  for the current playback position, but not enough data for playback or seeking.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA']/*"/>	
        /// <msdn-id>hh162853</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA</unmanaged-short>	
        HaveCurrentData = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>There is enough media data to enable some playback or seeking. The amount of data might be a little as the next video frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA']/*"/>	
        /// <msdn-id>hh162853</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA</unmanaged-short>	
        HaveFutureData = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>There is enough data to play the resource, based on the current rate at which the resource is being fetched. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA']/*"/>	
        /// <msdn-id>hh162853</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA</unmanaged-short>	
        HaveEnoughData = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies the layout for a packed 3D video frame.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_S3D_PACKING_MODE']/*"/>	
    /// <msdn-id>hh162854</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_S3D_PACKING_MODE</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_S3D_PACKING_MODE</unmanaged-short>	
    public enum MediaEngineS3DPackingMode : int {	
        
        /// <summary>	
        /// <dd> <p>None.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE']/*"/>	
        /// <msdn-id>hh162854</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The views are packed side-by-side in a single frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE']/*"/>	
        /// <msdn-id>hh162854</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE</unmanaged-short>	
        SideBySide = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The views are packed top-to-bottom in a single frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM']/*"/>	
        /// <msdn-id>hh162854</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM</unmanaged-short>	
        TopBottom = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines values for the media engine seek mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <strong>MediaEngineEx::SetCurrentTimeEx</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_SEEK_MODE']/*"/>	
    /// <msdn-id>jj128345</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_SEEK_MODE</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_SEEK_MODE</unmanaged-short>	
    public enum MediaEngineSeekMode : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies normal seek.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_SEEK_MODE_NORMAL']/*"/>	
        /// <msdn-id>jj128345</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_SEEK_MODE_NORMAL</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_SEEK_MODE_NORMAL</unmanaged-short>	
        Normal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies an approximate seek. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE']/*"/>	
        /// <msdn-id>jj128345</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE</unmanaged-short>	
        Approximate = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifies statistics that the Media Engine tracks during playback. To get a playback statistic from the Media Engine, call <strong><see cref="SharpDX.MediaFoundation.MediaEngineEx.GetStatistics"/></strong>.</p><p>In the descriptions that follow, the data type and value-type tag for the <strong><see cref="SharpDX.Win32.Variant"/></strong> are listed in parentheses.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC']/*"/>	
    /// <msdn-id>hh162855</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC</unmanaged-short>	
    public enum MediaEngineStatistic : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED</unmanaged-short>	
        FramesRendered = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED</unmanaged-short>	
        FramesDropped = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED</unmanaged-short>	
        BytesDownloaded = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS</unmanaged-short>	
        BufferProgress = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND</unmanaged-short>	
        FramesPerSecond = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER</unmanaged-short>	
        PlaybackJitter = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED</unmanaged-short>	
        FramesCorrupted = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY']/*"/>	
        /// <msdn-id>hh162855</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY</unmanaged-short>	
        TotalFrameDelay = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Identifies the kind of media stream that failed.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STREAMTYPE_FAILED']/*"/>	
    /// <msdn-id>dn879054</msdn-id>	
    /// <unmanaged>MF_MEDIA_ENGINE_STREAMTYPE_FAILED</unmanaged>	
    /// <unmanaged-short>MF_MEDIA_ENGINE_STREAMTYPE_FAILED</unmanaged-short>	
    public enum MediaEngineStreamTypeFailed : int {	
        
        /// <summary>	
        /// <dd> <p>The stream type is unknown.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN']/*"/>	
        /// <msdn-id>dn879054</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The stream is an audio stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO']/*"/>	
        /// <msdn-id>dn879054</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO</unmanaged-short>	
        Audio = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The stream is a video stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO']/*"/>	
        /// <msdn-id>dn879054</msdn-id>	
        /// <unmanaged>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO</unmanaged>	
        /// <unmanaged-short>MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO</unmanaged-short>	
        Video = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfobjects_0000_0012_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfobjects_0000_0012_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfobjects_0000_0012_0001</unmanaged-short>	
    public enum MediaEventTypes : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEUnknown']/*"/>	
        /// <unmanaged>MEUnknown</unmanaged>	
        /// <unmanaged-short>MEUnknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEError']/*"/>	
        /// <unmanaged>MEError</unmanaged>	
        /// <unmanaged-short>MEError</unmanaged-short>	
        Error = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEExtendedType']/*"/>	
        /// <unmanaged>MEExtendedType</unmanaged>	
        /// <unmanaged-short>MEExtendedType</unmanaged-short>	
        ExtendedType = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MENonFatalError']/*"/>	
        /// <unmanaged>MENonFatalError</unmanaged>	
        /// <unmanaged-short>MENonFatalError</unmanaged-short>	
        NonFatalError = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEGenericV1Anchor']/*"/>	
        /// <unmanaged>MEGenericV1Anchor</unmanaged>	
        /// <unmanaged-short>MEGenericV1Anchor</unmanaged-short>	
        GenericV1Anchor = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionUnknown']/*"/>	
        /// <unmanaged>MESessionUnknown</unmanaged>	
        /// <unmanaged-short>MESessionUnknown</unmanaged-short>	
        SessionUnknown = unchecked((int)100),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionTopologySet']/*"/>	
        /// <unmanaged>MESessionTopologySet</unmanaged>	
        /// <unmanaged-short>MESessionTopologySet</unmanaged-short>	
        SessionTopologySet = unchecked((int)101),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionTopologiesCleared']/*"/>	
        /// <unmanaged>MESessionTopologiesCleared</unmanaged>	
        /// <unmanaged-short>MESessionTopologiesCleared</unmanaged-short>	
        SessionTopologiesCleared = unchecked((int)102),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionStarted']/*"/>	
        /// <unmanaged>MESessionStarted</unmanaged>	
        /// <unmanaged-short>MESessionStarted</unmanaged-short>	
        SessionStarted = unchecked((int)103),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionPaused']/*"/>	
        /// <unmanaged>MESessionPaused</unmanaged>	
        /// <unmanaged-short>MESessionPaused</unmanaged-short>	
        SessionPaused = unchecked((int)104),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionStopped']/*"/>	
        /// <unmanaged>MESessionStopped</unmanaged>	
        /// <unmanaged-short>MESessionStopped</unmanaged-short>	
        SessionStopped = unchecked((int)105),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionClosed']/*"/>	
        /// <unmanaged>MESessionClosed</unmanaged>	
        /// <unmanaged-short>MESessionClosed</unmanaged-short>	
        SessionClosed = unchecked((int)106),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionEnded']/*"/>	
        /// <unmanaged>MESessionEnded</unmanaged>	
        /// <unmanaged-short>MESessionEnded</unmanaged-short>	
        SessionEnded = unchecked((int)107),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionRateChanged']/*"/>	
        /// <unmanaged>MESessionRateChanged</unmanaged>	
        /// <unmanaged-short>MESessionRateChanged</unmanaged-short>	
        SessionRateChanged = unchecked((int)108),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionScrubSampleComplete']/*"/>	
        /// <unmanaged>MESessionScrubSampleComplete</unmanaged>	
        /// <unmanaged-short>MESessionScrubSampleComplete</unmanaged-short>	
        SessionScrubSampleComplete = unchecked((int)109),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionCapabilitiesChanged']/*"/>	
        /// <unmanaged>MESessionCapabilitiesChanged</unmanaged>	
        /// <unmanaged-short>MESessionCapabilitiesChanged</unmanaged-short>	
        SessionCapabilitiesChanged = unchecked((int)110),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionTopologyStatus']/*"/>	
        /// <unmanaged>MESessionTopologyStatus</unmanaged>	
        /// <unmanaged-short>MESessionTopologyStatus</unmanaged-short>	
        SessionTopologyStatus = unchecked((int)111),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionNotifyPresentationTime']/*"/>	
        /// <unmanaged>MESessionNotifyPresentationTime</unmanaged>	
        /// <unmanaged-short>MESessionNotifyPresentationTime</unmanaged-short>	
        SessionNotifyPresentationTime = unchecked((int)112),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MENewPresentation']/*"/>	
        /// <unmanaged>MENewPresentation</unmanaged>	
        /// <unmanaged-short>MENewPresentation</unmanaged-short>	
        NewPresentation = unchecked((int)113),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MELicenseAcquisitionStart']/*"/>	
        /// <unmanaged>MELicenseAcquisitionStart</unmanaged>	
        /// <unmanaged-short>MELicenseAcquisitionStart</unmanaged-short>	
        LicenseAcquisitionStart = unchecked((int)114),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MELicenseAcquisitionCompleted']/*"/>	
        /// <unmanaged>MELicenseAcquisitionCompleted</unmanaged>	
        /// <unmanaged-short>MELicenseAcquisitionCompleted</unmanaged-short>	
        LicenseAcquisitionCompleted = unchecked((int)115),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEIndividualizationStart']/*"/>	
        /// <unmanaged>MEIndividualizationStart</unmanaged>	
        /// <unmanaged-short>MEIndividualizationStart</unmanaged-short>	
        IndividualizationStart = unchecked((int)116),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEIndividualizationCompleted']/*"/>	
        /// <unmanaged>MEIndividualizationCompleted</unmanaged>	
        /// <unmanaged-short>MEIndividualizationCompleted</unmanaged-short>	
        IndividualizationCompleted = unchecked((int)117),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEnablerProgress']/*"/>	
        /// <unmanaged>MEEnablerProgress</unmanaged>	
        /// <unmanaged-short>MEEnablerProgress</unmanaged-short>	
        EnablerProgress = unchecked((int)118),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEnablerCompleted']/*"/>	
        /// <unmanaged>MEEnablerCompleted</unmanaged>	
        /// <unmanaged-short>MEEnablerCompleted</unmanaged-short>	
        EnablerCompleted = unchecked((int)119),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEPolicyError']/*"/>	
        /// <unmanaged>MEPolicyError</unmanaged>	
        /// <unmanaged-short>MEPolicyError</unmanaged-short>	
        PolicyError = unchecked((int)120),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEPolicyReport']/*"/>	
        /// <unmanaged>MEPolicyReport</unmanaged>	
        /// <unmanaged-short>MEPolicyReport</unmanaged-short>	
        PolicyReport = unchecked((int)121),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEBufferingStarted']/*"/>	
        /// <unmanaged>MEBufferingStarted</unmanaged>	
        /// <unmanaged-short>MEBufferingStarted</unmanaged-short>	
        BufferingStarted = unchecked((int)122),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEBufferingStopped']/*"/>	
        /// <unmanaged>MEBufferingStopped</unmanaged>	
        /// <unmanaged-short>MEBufferingStopped</unmanaged-short>	
        BufferingStopped = unchecked((int)123),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEConnectStart']/*"/>	
        /// <unmanaged>MEConnectStart</unmanaged>	
        /// <unmanaged-short>MEConnectStart</unmanaged-short>	
        ConnectStart = unchecked((int)124),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEConnectEnd']/*"/>	
        /// <unmanaged>MEConnectEnd</unmanaged>	
        /// <unmanaged-short>MEConnectEnd</unmanaged-short>	
        ConnectEnd = unchecked((int)125),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEReconnectStart']/*"/>	
        /// <unmanaged>MEReconnectStart</unmanaged>	
        /// <unmanaged-short>MEReconnectStart</unmanaged-short>	
        ReconnectStart = unchecked((int)126),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEReconnectEnd']/*"/>	
        /// <unmanaged>MEReconnectEnd</unmanaged>	
        /// <unmanaged-short>MEReconnectEnd</unmanaged-short>	
        ReconnectEnd = unchecked((int)127),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MERendererEvent']/*"/>	
        /// <unmanaged>MERendererEvent</unmanaged>	
        /// <unmanaged-short>MERendererEvent</unmanaged-short>	
        RendererEvent = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionStreamSinkFormatChanged']/*"/>	
        /// <unmanaged>MESessionStreamSinkFormatChanged</unmanaged>	
        /// <unmanaged-short>MESessionStreamSinkFormatChanged</unmanaged-short>	
        SessionStreamSinkFormatChanged = unchecked((int)129),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESessionV1Anchor']/*"/>	
        /// <unmanaged>MESessionV1Anchor</unmanaged>	
        /// <unmanaged-short>MESessionV1Anchor</unmanaged-short>	
        SessionV1Anchor = unchecked((int)129),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceUnknown']/*"/>	
        /// <unmanaged>MESourceUnknown</unmanaged>	
        /// <unmanaged-short>MESourceUnknown</unmanaged-short>	
        SourceUnknown = unchecked((int)200),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceStarted']/*"/>	
        /// <unmanaged>MESourceStarted</unmanaged>	
        /// <unmanaged-short>MESourceStarted</unmanaged-short>	
        SourceStarted = unchecked((int)201),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamStarted']/*"/>	
        /// <unmanaged>MEStreamStarted</unmanaged>	
        /// <unmanaged-short>MEStreamStarted</unmanaged-short>	
        StreamStarted = unchecked((int)202),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceSeeked']/*"/>	
        /// <unmanaged>MESourceSeeked</unmanaged>	
        /// <unmanaged-short>MESourceSeeked</unmanaged-short>	
        SourceSeeked = unchecked((int)203),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSeeked']/*"/>	
        /// <unmanaged>MEStreamSeeked</unmanaged>	
        /// <unmanaged-short>MEStreamSeeked</unmanaged-short>	
        StreamSeeked = unchecked((int)204),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MENewStream']/*"/>	
        /// <unmanaged>MENewStream</unmanaged>	
        /// <unmanaged-short>MENewStream</unmanaged-short>	
        NewStream = unchecked((int)205),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEUpdatedStream']/*"/>	
        /// <unmanaged>MEUpdatedStream</unmanaged>	
        /// <unmanaged-short>MEUpdatedStream</unmanaged-short>	
        UpdatedStream = unchecked((int)206),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceStopped']/*"/>	
        /// <unmanaged>MESourceStopped</unmanaged>	
        /// <unmanaged-short>MESourceStopped</unmanaged-short>	
        SourceStopped = unchecked((int)207),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamStopped']/*"/>	
        /// <unmanaged>MEStreamStopped</unmanaged>	
        /// <unmanaged-short>MEStreamStopped</unmanaged-short>	
        StreamStopped = unchecked((int)208),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourcePaused']/*"/>	
        /// <unmanaged>MESourcePaused</unmanaged>	
        /// <unmanaged-short>MESourcePaused</unmanaged-short>	
        SourcePaused = unchecked((int)209),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamPaused']/*"/>	
        /// <unmanaged>MEStreamPaused</unmanaged>	
        /// <unmanaged-short>MEStreamPaused</unmanaged-short>	
        StreamPaused = unchecked((int)210),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEndOfPresentation']/*"/>	
        /// <unmanaged>MEEndOfPresentation</unmanaged>	
        /// <unmanaged-short>MEEndOfPresentation</unmanaged-short>	
        EndOfPresentation = unchecked((int)211),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEndOfStream']/*"/>	
        /// <unmanaged>MEEndOfStream</unmanaged>	
        /// <unmanaged-short>MEEndOfStream</unmanaged-short>	
        EndOfStream = unchecked((int)212),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEMediaSample']/*"/>	
        /// <unmanaged>MEMediaSample</unmanaged>	
        /// <unmanaged-short>MEMediaSample</unmanaged-short>	
        MediaSample = unchecked((int)213),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamTick']/*"/>	
        /// <unmanaged>MEStreamTick</unmanaged>	
        /// <unmanaged-short>MEStreamTick</unmanaged-short>	
        StreamTick = unchecked((int)214),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamThinMode']/*"/>	
        /// <unmanaged>MEStreamThinMode</unmanaged>	
        /// <unmanaged-short>MEStreamThinMode</unmanaged-short>	
        StreamThinMode = unchecked((int)215),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamFormatChanged']/*"/>	
        /// <unmanaged>MEStreamFormatChanged</unmanaged>	
        /// <unmanaged-short>MEStreamFormatChanged</unmanaged-short>	
        StreamFormatChanged = unchecked((int)216),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceRateChanged']/*"/>	
        /// <unmanaged>MESourceRateChanged</unmanaged>	
        /// <unmanaged-short>MESourceRateChanged</unmanaged-short>	
        SourceRateChanged = unchecked((int)217),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEndOfPresentationSegment']/*"/>	
        /// <unmanaged>MEEndOfPresentationSegment</unmanaged>	
        /// <unmanaged-short>MEEndOfPresentationSegment</unmanaged-short>	
        EndOfPresentationSegment = unchecked((int)218),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceCharacteristicsChanged']/*"/>	
        /// <unmanaged>MESourceCharacteristicsChanged</unmanaged>	
        /// <unmanaged-short>MESourceCharacteristicsChanged</unmanaged-short>	
        SourceCharacteristicsChanged = unchecked((int)219),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceRateChangeRequested']/*"/>	
        /// <unmanaged>MESourceRateChangeRequested</unmanaged>	
        /// <unmanaged-short>MESourceRateChangeRequested</unmanaged-short>	
        SourceRateChangeRequested = unchecked((int)220),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceMetadataChanged']/*"/>	
        /// <unmanaged>MESourceMetadataChanged</unmanaged>	
        /// <unmanaged-short>MESourceMetadataChanged</unmanaged-short>	
        SourceMetadataChanged = unchecked((int)221),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESequencerSourceTopologyUpdated']/*"/>	
        /// <unmanaged>MESequencerSourceTopologyUpdated</unmanaged>	
        /// <unmanaged-short>MESequencerSourceTopologyUpdated</unmanaged-short>	
        SequencerSourceTopologyUpdated = unchecked((int)222),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESourceV1Anchor']/*"/>	
        /// <unmanaged>MESourceV1Anchor</unmanaged>	
        /// <unmanaged-short>MESourceV1Anchor</unmanaged-short>	
        SourceV1Anchor = unchecked((int)222),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESinkUnknown']/*"/>	
        /// <unmanaged>MESinkUnknown</unmanaged>	
        /// <unmanaged-short>MESinkUnknown</unmanaged-short>	
        SinkUnknown = unchecked((int)300),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkStarted']/*"/>	
        /// <unmanaged>MEStreamSinkStarted</unmanaged>	
        /// <unmanaged-short>MEStreamSinkStarted</unmanaged-short>	
        StreamSinkStarted = unchecked((int)301),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkStopped']/*"/>	
        /// <unmanaged>MEStreamSinkStopped</unmanaged>	
        /// <unmanaged-short>MEStreamSinkStopped</unmanaged-short>	
        StreamSinkStopped = unchecked((int)302),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkPaused']/*"/>	
        /// <unmanaged>MEStreamSinkPaused</unmanaged>	
        /// <unmanaged-short>MEStreamSinkPaused</unmanaged-short>	
        StreamSinkPaused = unchecked((int)303),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkRateChanged']/*"/>	
        /// <unmanaged>MEStreamSinkRateChanged</unmanaged>	
        /// <unmanaged-short>MEStreamSinkRateChanged</unmanaged-short>	
        StreamSinkRateChanged = unchecked((int)304),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkRequestSample']/*"/>	
        /// <unmanaged>MEStreamSinkRequestSample</unmanaged>	
        /// <unmanaged-short>MEStreamSinkRequestSample</unmanaged-short>	
        StreamSinkRequestSample = unchecked((int)305),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkMarker']/*"/>	
        /// <unmanaged>MEStreamSinkMarker</unmanaged>	
        /// <unmanaged-short>MEStreamSinkMarker</unmanaged-short>	
        StreamSinkMarker = unchecked((int)306),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkPrerolled']/*"/>	
        /// <unmanaged>MEStreamSinkPrerolled</unmanaged>	
        /// <unmanaged-short>MEStreamSinkPrerolled</unmanaged-short>	
        StreamSinkPrerolled = unchecked((int)307),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkScrubSampleComplete']/*"/>	
        /// <unmanaged>MEStreamSinkScrubSampleComplete</unmanaged>	
        /// <unmanaged-short>MEStreamSinkScrubSampleComplete</unmanaged-short>	
        StreamSinkScrubSampleComplete = unchecked((int)308),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkFormatChanged']/*"/>	
        /// <unmanaged>MEStreamSinkFormatChanged</unmanaged>	
        /// <unmanaged-short>MEStreamSinkFormatChanged</unmanaged-short>	
        StreamSinkFormatChanged = unchecked((int)309),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkDeviceChanged']/*"/>	
        /// <unmanaged>MEStreamSinkDeviceChanged</unmanaged>	
        /// <unmanaged-short>MEStreamSinkDeviceChanged</unmanaged-short>	
        StreamSinkDeviceChanged = unchecked((int)310),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEQualityNotify']/*"/>	
        /// <unmanaged>MEQualityNotify</unmanaged>	
        /// <unmanaged-short>MEQualityNotify</unmanaged-short>	
        QualityNotify = unchecked((int)311),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESinkInvalidated']/*"/>	
        /// <unmanaged>MESinkInvalidated</unmanaged>	
        /// <unmanaged-short>MESinkInvalidated</unmanaged-short>	
        SinkInvalidated = unchecked((int)312),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionNameChanged']/*"/>	
        /// <unmanaged>MEAudioSessionNameChanged</unmanaged>	
        /// <unmanaged-short>MEAudioSessionNameChanged</unmanaged-short>	
        AudioSessionNameChanged = unchecked((int)313),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionVolumeChanged']/*"/>	
        /// <unmanaged>MEAudioSessionVolumeChanged</unmanaged>	
        /// <unmanaged-short>MEAudioSessionVolumeChanged</unmanaged-short>	
        AudioSessionVolumeChanged = unchecked((int)314),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionDeviceRemoved']/*"/>	
        /// <unmanaged>MEAudioSessionDeviceRemoved</unmanaged>	
        /// <unmanaged-short>MEAudioSessionDeviceRemoved</unmanaged-short>	
        AudioSessionDeviceRemoved = unchecked((int)315),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionServerShutdown']/*"/>	
        /// <unmanaged>MEAudioSessionServerShutdown</unmanaged>	
        /// <unmanaged-short>MEAudioSessionServerShutdown</unmanaged-short>	
        AudioSessionServerShutdown = unchecked((int)316),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionGroupingParamChanged']/*"/>	
        /// <unmanaged>MEAudioSessionGroupingParamChanged</unmanaged>	
        /// <unmanaged-short>MEAudioSessionGroupingParamChanged</unmanaged-short>	
        AudioSessionGroupingParamChanged = unchecked((int)317),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionIconChanged']/*"/>	
        /// <unmanaged>MEAudioSessionIconChanged</unmanaged>	
        /// <unmanaged-short>MEAudioSessionIconChanged</unmanaged-short>	
        AudioSessionIconChanged = unchecked((int)318),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionFormatChanged']/*"/>	
        /// <unmanaged>MEAudioSessionFormatChanged</unmanaged>	
        /// <unmanaged-short>MEAudioSessionFormatChanged</unmanaged-short>	
        AudioSessionFormatChanged = unchecked((int)319),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionDisconnected']/*"/>	
        /// <unmanaged>MEAudioSessionDisconnected</unmanaged>	
        /// <unmanaged-short>MEAudioSessionDisconnected</unmanaged-short>	
        AudioSessionDisconnected = unchecked((int)320),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEAudioSessionExclusiveModeOverride']/*"/>	
        /// <unmanaged>MEAudioSessionExclusiveModeOverride</unmanaged>	
        /// <unmanaged-short>MEAudioSessionExclusiveModeOverride</unmanaged-short>	
        AudioSessionExclusiveModeOverride = unchecked((int)321),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESinkV1Anchor']/*"/>	
        /// <unmanaged>MESinkV1Anchor</unmanaged>	
        /// <unmanaged-short>MESinkV1Anchor</unmanaged-short>	
        SinkV1Anchor = unchecked((int)321),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionVolumeChanged']/*"/>	
        /// <unmanaged>MECaptureAudioSessionVolumeChanged</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionVolumeChanged</unmanaged-short>	
        CaptureAudioSessionVolumeChanged = unchecked((int)322),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionDeviceRemoved']/*"/>	
        /// <unmanaged>MECaptureAudioSessionDeviceRemoved</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionDeviceRemoved</unmanaged-short>	
        CaptureAudioSessionDeviceRemoved = unchecked((int)323),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionFormatChanged']/*"/>	
        /// <unmanaged>MECaptureAudioSessionFormatChanged</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionFormatChanged</unmanaged-short>	
        CaptureAudioSessionFormatChanged = unchecked((int)324),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionDisconnected']/*"/>	
        /// <unmanaged>MECaptureAudioSessionDisconnected</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionDisconnected</unmanaged-short>	
        CaptureAudioSessionDisconnected = unchecked((int)325),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionExclusiveModeOverride']/*"/>	
        /// <unmanaged>MECaptureAudioSessionExclusiveModeOverride</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionExclusiveModeOverride</unmanaged-short>	
        CaptureAudioSessionExclusiveModeOverride = unchecked((int)326),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MECaptureAudioSessionServerShutdown']/*"/>	
        /// <unmanaged>MECaptureAudioSessionServerShutdown</unmanaged>	
        /// <unmanaged-short>MECaptureAudioSessionServerShutdown</unmanaged-short>	
        CaptureAudioSessionServerShutdown = unchecked((int)327),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MESinkV2Anchor']/*"/>	
        /// <unmanaged>MESinkV2Anchor</unmanaged>	
        /// <unmanaged-short>MESinkV2Anchor</unmanaged-short>	
        SinkV2Anchor = unchecked((int)327),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METrustUnknown']/*"/>	
        /// <unmanaged>METrustUnknown</unmanaged>	
        /// <unmanaged-short>METrustUnknown</unmanaged-short>	
        TrustUnknown = unchecked((int)400),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEPolicyChanged']/*"/>	
        /// <unmanaged>MEPolicyChanged</unmanaged>	
        /// <unmanaged-short>MEPolicyChanged</unmanaged-short>	
        PolicyChanged = unchecked((int)401),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEContentProtectionMessage']/*"/>	
        /// <unmanaged>MEContentProtectionMessage</unmanaged>	
        /// <unmanaged-short>MEContentProtectionMessage</unmanaged-short>	
        ContentProtectionMessage = unchecked((int)402),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEPolicySet']/*"/>	
        /// <unmanaged>MEPolicySet</unmanaged>	
        /// <unmanaged-short>MEPolicySet</unmanaged-short>	
        PolicySet = unchecked((int)403),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METrustV1Anchor']/*"/>	
        /// <unmanaged>METrustV1Anchor</unmanaged>	
        /// <unmanaged-short>METrustV1Anchor</unmanaged-short>	
        TrustV1Anchor = unchecked((int)403),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseBackupCompleted']/*"/>	
        /// <unmanaged>MEWMDRMLicenseBackupCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseBackupCompleted</unmanaged-short>	
        WindowsMediaDRMLicenseBackupCompleted = unchecked((int)500),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseBackupProgress']/*"/>	
        /// <unmanaged>MEWMDRMLicenseBackupProgress</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseBackupProgress</unmanaged-short>	
        WindowsMediaDRMLicenseBackupProgress = unchecked((int)501),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseRestoreCompleted']/*"/>	
        /// <unmanaged>MEWMDRMLicenseRestoreCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseRestoreCompleted</unmanaged-short>	
        WindowsMediaDRMLicenseRestoreCompleted = unchecked((int)502),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseRestoreProgress']/*"/>	
        /// <unmanaged>MEWMDRMLicenseRestoreProgress</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseRestoreProgress</unmanaged-short>	
        WindowsMediaDRMLicenseRestoreProgress = unchecked((int)503),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseAcquisitionCompleted']/*"/>	
        /// <unmanaged>MEWMDRMLicenseAcquisitionCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseAcquisitionCompleted</unmanaged-short>	
        WindowsMediaDRMLicenseAcquisitionCompleted = unchecked((int)506),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMIndividualizationCompleted']/*"/>	
        /// <unmanaged>MEWMDRMIndividualizationCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMIndividualizationCompleted</unmanaged-short>	
        WindowsMediaDRMIndividualizationCompleted = unchecked((int)508),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMIndividualizationProgress']/*"/>	
        /// <unmanaged>MEWMDRMIndividualizationProgress</unmanaged>	
        /// <unmanaged-short>MEWMDRMIndividualizationProgress</unmanaged-short>	
        WindowsMediaDRMIndividualizationProgress = unchecked((int)513),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMProximityCompleted']/*"/>	
        /// <unmanaged>MEWMDRMProximityCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMProximityCompleted</unmanaged-short>	
        WindowsMediaDRMProximityCompleted = unchecked((int)514),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMLicenseStoreCleaned']/*"/>	
        /// <unmanaged>MEWMDRMLicenseStoreCleaned</unmanaged>	
        /// <unmanaged-short>MEWMDRMLicenseStoreCleaned</unmanaged-short>	
        WindowsMediaDRMLicenseStoreCleaned = unchecked((int)515),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMRevocationDownloadCompleted']/*"/>	
        /// <unmanaged>MEWMDRMRevocationDownloadCompleted</unmanaged>	
        /// <unmanaged-short>MEWMDRMRevocationDownloadCompleted</unmanaged-short>	
        WindowsMediaDRMRevocationDownloadCompleted = unchecked((int)516),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEWMDRMV1Anchor']/*"/>	
        /// <unmanaged>MEWMDRMV1Anchor</unmanaged>	
        /// <unmanaged-short>MEWMDRMV1Anchor</unmanaged-short>	
        WindowsMediaDRMV1Anchor = unchecked((int)516),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformUnknown']/*"/>	
        /// <unmanaged>METransformUnknown</unmanaged>	
        /// <unmanaged-short>METransformUnknown</unmanaged-short>	
        TransformUnknown = unchecked((int)600),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformNeedInput']/*"/>	
        /// <unmanaged>METransformNeedInput</unmanaged>	
        /// <unmanaged-short>METransformNeedInput</unmanaged-short>	
        TransformNeedInput = unchecked((int)601),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformHaveOutput']/*"/>	
        /// <unmanaged>METransformHaveOutput</unmanaged>	
        /// <unmanaged-short>METransformHaveOutput</unmanaged-short>	
        TransformHaveOutput = unchecked((int)602),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformDrainComplete']/*"/>	
        /// <unmanaged>METransformDrainComplete</unmanaged>	
        /// <unmanaged-short>METransformDrainComplete</unmanaged-short>	
        TransformDrainComplete = unchecked((int)603),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformMarker']/*"/>	
        /// <unmanaged>METransformMarker</unmanaged>	
        /// <unmanaged-short>METransformMarker</unmanaged-short>	
        TransformMarker = unchecked((int)604),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='METransformInputStreamStateChanged']/*"/>	
        /// <unmanaged>METransformInputStreamStateChanged</unmanaged>	
        /// <unmanaged-short>METransformInputStreamStateChanged</unmanaged-short>	
        TransformInputStreamStateChanged = unchecked((int)605),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEByteStreamCharacteristicsChanged']/*"/>	
        /// <unmanaged>MEByteStreamCharacteristicsChanged</unmanaged>	
        /// <unmanaged-short>MEByteStreamCharacteristicsChanged</unmanaged-short>	
        ByteStreamCharacteristicsChanged = unchecked((int)700),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEVideoCaptureDeviceRemoved']/*"/>	
        /// <unmanaged>MEVideoCaptureDeviceRemoved</unmanaged>	
        /// <unmanaged-short>MEVideoCaptureDeviceRemoved</unmanaged-short>	
        VideoCaptureDeviceRemoved = unchecked((int)800),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEVideoCaptureDevicePreempted']/*"/>	
        /// <unmanaged>MEVideoCaptureDevicePreempted</unmanaged>	
        /// <unmanaged-short>MEVideoCaptureDevicePreempted</unmanaged-short>	
        VideoCaptureDevicePreempted = unchecked((int)801),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEStreamSinkFormatInvalidated']/*"/>	
        /// <unmanaged>MEStreamSinkFormatInvalidated</unmanaged>	
        /// <unmanaged-short>MEStreamSinkFormatInvalidated</unmanaged-short>	
        StreamSinkFormatInvalidated = unchecked((int)802),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEEncodingParameters']/*"/>	
        /// <unmanaged>MEEncodingParameters</unmanaged>	
        /// <unmanaged-short>MEEncodingParameters</unmanaged-short>	
        EncodingParameters = unchecked((int)803),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEContentProtectionMetadata']/*"/>	
        /// <unmanaged>MEContentProtectionMetadata</unmanaged>	
        /// <unmanaged-short>MEContentProtectionMetadata</unmanaged-short>	
        ContentProtectionMetadata = unchecked((int)900),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEDeviceThermalStateChanged']/*"/>	
        /// <unmanaged>MEDeviceThermalStateChanged</unmanaged>	
        /// <unmanaged-short>MEDeviceThermalStateChanged</unmanaged-short>	
        DeviceThermalStateChanged = unchecked((int)950),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MEReservedMax']/*"/>	
        /// <unmanaged>MEReservedMax</unmanaged>	
        /// <unmanaged-short>MEReservedMax</unmanaged-short>	
        ReservedMax = unchecked((int)10000),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_MESSAGETYPE']/*"/>	
    /// <unmanaged>MF_MEDIAKEYSESSION_MESSAGETYPE</unmanaged>	
    /// <unmanaged-short>MF_MEDIAKEYSESSION_MESSAGETYPE</unmanaged-short>	
    public enum MediaKeysessionMessagetype : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST</unmanaged-short>	
        LicenseRequest = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL</unmanaged-short>	
        LicenseRenewal = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE</unmanaged-short>	
        LicenseRelease = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST</unmanaged-short>	
        IndividualizationRequest = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_TYPE']/*"/>	
    /// <unmanaged>MF_MEDIAKEYSESSION_TYPE</unmanaged>	
    /// <unmanaged-short>MF_MEDIAKEYSESSION_TYPE</unmanaged-short>	
    public enum MediaKeysessionType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_TYPE_TEMPORARY']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_TYPE_TEMPORARY</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_TYPE_TEMPORARY</unmanaged-short>	
        Temporary = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE</unmanaged-short>	
        PersistentLicense = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE']/*"/>	
        /// <unmanaged>MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE</unmanaged-short>	
        PersistentReleaseMessage = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYS_REQUIREMENT']/*"/>	
    /// <unmanaged>MF_MEDIAKEYS_REQUIREMENT</unmanaged>	
    /// <unmanaged-short>MF_MEDIAKEYS_REQUIREMENT</unmanaged-short>	
    public enum MediaKeysRequirement : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYS_REQUIREMENT_REQUIRED']/*"/>	
        /// <unmanaged>MF_MEDIAKEYS_REQUIREMENT_REQUIRED</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYS_REQUIREMENT_REQUIRED</unmanaged-short>	
        Required = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYS_REQUIREMENT_OPTIONAL']/*"/>	
        /// <unmanaged>MF_MEDIAKEYS_REQUIREMENT_OPTIONAL</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYS_REQUIREMENT_OPTIONAL</unmanaged-short>	
        Optional = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED']/*"/>	
        /// <unmanaged>MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED</unmanaged-short>	
        NotAllowEd = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS']/*"/>	
    /// <unmanaged>MF_MEDIAKEY_STATUS</unmanaged>	
    /// <unmanaged-short>MF_MEDIAKEY_STATUS</unmanaged-short>	
    public enum MediaKeyStatusState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_USABLE']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_USABLE</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_USABLE</unmanaged-short>	
        Usable = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_EXPIRED']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_EXPIRED</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_EXPIRED</unmanaged-short>	
        Expired = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED</unmanaged-short>	
        OutputDownscaled = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED</unmanaged-short>	
        OutputNotAllowEd = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_STATUS_PENDING']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_STATUS_PENDING</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_STATUS_PENDING</unmanaged-short>	
        StatusPending = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIAKEY_STATUS_INTERNAL_ERROR']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS_INTERNAL_ERROR</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS_INTERNAL_ERROR</unmanaged-short>	
        InternalError = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Defines the characteristics of a media source. These flags are retrieved by the <strong><see cref="SharpDX.MediaFoundation.MediaSource.GetCharacteristics"/></strong> method.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To skip forward or backward in a playlist, call <strong><see cref="SharpDX.MediaFoundation.MediaSource.Start"/></strong> or <strong><see cref="SharpDX.MediaFoundation.MediaSession.Start"/></strong> with the <strong>MF_TIME_FORMAT_ENTRY_RELATIVE</strong> time-format <see cref="System.Guid"/>. This capability applies only when the <strong><see cref="SharpDX.MediaFoundation.MediaSourceCharacteristics.HasMultiplePresentations"/></strong> flag is present.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_CHARACTERISTICS']/*"/>	
    /// <msdn-id>ms694277</msdn-id>	
    /// <unmanaged>MFMEDIASOURCE_CHARACTERISTICS</unmanaged>	
    /// <unmanaged-short>MFMEDIASOURCE_CHARACTERISTICS</unmanaged-short>	
    public enum MediaSourceCharacteristics : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_IS_LIVE']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_IS_LIVE</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_IS_LIVE</unmanaged-short>	
        IsLive = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_CAN_SEEK']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_CAN_SEEK</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_CAN_SEEK</unmanaged-short>	
        CanSeek = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_CAN_PAUSE']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_CAN_PAUSE</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_CAN_PAUSE</unmanaged-short>	
        CanPause = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_HAS_SLOW_SEEK']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_HAS_SLOW_SEEK</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_HAS_SLOW_SEEK</unmanaged-short>	
        HasSlowSeek = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS</unmanaged-short>	
        HasMultiplePresentations = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_CAN_SKIPFORWARD']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_CAN_SKIPFORWARD</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_CAN_SKIPFORWARD</unmanaged-short>	
        CanSkipforward = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_CAN_SKIPBACKWARD']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_CAN_SKIPBACKWARD</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_CAN_SKIPBACKWARD</unmanaged-short>	
        CanSkipbackward = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMEDIASOURCE_DOES_NOT_USE_NETWORK']/*"/>	
        /// <msdn-id>ms694277</msdn-id>	
        /// <unmanaged>MFMEDIASOURCE_DOES_NOT_USE_NETWORK</unmanaged>	
        /// <unmanaged-short>MFMEDIASOURCE_DOES_NOT_USE_NETWORK</unmanaged-short>	
        DoesNotUseNetwork = unchecked((int)128),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIASOURCE_STATUS_INFO']/*"/>	
    /// <unmanaged>MF_MEDIASOURCE_STATUS_INFO</unmanaged>	
    /// <unmanaged-short>MF_MEDIASOURCE_STATUS_INFO</unmanaged-short>	
    public enum MediaSourceStatusInformation : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED']/*"/>	
        /// <unmanaged>MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED</unmanaged>	
        /// <unmanaged-short>MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED</unmanaged-short>	
        FullySupported = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MEDIASOURCE_STATUS_INFO_UNKNOWN']/*"/>	
        /// <unmanaged>MF_MEDIASOURCE_STATUS_INFO_UNKNOWN</unmanaged>	
        /// <unmanaged-short>MF_MEDIASOURCE_STATUS_INFO_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Specifies options for the <strong><see cref="SharpDX.MediaFoundation.MediaFactory.PCreateMediaPlayer"/></strong> function.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following <strong>typedef</strong> is defined for combining flags from this enumeration.</p><code>typedef UINT32 MFP_CREATION_OPTIONS;</code>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFP_CREATION_OPTIONS']/*"/>	
    /// <msdn-id>dd757934</msdn-id>	
    /// <unmanaged>_MFP_CREATION_OPTIONS</unmanaged>	
    /// <unmanaged-short>_MFP_CREATION_OPTIONS</unmanaged-short>	
    public enum MfpCreationOptions : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_OPTION_NONE']/*"/>	
        /// <msdn-id>dd757934</msdn-id>	
        /// <unmanaged>MFP_OPTION_NONE</unmanaged>	
        /// <unmanaged-short>MFP_OPTION_NONE</unmanaged-short>	
        MfpOptionNone = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_OPTION_FREE_THREADED_CALLBACK']/*"/>	
        /// <msdn-id>dd757934</msdn-id>	
        /// <unmanaged>MFP_OPTION_FREE_THREADED_CALLBACK</unmanaged>	
        /// <unmanaged-short>MFP_OPTION_FREE_THREADED_CALLBACK</unmanaged-short>	
        MfpOptionFreeThreadedCallback = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_OPTION_NO_MMCSS']/*"/>	
        /// <msdn-id>dd757934</msdn-id>	
        /// <unmanaged>MFP_OPTION_NO_MMCSS</unmanaged>	
        /// <unmanaged-short>MFP_OPTION_NO_MMCSS</unmanaged-short>	
        MfpOptionNoMmcss = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION']/*"/>	
        /// <msdn-id>dd757934</msdn-id>	
        /// <unmanaged>MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION</unmanaged>	
        /// <unmanaged-short>MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION</unmanaged-short>	
        MfpOptionNoRemoteDesktopOptimization = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.PAcquireUserCredentialEvent"/></strong> structure.</p><p>Some of these flags, marked [out], convey information back to the MFPlay player object. The application should set or clear these flags as appropriate, before returning from the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> callback method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFP_CREDENTIAL_FLAGS']/*"/>	
    /// <msdn-id>dd757935</msdn-id>	
    /// <unmanaged>_MFP_CREDENTIAL_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFP_CREDENTIAL_FLAGS</unmanaged-short>	
    [Flags]
    public enum MfpCredentialFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_PROMPT']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_PROMPT</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_PROMPT</unmanaged-short>	
        MfpCredentialPrompt = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_SAVE']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_SAVE</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_SAVE</unmanaged-short>	
        MfpCredentialSave = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_DO_NOT_CACHE']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_DO_NOT_CACHE</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_DO_NOT_CACHE</unmanaged-short>	
        MfpCredentialDoNotCache = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_CLEAR_TEXT']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_CLEAR_TEXT</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_CLEAR_TEXT</unmanaged-short>	
        MfpCredentialClearText = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_PROXY']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_PROXY</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_PROXY</unmanaged-short>	
        MfpCredentialProxy = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_CREDENTIAL_LOGGED_ON_USER']/*"/>	
        /// <msdn-id>dd757935</msdn-id>	
        /// <unmanaged>MFP_CREDENTIAL_LOGGED_ON_USER</unmanaged>	
        /// <unmanaged-short>MFP_CREDENTIAL_LOGGED_ON_USER</unmanaged-short>	
        MfpCredentialLoggedOnUser = unchecked((int)32),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Contains flags that describe a media item.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following <strong>typedef</strong> is defined for combining flags from this enumeration.</p><code>typedef UINT32 MFP_MEDIAITEM_CHARACTERISTICS;</code>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFP_MEDIAITEM_CHARACTERISTICS']/*"/>	
    /// <msdn-id>dd757936</msdn-id>	
    /// <unmanaged>_MFP_MEDIAITEM_CHARACTERISTICS</unmanaged>	
    /// <unmanaged-short>_MFP_MEDIAITEM_CHARACTERISTICS</unmanaged-short>	
    public enum MfpMediaItemCharacteristics : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_IS_LIVE']/*"/>	
        /// <msdn-id>dd757936</msdn-id>	
        /// <unmanaged>MFP_MEDIAITEM_IS_LIVE</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAITEM_IS_LIVE</unmanaged-short>	
        MfpMediaItemIsLive = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CAN_SEEK']/*"/>	
        /// <msdn-id>dd757936</msdn-id>	
        /// <unmanaged>MFP_MEDIAITEM_CAN_SEEK</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAITEM_CAN_SEEK</unmanaged-short>	
        MfpMediaItemCanSeek = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CAN_PAUSE']/*"/>	
        /// <msdn-id>dd757936</msdn-id>	
        /// <unmanaged>MFP_MEDIAITEM_CAN_PAUSE</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAITEM_CAN_PAUSE</unmanaged-short>	
        MfpMediaItemCanPause = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_HAS_SLOW_SEEK']/*"/>	
        /// <msdn-id>dd757936</msdn-id>	
        /// <unmanaged>MFP_MEDIAITEM_HAS_SLOW_SEEK</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAITEM_HAS_SLOW_SEEK</unmanaged-short>	
        MfpMediaItemHasSlowSeek = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p> </p><p>Not supported.</p><strong>Note</strong>??Earlier versions of this documentation described the <strong>_MFT_DRAIN_TYPE</strong> enumeration incorrectly. The enumeration is not supported. For more information, see <strong><see cref="SharpDX.MediaFoundation.TMessageType"/></strong>.?	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_DRAIN_TYPE']/*"/>	
    /// <msdn-id>ms700116</msdn-id>	
    /// <unmanaged>_MFT_DRAIN_TYPE</unmanaged>	
    /// <unmanaged-short>_MFT_DRAIN_TYPE</unmanaged-short>	
    public enum MftDrainType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_DRAIN_PRODUCE_TAILS']/*"/>	
        /// <msdn-id>ms700116</msdn-id>	
        /// <unmanaged>MFT_DRAIN_PRODUCE_TAILS</unmanaged>	
        /// <unmanaged-short>MFT_DRAIN_PRODUCE_TAILS</unmanaged-short>	
        MftDrainProduceTails = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_DRAIN_NO_TAILS']/*"/>	
        /// <msdn-id>ms700116</msdn-id>	
        /// <unmanaged>MFT_DRAIN_NO_TAILS</unmanaged>	
        /// <unmanaged-short>MFT_DRAIN_NO_TAILS</unmanaged-short>	
        MftDrainNoTails = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines flags for the <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessInput"/></strong> method. Currently no flags are defined.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_INPUT_DATA_BUFFER_FLAGS']/*"/>	
    /// <msdn-id>ms694836</msdn-id>	
    /// <unmanaged>_MFT_INPUT_DATA_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_INPUT_DATA_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftInputDataBufferFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_DATA_BUFFER_PLACEHOLDER']/*"/>	
        /// <msdn-id>ms694836</msdn-id>	
        /// <unmanaged>MFT_INPUT_DATA_BUFFER_PLACEHOLDER</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_DATA_BUFFER_PLACEHOLDER</unmanaged-short>	
        MftInputDataBufferPlaceholder = unchecked((int)-1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Indicates the status of an input stream on a Media Foundation transform (MFT).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_INPUT_STATUS_FLAGS']/*"/>	
    /// <msdn-id>ms703084</msdn-id>	
    /// <unmanaged>_MFT_INPUT_STATUS_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_INPUT_STATUS_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftInputStatusFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The input stream can receive more data at this time. To deliver more input data, call <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessInput"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STATUS_ACCEPT_DATA']/*"/>	
        /// <msdn-id>ms703084</msdn-id>	
        /// <unmanaged>MFT_INPUT_STATUS_ACCEPT_DATA</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STATUS_ACCEPT_DATA</unmanaged-short>	
        MftInputStatusAcceptData = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes an input stream on a Media Foundation transform (MFT).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Before the client sets the media types on the transform, the only flags guaranteed to be accurate are the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamRemovable"/> and <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamOptional"/> flags. For all other flags, the client should first set the media type on every non-optional stream.</p><p>In the default processing model, an MFT holds a reference count on the sample that it receives in <strong>ProcessInput</strong>. It does not process the sample immediately inside <strong>ProcessInput</strong>. When <strong>ProcessOutput</strong> is called, the MFT produces output data and then discards the input sample. The following variations on this model are defined:</p><ul> <li> <p>If an MFT never holds onto input samples between <strong>ProcessInput</strong> and <strong>ProcessOutput</strong>, it can set the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamDoesNotAddref"/>.</p> </li> <li> <p>If an MFT holds some input samples beyond the next call to <strong>ProcessOutput</strong>, it can set the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamHoldsBuffers"/>.</p> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_INPUT_STREAM_INFO_FLAGS']/*"/>	
    /// <msdn-id>ms703975</msdn-id>	
    /// <unmanaged>_MFT_INPUT_STREAM_INFO_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_INPUT_STREAM_INFO_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftInputStreamInformationFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Each media sample (<strong><see cref="SharpDX.MediaFoundation.Sample"/></strong> interface) of input data must contain complete, unbroken units of data. The definition of a <em>unit of data</em> depends on the media type: For uncompressed video, a video frame; for compressed data, a compressed packet; for uncompressed audio, a single audio frame.</p> <p>For uncompressed audio formats, this flag is always implied. (It is valid to set the flag, but not required.) An uncompressed audio frame should never span more than one media sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_WHOLE_SAMPLES']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_WHOLE_SAMPLES</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_WHOLE_SAMPLES</unmanaged-short>	
        MftInputStreamWholeSamples = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Each media sample that the client provides as input must contain exactly one unit of data, as defined for the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamWholeSamples"/> flag.</p> <p>If this flag is present, the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamWholeSamples"/> flag must also be present.</p> <p>An MFT that processes uncompressed audio should not set this flag. The MFT should accept buffers that contain more than a single audio frame, for efficiency.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER</unmanaged-short>	
        MftInputStreamSingleSamplePerBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> All input samples must be the same size. The size is given in the <strong>cbSize</strong> member of the <strong><see cref="SharpDX.MediaFoundation.TInputStreamInformation"/></strong> structure. The MFT must provide this value. During processing, the MFT should verify the size of input samples, and may drop samples with incorrect size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE</unmanaged-short>	
        MftInputStreamFixedSampleSize = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The MFT might hold one or more input samples after <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong> is called. If this flag is present, the <strong>hnsMaxLatency</strong> member of the <strong><see cref="SharpDX.MediaFoundation.TInputStreamInformation"/></strong> structure gives the maximum latency, and the <strong>cbMaxLookahead</strong> member gives the maximum number of bytes of lookahead.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_HOLDS_BUFFERS']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_HOLDS_BUFFERS</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_HOLDS_BUFFERS</unmanaged-short>	
        MftInputStreamHoldsBuffers = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>The MFT does not hold input samples after the <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessInput"/></strong> method returns. It releases the sample before the <strong>ProcessInput</strong> method returns.</p> <p>If this flag is absent, the MFT might hold a reference count on the samples that are passed to the <strong>ProcessInput</strong> method. The client must not re-use or delete the buffer memory until the MFT releases the sample's <strong><see cref="SharpDX.MediaFoundation.Sample"/></strong> reference.</p> <p>If this flag is absent, it does not guarantee that the MFT holds a reference count on the input samples. It is valid for an MFT to release input samples in <strong>ProcessInput</strong> even if the MFT does not set this flag. However, setting this flag might enable to client to optimize how it re-uses buffers.</p> <p>An MFT should not set this flag if it ever holds onto an input sample after returning from <strong>ProcessInput</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_DOES_NOT_ADDREF']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_DOES_NOT_ADDREF</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_DOES_NOT_ADDREF</unmanaged-short>	
        MftInputStreamDoesNotAddref = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p>This input stream can be removed by calling <strong><see cref="SharpDX.MediaFoundation.Transform.DeleteInputStream"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_REMOVABLE']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_REMOVABLE</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_REMOVABLE</unmanaged-short>	
        MftInputStreamRemovable = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p>This input stream is optional. The transform can produce output without receiving input from this stream. The caller can deselect the stream by not setting a media type or by setting a <strong><c>null</c></strong> media type. It is possible for every input stream on a transform to be optional, but at least one input must be selected in order to produce output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_OPTIONAL']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_OPTIONAL</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_OPTIONAL</unmanaged-short>	
        MftInputStreamOptional = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p>The MFT can perform in-place processing. In this mode, the MFT directly modifies the input buffer. When the client calls <strong>ProcessOutput</strong>, the same sample that was delivered to this stream is returned in the output stream that has a matching stream identifier. This flag implies that the MFT holds onto the input buffer, so this flag cannot combined with the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamDoesNotAddref"/> flag.</p> <p>If this flag is present, the MFT must set the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/> or <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamCanProvideSamples"/> flag for the output stream that corresponds to this input stream. (See <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_PROCESSES_IN_PLACE']/*"/>	
        /// <msdn-id>ms703975</msdn-id>	
        /// <unmanaged>MFT_INPUT_STREAM_PROCESSES_IN_PLACE</unmanaged>	
        /// <unmanaged-short>MFT_INPUT_STREAM_PROCESSES_IN_PLACE</unmanaged-short>	
        MftInputStreamProcessesInPlace = unchecked((int)2048),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Defines flags for the <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong> method. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumeration are not bit flags, so they should not be combined with a bitwise <strong>OR</strong>. Also, the caller should test for these flags with the equality operator, not a bitwise <strong>AND</strong>:</p><code>// Correct.	
    /// if (Buffer.dwStatus == <see cref="SharpDX.MediaFoundation.MftOutputDataBufferFlags.MftOutputDataBufferStreamEnd"/>)	
    /// { ...	
    /// } // Incorrect.	
    /// if ((Buffer.dwStatus &amp; <see cref="SharpDX.MediaFoundation.MftOutputDataBufferFlags.MftOutputDataBufferStreamEnd"/>) != 0)	
    /// { ...	
    /// }	
    /// </code>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_OUTPUT_DATA_BUFFER_FLAGS']/*"/>	
    /// <msdn-id>ms702281</msdn-id>	
    /// <unmanaged>_MFT_OUTPUT_DATA_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_OUTPUT_DATA_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftOutputDataBufferFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER_INCOMPLETE']/*"/>	
        /// <msdn-id>ms702281</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_DATA_BUFFER_INCOMPLETE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_DATA_BUFFER_INCOMPLETE</unmanaged-short>	
        MftOutputDataBufferIncomplete = unchecked((int)16777216),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE']/*"/>	
        /// <msdn-id>ms702281</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE</unmanaged-short>	
        MftOutputDataBufferFormatChange = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER_STREAM_END']/*"/>	
        /// <msdn-id>ms702281</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_DATA_BUFFER_STREAM_END</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_DATA_BUFFER_STREAM_END</unmanaged-short>	
        MftOutputDataBufferStreamEnd = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE']/*"/>	
        /// <msdn-id>ms702281</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE</unmanaged-short>	
        MftOutputDataBufferNoSample = unchecked((int)768),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Indicates whether a Media Foundation transform (MFT) can produce output data.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_OUTPUT_STATUS_FLAGS']/*"/>	
    /// <msdn-id>ms701553</msdn-id>	
    /// <unmanaged>_MFT_OUTPUT_STATUS_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_OUTPUT_STATUS_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftOutputStatusFlags : int {	
        
        /// <summary>	
        /// <dd> <p>There is a sample available for at least one output stream. To retrieve the available output samples, call <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STATUS_SAMPLE_READY']/*"/>	
        /// <msdn-id>ms701553</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STATUS_SAMPLE_READY</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STATUS_SAMPLE_READY</unmanaged-short>	
        MftOutputStatusSampleReady = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes an output stream on a Media Foundation transform (MFT).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Before the client sets the media types on the MFT, the only flag guaranteed to be accurate is the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamOptional"/> flag. For all other flags, the client should first set the media type on every non-optional stream.</p><p>The <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamDiscardable"/> and <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamLazyRead"/> flags define different behaviors for how the MFT can discard output data.</p><ul> <li> <p>MFT_OUTPUT_STREAM_DISCARDABLE: The MFT discards output data only if the client calls <strong>ProcessOutput</strong> with the <see cref="SharpDX.MediaFoundation.TransformProcessOutputFlags.MftProcessOutputDiscardWhenNoBuffer"/> flag. The MFT never discards data when the client calls <strong>ProcessInput</strong>.</p> </li> <li> <p>MFT_OUTPUT_STREAM_LAZY_READ: If the client continues to call <strong>ProcessInput</strong> without collecting the output from this stream, the MFT eventually discards the output. If all output streams have the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamLazyRead"/> flag, the MFT never refuses more input data.</p> </li> </ul><p>If neither of these flags is set, the MFT never discards output data.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_OUTPUT_STREAM_INFO_FLAGS']/*"/>	
    /// <msdn-id>ms705618</msdn-id>	
    /// <unmanaged>_MFT_OUTPUT_STREAM_INFO_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_OUTPUT_STREAM_INFO_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftOutputStreamInformationFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Each media sample (<strong><see cref="SharpDX.MediaFoundation.Sample"/></strong> interface) of output data from the MFT contains complete, unbroken units of data. The definition of a <em>unit of data</em> depends on the media type: For uncompressed video, a video frame; for compressed data, a compressed packet; for uncompressed audio, a single audio frame.</p> <p>For uncompressed audio formats, this flag is always implied. (It is valid to set the flag, but not required.) An uncompressed audio frame should never span more than one media sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_WHOLE_SAMPLES']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_WHOLE_SAMPLES</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_WHOLE_SAMPLES</unmanaged-short>	
        MftOutputStreamWholeSamples = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Each output sample contains exactly one unit of data, as defined for the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamWholeSamples"/> flag.</p> <p>If this flag is present, the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamWholeSamples"/> flag must also be present.</p> <p>An MFT that outputs uncompressed audio should not set this flag. For efficiency, it should output more than one audio frame at a time.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER</unmanaged-short>	
        MftOutputStreamSingleSamplePerBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>All output samples are the same size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE</unmanaged-short>	
        MftOutputStreamFixedSampleSize = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The MFT can discard the output data from this output stream, if requested by the client. To discard the output, set the <see cref="SharpDX.MediaFoundation.TransformProcessOutputFlags.MftProcessOutputDiscardWhenNoBuffer"/> flag in the <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_DISCARDABLE']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_DISCARDABLE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_DISCARDABLE</unmanaged-short>	
        MftOutputStreamDiscardable = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>This output stream is optional. The client can deselect the stream by not setting a media type or by setting a <strong><c>null</c></strong> media type. When an optional stream is deselected, it does not produce any output data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_OPTIONAL']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_OPTIONAL</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_OPTIONAL</unmanaged-short>	
        MftOutputStreamOptional = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>The MFT provides the output samples for this stream, either by allocating them internally or by operating directly on the input samples. The MFT cannot use output samples provided by the client for this stream.</p> <p>If this flag is not set, the MFT must set <strong>cbSize</strong> to a nonzero value in the <strong><see cref="SharpDX.MediaFoundation.TOutputStreamInformation"/></strong> structure, so that the client can allocate the correct buffer size. For more information, see <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong>. This flag cannot be combined with the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamCanProvideSamples"/> flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_PROVIDES_SAMPLES']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES</unmanaged-short>	
        MftOutputStreamProvidesSamples = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p>The MFT can either provide output samples for this stream or it can use samples that the client allocates. This flag cannot be combined with the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/> flag.</p> <p>If the MFT does not set this flag or the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/> flag, the client must allocate the samples for this output stream. The MFT will not provide its own samples.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES</unmanaged-short>	
        MftOutputStreamCanProvideSamples = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p>The MFT does not require the client to process the output for this stream. If the client continues to send input data without getting the output from this stream, the MFT simply discards the previous input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_LAZY_READ']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_LAZY_READ</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_LAZY_READ</unmanaged-short>	
        MftOutputStreamLazyRead = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p>The MFT might remove this output stream during streaming. This flag typically applies to demultiplexers, where the input data contains multiple streams that can start and stop during streaming. For more information, see <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_REMOVABLE']/*"/>	
        /// <msdn-id>ms705618</msdn-id>	
        /// <unmanaged>MFT_OUTPUT_STREAM_REMOVABLE</unmanaged>	
        /// <unmanaged-short>MFT_OUTPUT_STREAM_REMOVABLE</unmanaged-short>	
        MftOutputStreamRemovable = unchecked((int)2048),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines flags for the setting or testing the media type on a Media Foundation transform (MFT).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_SET_TYPE_FLAGS']/*"/>	
    /// <msdn-id>ms704051</msdn-id>	
    /// <unmanaged>_MFT_SET_TYPE_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_SET_TYPE_FLAGS</unmanaged-short>	
    [Flags]
    public enum MftSetTypeFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Test the proposed media type, but do not set it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_SET_TYPE_TEST_ONLY']/*"/>	
        /// <msdn-id>ms704051</msdn-id>	
        /// <unmanaged>MFT_SET_TYPE_TEST_ONLY</unmanaged>	
        /// <unmanaged-short>MFT_SET_TYPE_TEST_ONLY</unmanaged-short>	
        MftSetTypeTestOnly = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfreadwrite_0000_0001_0002']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfreadwrite_0000_0001_0002</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfreadwrite_0000_0001_0002</unmanaged-short>	
    public enum MidlMidlItfMfreadwrite000000010002 : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_CURRENT_TYPE_INDEX']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_CURRENT_TYPE_INDEX</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_CURRENT_TYPE_INDEX</unmanaged-short>	
        CurrentTypeIndex = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_APPEND_MODE']/*"/>	
    /// <unmanaged>MF_MSE_APPEND_MODE</unmanaged>	
    /// <unmanaged-short>MF_MSE_APPEND_MODE</unmanaged-short>	
    public enum MultisampledEAppendMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_APPEND_MODE_SEGMENTS']/*"/>	
        /// <unmanaged>MF_MSE_APPEND_MODE_SEGMENTS</unmanaged>	
        /// <unmanaged-short>MF_MSE_APPEND_MODE_SEGMENTS</unmanaged-short>	
        Segments = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_APPEND_MODE_SEQUENCE']/*"/>	
        /// <unmanaged>MF_MSE_APPEND_MODE_SEQUENCE</unmanaged>	
        /// <unmanaged-short>MF_MSE_APPEND_MODE_SEQUENCE</unmanaged-short>	
        Sequence = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Defines the different error states of the Media Source Extension.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_ERROR']/*"/>	
    /// <msdn-id>dn302195</msdn-id>	
    /// <unmanaged>MF_MSE_ERROR</unmanaged>	
    /// <unmanaged-short>MF_MSE_ERROR</unmanaged-short>	
    public enum MultisampledEError : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies no error.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_ERROR_NOERROR']/*"/>	
        /// <msdn-id>dn302195</msdn-id>	
        /// <unmanaged>MF_MSE_ERROR_NOERROR</unmanaged>	
        /// <unmanaged-short>MF_MSE_ERROR_NOERROR</unmanaged-short>	
        Noerror = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies an error with the network.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_ERROR_NETWORK']/*"/>	
        /// <msdn-id>dn302195</msdn-id>	
        /// <unmanaged>MF_MSE_ERROR_NETWORK</unmanaged>	
        /// <unmanaged-short>MF_MSE_ERROR_NETWORK</unmanaged-short>	
        Network = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies an error with decoding.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_ERROR_DECODE']/*"/>	
        /// <msdn-id>dn302195</msdn-id>	
        /// <unmanaged>MF_MSE_ERROR_DECODE</unmanaged>	
        /// <unmanaged-short>MF_MSE_ERROR_DECODE</unmanaged-short>	
        Decode = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Specifies an unknown error.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_ERROR_UNKNOWN_ERROR']/*"/>	
        /// <msdn-id>dn302195</msdn-id>	
        /// <unmanaged>MF_MSE_ERROR_UNKNOWN_ERROR</unmanaged>	
        /// <unmanaged-short>MF_MSE_ERROR_UNKNOWN_ERROR</unmanaged-short>	
        UnknownError = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_OPUS_SUPPORT_TYPE']/*"/>	
    /// <unmanaged>MF_MSE_OPUS_SUPPORT_TYPE</unmanaged>	
    /// <unmanaged-short>MF_MSE_OPUS_SUPPORT_TYPE</unmanaged-short>	
    public enum MultisampledEOperationUsSupportType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_OPUS_SUPPORT_ON']/*"/>	
        /// <unmanaged>MF_MSE_OPUS_SUPPORT_ON</unmanaged>	
        /// <unmanaged-short>MF_MSE_OPUS_SUPPORT_ON</unmanaged-short>	
        On = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_OPUS_SUPPORT_OFF']/*"/>	
        /// <unmanaged>MF_MSE_OPUS_SUPPORT_OFF</unmanaged>	
        /// <unmanaged-short>MF_MSE_OPUS_SUPPORT_OFF</unmanaged-short>	
        Off = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Defines the different ready states of the Media Source Extension.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_READY']/*"/>	
    /// <msdn-id>dn302196</msdn-id>	
    /// <unmanaged>MF_MSE_READY</unmanaged>	
    /// <unmanaged-short>MF_MSE_READY</unmanaged-short>	
    public enum MultisampledEReady : int {	
        
        /// <summary>	
        /// <dd> <p>The media source is closed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_READY_CLOSED']/*"/>	
        /// <msdn-id>dn302196</msdn-id>	
        /// <unmanaged>MF_MSE_READY_CLOSED</unmanaged>	
        /// <unmanaged-short>MF_MSE_READY_CLOSED</unmanaged-short>	
        Closed = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The media source is open.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_READY_OPEN']/*"/>	
        /// <msdn-id>dn302196</msdn-id>	
        /// <unmanaged>MF_MSE_READY_OPEN</unmanaged>	
        /// <unmanaged-short>MF_MSE_READY_OPEN</unmanaged-short>	
        Open = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The media source is ended.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_READY_ENDED']/*"/>	
        /// <msdn-id>dn302196</msdn-id>	
        /// <unmanaged>MF_MSE_READY_ENDED</unmanaged>	
        /// <unmanaged-short>MF_MSE_READY_ENDED</unmanaged-short>	
        Ended = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_VP9_SUPPORT_TYPE']/*"/>	
    /// <unmanaged>MF_MSE_VP9_SUPPORT_TYPE</unmanaged>	
    /// <unmanaged-short>MF_MSE_VP9_SUPPORT_TYPE</unmanaged-short>	
    public enum MultisampledEVp9SupportType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_VP9_SUPPORT_DEFAULT']/*"/>	
        /// <unmanaged>MF_MSE_VP9_SUPPORT_DEFAULT</unmanaged>	
        /// <unmanaged-short>MF_MSE_VP9_SUPPORT_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_VP9_SUPPORT_ON']/*"/>	
        /// <unmanaged>MF_MSE_VP9_SUPPORT_ON</unmanaged>	
        /// <unmanaged-short>MF_MSE_VP9_SUPPORT_ON</unmanaged-short>	
        On = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_MSE_VP9_SUPPORT_OFF']/*"/>	
        /// <unmanaged>MF_MSE_VP9_SUPPORT_OFF</unmanaged>	
        /// <unmanaged-short>MF_MSE_VP9_SUPPORT_OFF</unmanaged-short>	
        Off = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how the user's credentials will be used.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetAuthenticationFlags']/*"/>	
    /// <msdn-id>ms697023</msdn-id>	
    /// <unmanaged>MFNetAuthenticationFlags</unmanaged>	
    /// <unmanaged-short>MFNetAuthenticationFlags</unmanaged-short>	
    public enum NetAuthenticationFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The credentials will be used to authenticate with a proxy.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_AUTHENTICATION_PROXY']/*"/>	
        /// <msdn-id>ms697023</msdn-id>	
        /// <unmanaged>MFNET_AUTHENTICATION_PROXY</unmanaged>	
        /// <unmanaged-short>MFNET_AUTHENTICATION_PROXY</unmanaged-short>	
        MfnetAuthenticationProxy = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The credentials will be sent over the network unencrypted.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_AUTHENTICATION_CLEAR_TEXT']/*"/>	
        /// <msdn-id>ms697023</msdn-id>	
        /// <unmanaged>MFNET_AUTHENTICATION_CLEAR_TEXT</unmanaged>	
        /// <unmanaged-short>MFNET_AUTHENTICATION_CLEAR_TEXT</unmanaged-short>	
        MfnetAuthenticationClearText = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The credentials must be from a user who is currently logged on.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_AUTHENTICATION_LOGGED_ON_USER']/*"/>	
        /// <msdn-id>ms697023</msdn-id>	
        /// <unmanaged>MFNET_AUTHENTICATION_LOGGED_ON_USER</unmanaged>	
        /// <unmanaged-short>MFNET_AUTHENTICATION_LOGGED_ON_USER</unmanaged-short>	
        MfnetAuthenticationLoggedOnUser = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes options for the caching network credentials.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialOptions']/*"/>	
    /// <msdn-id>ms697386</msdn-id>	
    /// <unmanaged>MFNetCredentialOptions</unmanaged>	
    /// <unmanaged-short>MFNetCredentialOptions</unmanaged-short>	
    public enum NetCredentialOptions : int {	
        
        /// <summary>	
        /// <dd> <p>Allow the credential cache object to save  credentials in persistant storage.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_CREDENTIAL_SAVE']/*"/>	
        /// <msdn-id>ms697386</msdn-id>	
        /// <unmanaged>MFNET_CREDENTIAL_SAVE</unmanaged>	
        /// <unmanaged-short>MFNET_CREDENTIAL_SAVE</unmanaged-short>	
        MfnetCredentialSave = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Do not allow the credential cache object to cache the credentials in memory. This flag cannot be combined with the <see cref="SharpDX.MediaFoundation.NetCredentialOptions.MfnetCredentialSave"/> flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_CREDENTIAL_DONT_CACHE']/*"/>	
        /// <msdn-id>ms697386</msdn-id>	
        /// <unmanaged>MFNET_CREDENTIAL_DONT_CACHE</unmanaged>	
        /// <unmanaged-short>MFNET_CREDENTIAL_DONT_CACHE</unmanaged-short>	
        MfnetCredentialDontCache = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The user allows credentials to be sent over the network in clear text.</p> <p> By default, <strong><see cref="SharpDX.MediaFoundation.NetCredentialCache.GetCredential"/></strong> always returns the <see cref="SharpDX.MediaFoundation.NetCredentialRequirements.RequirePrompt"/> flag when the authentication flags include <see cref="SharpDX.MediaFoundation.NetAuthenticationFlags.MfnetAuthenticationClearText"/>, even if cached credentials are available. If you set the <see cref="SharpDX.MediaFoundation.NetCredentialOptions.MfnetCredentialAllowClearText"/> option, the <strong>GetCredential</strong> method will not return  <see cref="SharpDX.MediaFoundation.NetCredentialRequirements.RequirePrompt"/> for clear text, if cached credentials are available.</p> <p>Do not set this flag without notifying the user that credentials might be sent in clear text.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT']/*"/>	
        /// <msdn-id>ms697386</msdn-id>	
        /// <unmanaged>MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT</unmanaged>	
        /// <unmanaged-short>MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT</unmanaged-short>	
        MfnetCredentialAllowClearText = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> Specifies how the credential manager should obtain user credentials. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The application implements the credential manager, which must expose the <strong><see cref="SharpDX.MediaFoundation.NetCredentialManager"/></strong> interface. If the <strong><see cref="SharpDX.MediaFoundation.NetCredentialRequirements.RequirePrompt"/></strong> flag is set, the credential manager should prompt the user for his or her name and password.</p><p>The credential cache object sets the <strong><see cref="SharpDX.MediaFoundation.NetCredentialRequirements.RequirePrompt"/></strong> flag if the cache does not yet contain valid credentials. It also sets this flag if the credentials will be sent as plain text, unless the credential manager previously set the <strong><see cref="SharpDX.MediaFoundation.NetCredentialOptions.MfnetCredentialAllowClearText"/></strong> option. (See <strong><see cref="SharpDX.MediaFoundation.NetCredentialCache.SetUserOptions"/></strong>.)</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialRequirements']/*"/>	
    /// <msdn-id>ms700813</msdn-id>	
    /// <unmanaged>MFNetCredentialRequirements</unmanaged>	
    /// <unmanaged-short>MFNetCredentialRequirements</unmanaged-short>	
    public enum NetCredentialRequirements : int {	
        
        /// <summary>	
        /// <dd> <p> The credential manager should prompt the user to provide the credentials. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='REQUIRE_PROMPT']/*"/>	
        /// <msdn-id>ms700813</msdn-id>	
        /// <unmanaged>REQUIRE_PROMPT</unmanaged>	
        /// <unmanaged-short>REQUIRE_PROMPT</unmanaged-short>	
        RequirePrompt = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>The credentials are saved to persistent storage. This flag acts as a hint for the application's UI. If the application prompts the user for credentials, the UI can indicate that the credentials have already been saved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='REQUIRE_SAVE_SELECTED']/*"/>	
        /// <msdn-id>ms700813</msdn-id>	
        /// <unmanaged>REQUIRE_SAVE_SELECTED</unmanaged>	
        /// <unmanaged-short>REQUIRE_SAVE_SELECTED</unmanaged-short>	
        RequireSaveSelected = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies how the default proxy locator will specify the connection settings to a proxy server. The application must set these values in the <strong>MFNETSOURCE_PROXYSETTINGS</strong> property.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_PROXYSETTINGS']/*"/>	
    /// <msdn-id>aa372538</msdn-id>	
    /// <unmanaged>MFNET_PROXYSETTINGS</unmanaged>	
    /// <unmanaged-short>MFNET_PROXYSETTINGS</unmanaged-short>	
    public enum NetProxysettings : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_PROXYSETTING_NONE']/*"/>	
        /// <msdn-id>aa372538</msdn-id>	
        /// <unmanaged>MFNET_PROXYSETTING_NONE</unmanaged>	
        /// <unmanaged-short>MFNET_PROXYSETTING_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_PROXYSETTING_MANUAL']/*"/>	
        /// <msdn-id>aa372538</msdn-id>	
        /// <unmanaged>MFNET_PROXYSETTING_MANUAL</unmanaged>	
        /// <unmanaged-short>MFNET_PROXYSETTING_MANUAL</unmanaged-short>	
        Manual = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_PROXYSETTING_AUTO']/*"/>	
        /// <msdn-id>aa372538</msdn-id>	
        /// <unmanaged>MFNET_PROXYSETTING_AUTO</unmanaged>	
        /// <unmanaged-short>MFNET_PROXYSETTING_AUTO</unmanaged-short>	
        Auto = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNET_PROXYSETTING_BROWSER']/*"/>	
        /// <msdn-id>aa372538</msdn-id>	
        /// <unmanaged>MFNET_PROXYSETTING_BROWSER</unmanaged>	
        /// <unmanaged-short>MFNET_PROXYSETTING_BROWSER</unmanaged-short>	
        Browser = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the status of the cache for a media file or entry.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CACHE_STATE']/*"/>	
    /// <msdn-id>ms705647</msdn-id>	
    /// <unmanaged>MFNETSOURCE_CACHE_STATE</unmanaged>	
    /// <unmanaged-short>MFNETSOURCE_CACHE_STATE</unmanaged-short>	
    public enum NetsourceCacheState : int {	
        
        /// <summary>	
        /// <dd> <p>The cache for a file or entry does not exist.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CACHE_UNAVAILABLE']/*"/>	
        /// <msdn-id>ms705647</msdn-id>	
        /// <unmanaged>MFNETSOURCE_CACHE_UNAVAILABLE</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_CACHE_UNAVAILABLE</unmanaged-short>	
        Unavailable = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The cache for a file or entry is growing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CACHE_ACTIVE_WRITING']/*"/>	
        /// <msdn-id>ms705647</msdn-id>	
        /// <unmanaged>MFNETSOURCE_CACHE_ACTIVE_WRITING</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_CACHE_ACTIVE_WRITING</unmanaged-short>	
        ActiveWriting = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The cache for a file or entry is completed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CACHE_ACTIVE_COMPLETE']/*"/>	
        /// <msdn-id>ms705647</msdn-id>	
        /// <unmanaged>MFNETSOURCE_CACHE_ACTIVE_COMPLETE</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_CACHE_ACTIVE_COMPLETE</unmanaged-short>	
        ActiveComplete = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Indicates the type of control protocol that is used in streaming or downloading. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_PROTOCOL_TYPE']/*"/>	
    /// <msdn-id>ms704031</msdn-id>	
    /// <unmanaged>MFNETSOURCE_PROTOCOL_TYPE</unmanaged>	
    /// <unmanaged-short>MFNETSOURCE_PROTOCOL_TYPE</unmanaged-short>	
    public enum NetsourceProtocolType : int {	
        
        /// <summary>	
        /// <dd> <p> The protocol type has not yet been determined. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_UNDEFINED']/*"/>	
        /// <msdn-id>ms704031</msdn-id>	
        /// <unmanaged>MFNETSOURCE_UNDEFINED</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_UNDEFINED</unmanaged-short>	
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The protocol type is HTTP. This includes HTTPv9, WMSP, and HTTP download. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_HTTP']/*"/>	
        /// <msdn-id>ms704031</msdn-id>	
        /// <unmanaged>MFNETSOURCE_HTTP</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_HTTP</unmanaged-short>	
        Http = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> The protocol type is Real Time Streaming Protocol (RTSP). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RTSP']/*"/>	
        /// <msdn-id>ms704031</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RTSP</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RTSP</unmanaged-short>	
        Rtsp = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> The content is read from a file. The file might be local or on a remote share. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_FILE']/*"/>	
        /// <msdn-id>ms704031</msdn-id>	
        /// <unmanaged>MFNETSOURCE_FILE</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_FILE</unmanaged-short>	
        File = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The protocol type is multicast.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_MULTICAST']/*"/>	
        /// <msdn-id>ms704031</msdn-id>	
        /// <unmanaged>MFNETSOURCE_MULTICAST</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_MULTICAST</unmanaged-short>	
        Multicast = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Defines statistics collected by the network source. The values in this enumeration define property identifiers (PIDs) for the <strong>MFNETSOURCE_STATISTICS</strong> property.</p><p>To retrieve statistics from the network source, call <strong><see cref="SharpDX.MediaFoundation.ServiceProvider.GetService"/></strong> with the service identifier <strong><see cref="SharpDX.MediaFoundation.MediaServiceKeys.NetworkSourceStatistics"/></strong> and the interface identifier IID_IPropertyStore. The retrieved reference is an <strong><see cref="SharpDX.ComObject"/></strong> reference. To get the value of a network statistic, construct a <strong>PROPERTYKEY</strong> with <strong>fmtid</strong> equal to <strong>MFNETSOURCE_STATISTICS</strong> and <strong>pid</strong> equal to a value from this enumeration. Then call <strong>IPropertyStore::GetValue</strong> with the property key to retrieve the value of the statistic as a <strong><see cref="SharpDX.Win32.Variant"/></strong>. </p><p>In the descriptions that follow, the data type and value-type tag for the <strong><see cref="SharpDX.Win32.Variant"/></strong> are listed in parentheses.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_STATISTICS_IDS']/*"/>	
    /// <msdn-id>ms697019</msdn-id>	
    /// <unmanaged>MFNETSOURCE_STATISTICS_IDS</unmanaged>	
    /// <unmanaged-short>MFNETSOURCE_STATISTICS_IDS</unmanaged-short>	
    public enum NetsourceStatisticsIds : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECVPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECVPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECVPACKETS_ID</unmanaged-short>	
        RecvpacketsId = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_LOSTPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_LOSTPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_LOSTPACKETS_ID</unmanaged-short>	
        LostpacketsId = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RESENDSREQUESTED_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RESENDSREQUESTED_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RESENDSREQUESTED_ID</unmanaged-short>	
        ResendsrequestedId = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RESENDSRECEIVED_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RESENDSRECEIVED_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RESENDSRECEIVED_ID</unmanaged-short>	
        ResendsreceivedId = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECOVEREDBYECCPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECOVEREDBYECCPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECOVEREDBYECCPACKETS_ID</unmanaged-short>	
        RecoveredbyeccpacketsId = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID</unmanaged-short>	
        RecoveredbyrtxpacketsId = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_OUTPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_OUTPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_OUTPACKETS_ID</unmanaged-short>	
        OutpacketsId = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECVRATE_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECVRATE_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECVRATE_ID</unmanaged-short>	
        RecvrateId = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_AVGBANDWIDTHBPS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_AVGBANDWIDTHBPS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_AVGBANDWIDTHBPS_ID</unmanaged-short>	
        AvgbandwidthbpsId = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_BYTESRECEIVED_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_BYTESRECEIVED_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_BYTESRECEIVED_ID</unmanaged-short>	
        BytesReceivedId = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_PROTOCOL_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_PROTOCOL_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_PROTOCOL_ID</unmanaged-short>	
        ProtocolId = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_TRANSPORT_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_TRANSPORT_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_TRANSPORT_ID</unmanaged-short>	
        TransportId = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CACHE_STATE_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_CACHE_STATE_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_CACHE_STATE_ID</unmanaged-short>	
        CacheStateId = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_LINKBANDWIDTH_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_LINKBANDWIDTH_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_LINKBANDWIDTH_ID</unmanaged-short>	
        LinkbandwidthId = unchecked((int)13),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_CONTENTBITRATE_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_CONTENTBITRATE_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_CONTENTBITRATE_ID</unmanaged-short>	
        ContentbitrateId = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_SPEEDFACTOR_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_SPEEDFACTOR_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_SPEEDFACTOR_ID</unmanaged-short>	
        SpeedfactorId = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_BUFFERSIZE_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_BUFFERSIZE_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_BUFFERSIZE_ID</unmanaged-short>	
        BufferSizeId = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_BUFFERPROGRESS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_BUFFERPROGRESS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_BUFFERPROGRESS_ID</unmanaged-short>	
        BufferProgressId = unchecked((int)17),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_LASTBWSWITCHTS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_LASTBWSWITCHTS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_LASTBWSWITCHTS_ID</unmanaged-short>	
        LastBwswitchtsId = unchecked((int)18),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_SEEKRANGESTART_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_SEEKRANGESTART_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_SEEKRANGESTART_ID</unmanaged-short>	
        SeekrangestartId = unchecked((int)19),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_SEEKRANGEEND_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_SEEKRANGEEND_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_SEEKRANGEEND_ID</unmanaged-short>	
        SeekrangeendId = unchecked((int)20),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_BUFFERINGCOUNT_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_BUFFERINGCOUNT_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_BUFFERINGCOUNT_ID</unmanaged-short>	
        BufferingCountId = unchecked((int)21),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID</unmanaged-short>	
        IncorrectlysignedpacketsId = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_SIGNEDSESSION_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_SIGNEDSESSION_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_SIGNEDSESSION_ID</unmanaged-short>	
        SignedsessionId = unchecked((int)23),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_MAXBITRATE_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_MAXBITRATE_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_MAXBITRATE_ID</unmanaged-short>	
        MaximumBitRateId = unchecked((int)24),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECEPTION_QUALITY_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECEPTION_QUALITY_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECEPTION_QUALITY_ID</unmanaged-short>	
        ReceptionQualityId = unchecked((int)25),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_RECOVEREDPACKETS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_RECOVEREDPACKETS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_RECOVEREDPACKETS_ID</unmanaged-short>	
        RecoveredpacketsId = unchecked((int)26),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_VBR_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_VBR_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_VBR_ID</unmanaged-short>	
        VariableBitRateId = unchecked((int)27),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_DOWNLOADPROGRESS_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_DOWNLOADPROGRESS_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_DOWNLOADPROGRESS_ID</unmanaged-short>	
        DownloadProgressId = unchecked((int)28),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID']/*"/>	
        /// <msdn-id>ms697019</msdn-id>	
        /// <unmanaged>MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID</unmanaged-short>	
        UnpredefinedprotocolnameId = unchecked((int)29),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes the type of transport used in streaming or downloading data (TCP or UDP).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_TRANSPORT_TYPE']/*"/>	
    /// <msdn-id>ms702233</msdn-id>	
    /// <unmanaged>MFNETSOURCE_TRANSPORT_TYPE</unmanaged>	
    /// <unmanaged-short>MFNETSOURCE_TRANSPORT_TYPE</unmanaged-short>	
    public enum NetsourceTransportType : int {	
        
        /// <summary>	
        /// <dd> <p>The data transport type is UDP.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_UDP']/*"/>	
        /// <msdn-id>ms702233</msdn-id>	
        /// <unmanaged>MFNETSOURCE_UDP</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_UDP</unmanaged-short>	
        Udp = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The data transport type is TCP.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNETSOURCE_TCP']/*"/>	
        /// <msdn-id>ms702233</msdn-id>	
        /// <unmanaged>MFNETSOURCE_TCP</unmanaged>	
        /// <unmanaged-short>MFNETSOURCE_TCP</unmanaged-short>	
        Tcp = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies whether color data includes headroom and toeroom. Headroom allows for values beyond 1.0 white ("whiter than white"), and toeroom allows for values below reference 0.0 black ("blacker than black"). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoNominalRange"/></strong> attribute. </p><p> For more information about these values, see the remarks for the <strong>DXVA2_NominalRange</strong> enumeration, which is the DirectX Video Acceleration (DXVA) equivalent of this enumeration. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange']/*"/>	
    /// <msdn-id>ms705659</msdn-id>	
    /// <unmanaged>MFNominalRange</unmanaged>	
    /// <unmanaged-short>MFNominalRange</unmanaged-short>	
    public enum NominalRange : int {	
        
        /// <summary>	
        /// <dd> <p> Unknown nominal range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_Unknown']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_Unknown</unmanaged>	
        /// <unmanaged-short>MFNominalRange_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Equivalent to <see cref="SharpDX.MediaFoundation.NominalRange.Range0_255"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_Normal']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_Normal</unmanaged>	
        /// <unmanaged-short>MFNominalRange_Normal</unmanaged-short>	
        Normal = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Equivalent to <see cref="SharpDX.MediaFoundation.NominalRange.Range16_235"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_Wide']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_Wide</unmanaged>	
        /// <unmanaged-short>MFNominalRange_Wide</unmanaged-short>	
        Wide = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> The normalized range [0...1] maps to [0...255] for 8-bit samples or [0...1023] for 10-bit samples. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_0_255']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_0_255</unmanaged>	
        /// <unmanaged-short>MFNominalRange_0_255</unmanaged-short>	
        Range0_255 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> The normalized range [0...1] maps to [16...235] for 8-bit samples or [64...940] for 10-bit samples. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_16_235']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_16_235</unmanaged>	
        /// <unmanaged-short>MFNominalRange_16_235</unmanaged-short>	
        Range16_235 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> The normalized range [0..1] maps to [48...208] for 8-bit samples or [64...940] for 10-bit samples. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_48_208']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_48_208</unmanaged>	
        /// <unmanaged-short>MFNominalRange_48_208</unmanaged-short>	
        Range48_208 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The normalized range [0..1] maps to [64...127] for 8-bit samples or [256...508] for 10-bit samples. This range is used in the xRGB color space.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_64_127']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_64_127</unmanaged>	
        /// <unmanaged-short>MFNominalRange_64_127</unmanaged-short>	
        Range64_127 = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_Last']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_Last</unmanaged>	
        /// <unmanaged-short>MFNominalRange_Last</unmanaged-short>	
        Last = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNominalRange_ForceDWORD']/*"/>	
        /// <msdn-id>ms705659</msdn-id>	
        /// <unmanaged>MFNominalRange_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFNominalRange_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the object types that are created by the source resolver.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OBJECT_TYPE']/*"/>	
    /// <msdn-id>ms704771</msdn-id>	
    /// <unmanaged>MF_OBJECT_TYPE</unmanaged>	
    /// <unmanaged-short>MF_OBJECT_TYPE</unmanaged-short>	
    public enum ObjectType : int {	
        
        /// <summary>	
        /// <dd> <p>Media source. You can query the object for the <strong><see cref="SharpDX.MediaFoundation.MediaSource"/></strong> interface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OBJECT_MEDIASOURCE']/*"/>	
        /// <msdn-id>ms704771</msdn-id>	
        /// <unmanaged>MF_OBJECT_MEDIASOURCE</unmanaged>	
        /// <unmanaged-short>MF_OBJECT_MEDIASOURCE</unmanaged-short>	
        MediaSource = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Byte stream. You can query the object for the <strong><see cref="SharpDX.MediaFoundation.IByteStream"/></strong> interface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OBJECT_BYTESTREAM']/*"/>	
        /// <msdn-id>ms704771</msdn-id>	
        /// <unmanaged>MF_OBJECT_BYTESTREAM</unmanaged>	
        /// <unmanaged-short>MF_OBJECT_BYTESTREAM</unmanaged-short>	
        ByteStream = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Invalid type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OBJECT_INVALID']/*"/>	
        /// <msdn-id>ms704771</msdn-id>	
        /// <unmanaged>MF_OBJECT_INVALID</unmanaged>	
        /// <unmanaged-short>MF_OBJECT_INVALID</unmanaged-short>	
        Invalid = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines protection levels for <strong>MFPROTECTION_ACP</strong>.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_PROTECTION_LEVEL']/*"/>	
    /// <msdn-id>jj128346</msdn-id>	
    /// <unmanaged>MF_OPM_ACP_PROTECTION_LEVEL</unmanaged>	
    /// <unmanaged-short>MF_OPM_ACP_PROTECTION_LEVEL</unmanaged-short>	
    public enum OpmAcpProtectionLevel : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies ACP is disabled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_OFF']/*"/>	
        /// <msdn-id>jj128346</msdn-id>	
        /// <unmanaged>MF_OPM_ACP_OFF</unmanaged>	
        /// <unmanaged-short>MF_OPM_ACP_OFF</unmanaged-short>	
        Off = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies ACP is level one.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_LEVEL_ONE']/*"/>	
        /// <msdn-id>jj128346</msdn-id>	
        /// <unmanaged>MF_OPM_ACP_LEVEL_ONE</unmanaged>	
        /// <unmanaged-short>MF_OPM_ACP_LEVEL_ONE</unmanaged-short>	
        LevelOne = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies ACP is level two.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_LEVEL_TWO']/*"/>	
        /// <msdn-id>jj128346</msdn-id>	
        /// <unmanaged>MF_OPM_ACP_LEVEL_TWO</unmanaged>	
        /// <unmanaged-short>MF_OPM_ACP_LEVEL_TWO</unmanaged-short>	
        LevelTwo = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Specifies ACP is level three.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_LEVEL_THREE']/*"/>	
        /// <msdn-id>jj128346</msdn-id>	
        /// <unmanaged>MF_OPM_ACP_LEVEL_THREE</unmanaged>	
        /// <unmanaged-short>MF_OPM_ACP_LEVEL_THREE</unmanaged-short>	
        LevelThree = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_ACP_FORCE_ULONG']/*"/>	
        /// <msdn-id>jj128346</msdn-id>	
        /// <unmanaged>MF_OPM_ACP_FORCE_ULONG</unmanaged>	
        /// <unmanaged-short>MF_OPM_ACP_FORCE_ULONG</unmanaged-short>	
        ForceUlong = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Defines protection levels for <strong>MFPROTECTION_CGMSA</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These flags are equivalent to the OPM_CGMSA_Protection_Level enumeration constants used in the Output Protection Protocol (OPM). </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_PROTECTION_LEVEL']/*"/>	
    /// <msdn-id>jj128347</msdn-id>	
    /// <unmanaged>MF_OPM_CGMSA_PROTECTION_LEVEL</unmanaged>	
    /// <unmanaged-short>MF_OPM_CGMSA_PROTECTION_LEVEL</unmanaged-short>	
    public enum OpmCgmsaProtectionLevel : int {	
        
        /// <summary>	
        /// <dd> <p>CGMS-A is disabled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_OFF']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_OFF</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_OFF</unmanaged-short>	
        Off = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The protection level is Copy Freely.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_COPY_FREELY']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_COPY_FREELY</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_COPY_FREELY</unmanaged-short>	
        CopyFreely = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The protection level is Copy No More.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_COPY_NO_MORE']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_COPY_NO_MORE</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_COPY_NO_MORE</unmanaged-short>	
        CopyNoMore = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The protection level is Copy One Generation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_COPY_ONE_GENERATION']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_COPY_ONE_GENERATION</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_COPY_ONE_GENERATION</unmanaged-short>	
        CopyOneGeneration = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The protection level is Copy Never.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_COPY_NEVER']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_COPY_NEVER</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_COPY_NEVER</unmanaged-short>	
        CopyNever = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Redistribution control (also called the broadcast flag) is required. This flag can be combined with the other flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED']/*"/>	
        /// <msdn-id>jj128347</msdn-id>	
        /// <unmanaged>MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED</unmanaged>	
        /// <unmanaged-short>MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED</unmanaged-short>	
        RedistributionControlRequired = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Defines event types for the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback"/></strong> interface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For each event type, the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> callback receives a reference to a data structure. The first part of the data structure is always an <strong><see cref="SharpDX.MediaFoundation.PEventHeader"/></strong> structure. The following table lists the data structure for each event type.</p><p>In your implementation of <strong>OnMediaPlayerEvent</strong>, you must cast the <em>pEventHeader</em> parameter to the correct structure type. A set of macros is defined for this purpose. These macros check the value of the event type and return <strong><c>null</c></strong> if there is a mismatch; otherwise they return a reference to the correct structure type.</p><table> <tr><td><strong>Event type</strong></td><td> <p><strong>Event structure</strong></p> <p><strong>Pointer cast macro</strong></p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.Play"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PPlayEvent"/></strong> </p> <p> <strong>MFP_GET_PLAY_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.Pause"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PPauseEvent"/></strong> </p> <p> <strong>MFP_GET_PAUSE_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.Stop"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PStopEvent"/></strong> </p> <p> <strong>MFP_GET_STOP_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.PositionSet"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PPositionSetEvent"/></strong> </p> <p> <strong>MFP_GET_POSITION_SET_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.RateSet"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PRateSetEvent"/></strong> </p> <p> <strong>MFP_GET_RATE_SET_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.MediaItemCreateD"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PMediaItemCreateDEvent"/></strong> </p> <p> <strong>MFP_GET_MEDIAITEM_CREATED_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.MediaItemSet"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PMediaItemSetEvent"/></strong> </p> <p> <strong>MFP_GET_MEDIAITEM_SET_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.FrameStep"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PFrameStepEvent"/></strong> </p> <p> <strong>MFP_GET_FRAME_STEP_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.MediaItemCleared"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PMediaItemClearedEvent"/></strong> </p> <p> <strong>MFP_GET_MEDIAITEM_CLEARED_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.Mf"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PMfEvent"/></strong> </p> <p> <strong>MFP_GET_MF_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.Error"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PErrorEvent"/></strong> </p> <p> <strong>MFP_GET_ERROR_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.PlaybackEnded"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PPlaybackEndedEvent"/></strong> </p> <p> <strong>MFP_GET_PLAYBACK_ENDED_EVENT</strong> </p> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.PEventType.AcquireUserCredential"/></td><td> <p> <strong><see cref="SharpDX.MediaFoundation.PAcquireUserCredentialEvent"/></strong> </p> <p> <strong>MFP_GET_ACQUIRE_USER_CREDENTIAL_EVENT</strong> </p> </td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE']/*"/>	
    /// <msdn-id>dd375532</msdn-id>	
    /// <unmanaged>MFP_EVENT_TYPE</unmanaged>	
    /// <unmanaged-short>MFP_EVENT_TYPE</unmanaged-short>	
    public enum PEventType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_PLAY']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_PLAY</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_PLAY</unmanaged-short>	
        Play = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_PAUSE']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_PAUSE</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_PAUSE</unmanaged-short>	
        Pause = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_STOP']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_STOP</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_STOP</unmanaged-short>	
        Stop = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_POSITION_SET']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_POSITION_SET</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_POSITION_SET</unmanaged-short>	
        PositionSet = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_RATE_SET']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_RATE_SET</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_RATE_SET</unmanaged-short>	
        RateSet = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_MEDIAITEM_CREATED']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_MEDIAITEM_CREATED</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_MEDIAITEM_CREATED</unmanaged-short>	
        MediaItemCreateD = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_MEDIAITEM_SET']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_MEDIAITEM_SET</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_MEDIAITEM_SET</unmanaged-short>	
        MediaItemSet = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_FRAME_STEP']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_FRAME_STEP</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_FRAME_STEP</unmanaged-short>	
        FrameStep = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_MEDIAITEM_CLEARED']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_MEDIAITEM_CLEARED</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_MEDIAITEM_CLEARED</unmanaged-short>	
        MediaItemCleared = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_MF']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_MF</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_MF</unmanaged-short>	
        Mf = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_ERROR']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_ERROR</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_ERROR</unmanaged-short>	
        Error = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_PLAYBACK_ENDED']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_PLAYBACK_ENDED</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_PLAYBACK_ENDED</unmanaged-short>	
        PlaybackEnded = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL']/*"/>	
        /// <msdn-id>dd375532</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL</unmanaged-short>	
        AcquireUserCredential = unchecked((int)12),			
    }
    
    /// <summary>	
    /// <p>Defines policy settings for the <strong><see cref="SharpDX.MediaFoundation.PluginControl2.SetPolicy"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_PLUGIN_CONTROL_POLICY']/*"/>	
    /// <msdn-id>hh162881</msdn-id>	
    /// <unmanaged>MF_PLUGIN_CONTROL_POLICY</unmanaged>	
    /// <unmanaged-short>MF_PLUGIN_CONTROL_POLICY</unmanaged-short>	
    public enum PluginControlPolicy : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS']/*"/>	
        /// <msdn-id>hh162881</msdn-id>	
        /// <unmanaged>MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS</unmanaged>	
        /// <unmanaged-short>MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS</unmanaged-short>	
        UseAllPlugins = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS']/*"/>	
        /// <msdn-id>hh162881</msdn-id>	
        /// <unmanaged>MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS</unmanaged>	
        /// <unmanaged-short>MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS</unmanaged-short>	
        UseApprovedPlugins = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS']/*"/>	
        /// <msdn-id>hh162881</msdn-id>	
        /// <unmanaged>MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS</unmanaged>	
        /// <unmanaged-short>MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS</unmanaged-short>	
        UseWebPlugins = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE']/*"/>	
        /// <msdn-id>hh162881</msdn-id>	
        /// <unmanaged>MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE</unmanaged>	
        /// <unmanaged-short>MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE</unmanaged-short>	
        UseWebPluginsEdgemode = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies the object type for the <strong><see cref="SharpDX.MediaFoundation.PluginControl"/></strong> interface.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_Plugin_Type']/*"/>	
    /// <msdn-id>dd375763</msdn-id>	
    /// <unmanaged>MF_Plugin_Type</unmanaged>	
    /// <unmanaged-short>MF_Plugin_Type</unmanaged-short>	
    public enum PluginType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_Plugin_Type_MFT']/*"/>	
        /// <msdn-id>dd375763</msdn-id>	
        /// <unmanaged>MF_Plugin_Type_MFT</unmanaged>	
        /// <unmanaged-short>MF_Plugin_Type_MFT</unmanaged-short>	
        Mft = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_Plugin_Type_MediaSource']/*"/>	
        /// <msdn-id>dd375763</msdn-id>	
        /// <unmanaged>MF_Plugin_Type_MediaSource</unmanaged>	
        /// <unmanaged-short>MF_Plugin_Type_MediaSource</unmanaged-short>	
        MediaSource = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_Plugin_Type_MFT_MatchOutputType']/*"/>	
        /// <msdn-id>dd375763</msdn-id>	
        /// <unmanaged>MF_Plugin_Type_MFT_MatchOutputType</unmanaged>	
        /// <unmanaged-short>MF_Plugin_Type_MFT_MatchOutputType</unmanaged-short>	
        MftMatchOutputType = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_Plugin_Type_Other']/*"/>	
        /// <msdn-id>dd375763</msdn-id>	
        /// <unmanaged>MF_Plugin_Type_Other</unmanaged>	
        /// <unmanaged-short>MF_Plugin_Type_Other</unmanaged-short>	
        Other = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Specifies the current playback state.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE']/*"/>	
    /// <msdn-id>dd375562</msdn-id>	
    /// <unmanaged>MFP_MEDIAPLAYER_STATE</unmanaged>	
    /// <unmanaged-short>MFP_MEDIAPLAYER_STATE</unmanaged-short>	
    public enum PMediaPlayerState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE_EMPTY']/*"/>	
        /// <msdn-id>dd375562</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE_EMPTY</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE_EMPTY</unmanaged-short>	
        Empty = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE_STOPPED']/*"/>	
        /// <msdn-id>dd375562</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE_STOPPED</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE_STOPPED</unmanaged-short>	
        Stopped = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE_PLAYING']/*"/>	
        /// <msdn-id>dd375562</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE_PLAYING</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE_PLAYING</unmanaged-short>	
        Playing = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE_PAUSED']/*"/>	
        /// <msdn-id>dd375562</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE_PAUSED</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE_PAUSED</unmanaged-short>	
        Paused = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAPLAYER_STATE_SHUTDOWN']/*"/>	
        /// <msdn-id>dd375562</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE_SHUTDOWN</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE_SHUTDOWN</unmanaged-short>	
        Shutdown = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> Contains flags that define the behavior of the <strong><see cref="SharpDX.MediaFoundation.MediaFactory.CreatePMPMediaSession"/></strong> function. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPMPSESSION_CREATION_FLAGS']/*"/>	
    /// <msdn-id>ms697495</msdn-id>	
    /// <unmanaged>MFPMPSESSION_CREATION_FLAGS</unmanaged>	
    /// <unmanaged-short>MFPMPSESSION_CREATION_FLAGS</unmanaged-short>	
    [Flags]
    public enum PmpsessionCreationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPMPSESSION_UNPROTECTED_PROCESS']/*"/>	
        /// <msdn-id>ms697495</msdn-id>	
        /// <unmanaged>MFPMPSESSION_UNPROTECTED_PROCESS</unmanaged>	
        /// <unmanaged-short>MFPMPSESSION_UNPROTECTED_PROCESS</unmanaged-short>	
        UnprotectedProcess = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPMPSESSION_IN_PROCESS']/*"/>	
        /// <msdn-id>ms697495</msdn-id>	
        /// <unmanaged>MFPMPSESSION_IN_PROCESS</unmanaged>	
        /// <unmanaged-short>MFPMPSESSION_IN_PROCESS</unmanaged-short>	
        InProcess = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines actions that can be performed on a stream.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPOLICYMANAGER_ACTION']/*"/>	
    /// <msdn-id>ms698977</msdn-id>	
    /// <unmanaged>MFPOLICYMANAGER_ACTION</unmanaged>	
    /// <unmanaged-short>MFPOLICYMANAGER_ACTION</unmanaged-short>	
    public enum PolicymanagerAction : int {	
        
        /// <summary>	
        /// <dd> <p>No action.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_NO']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_NO</unmanaged>	
        /// <unmanaged-short>PEACTION_NO</unmanaged-short>	
        PeactionNo = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Play the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_PLAY']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_PLAY</unmanaged>	
        /// <unmanaged-short>PEACTION_PLAY</unmanaged-short>	
        PeactionPlay = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Copy the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_COPY']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_COPY</unmanaged>	
        /// <unmanaged-short>PEACTION_COPY</unmanaged-short>	
        PeactionCopy = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Export the stream to another format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_EXPORT']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_EXPORT</unmanaged>	
        /// <unmanaged-short>PEACTION_EXPORT</unmanaged-short>	
        PeactionExport = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Extract the data from the stream and pass it to the application. For example, acoustic echo cancellation requires this action.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_EXTRACT']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_EXTRACT</unmanaged>	
        /// <unmanaged-short>PEACTION_EXTRACT</unmanaged-short>	
        PeactionExtract = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_RESERVED1']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_RESERVED1</unmanaged>	
        /// <unmanaged-short>PEACTION_RESERVED1</unmanaged-short>	
        PeactionReserved1 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_RESERVED2']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_RESERVED2</unmanaged>	
        /// <unmanaged-short>PEACTION_RESERVED2</unmanaged-short>	
        PeactionReserved2 = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_RESERVED3']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_RESERVED3</unmanaged>	
        /// <unmanaged-short>PEACTION_RESERVED3</unmanaged-short>	
        PeactionReserved3 = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Last member of the enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='PEACTION_LAST']/*"/>	
        /// <msdn-id>ms698977</msdn-id>	
        /// <unmanaged>PEACTION_LAST</unmanaged>	
        /// <unmanaged-short>PEACTION_LAST</unmanaged-short>	
        PeactionLast = unchecked((int)7),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfcaptureengine_0000_0000_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfcaptureengine_0000_0000_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfcaptureengine_0000_0000_0001</unmanaged-short>	
    public enum PreferredMediaStream : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW']/*"/>	
        /// <unmanaged>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW</unmanaged-short>	
        VIDEO_PREVIEW = unchecked((int)-6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD']/*"/>	
        /// <unmanaged>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD</unmanaged-short>	
        VIDEO_RECORD = unchecked((int)-7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO']/*"/>	
        /// <unmanaged>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO</unmanaged-short>	
        PHOTO = unchecked((int)-8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO']/*"/>	
        /// <unmanaged>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO</unmanaged-short>	
        AUDIO = unchecked((int)-9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_CAPTURE_ENGINE_MEDIASOURCE']/*"/>	
        /// <unmanaged>MF_CAPTURE_ENGINE_MEDIASOURCE</unmanaged>	
        /// <unmanaged-short>MF_CAPTURE_ENGINE_MEDIASOURCE</unmanaged-short>	
        MfCaptureEngineMediaSource = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.QualityAdvise2.NotifyQualityEvent"/></strong> method.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the decoder sets the <strong><see cref="SharpDX.MediaFoundation.QualityAdviseFlags.CannotKeepUp"/></strong> flag, the quality manager tries to reduce latency through the media source and the media sink. For example, it might request the Enhanced Video Renderer (EVR) to drop frames. During this period, the quality manager stops calling the decoder's <strong><see cref="SharpDX.MediaFoundation.QualityAdvise2.NotifyQualityEvent"/></strong> method, until samples are no longer arriving late at the sink. At that point, the quality manager resumes calling <strong>NotifyQualityEvent</strong> on the decoder.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_ADVISE_FLAGS']/*"/>	
    /// <msdn-id>dd743824</msdn-id>	
    /// <unmanaged>MF_QUALITY_ADVISE_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_QUALITY_ADVISE_FLAGS</unmanaged-short>	
    [Flags]
    public enum QualityAdviseFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_CANNOT_KEEP_UP']/*"/>	
        /// <msdn-id>dd743824</msdn-id>	
        /// <unmanaged>MF_QUALITY_CANNOT_KEEP_UP</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_CANNOT_KEEP_UP</unmanaged-short>	
        CannotKeepUp = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how aggressively a pipeline component should drop samples.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>In drop mode, a component drops samples, more or less aggressively depending on the level of the drop mode. The specific algorithm used depends on the component. Mode 1 is the least aggressive mode, and mode 5 is the most aggressive. A component is not required to implement all five levels.</p><p>For example, suppose an encoded video stream has three B-frames between each pair of P-frames. A decoder might implement the following drop modes:</p><ul> <li> <p>Mode 1: Drop one out of every three B frames.</p> </li> <li> <p>Mode 2: Drop one out of every two B frames.</p> </li> <li> <p>Mode 3: Drop all delta frames.</p> </li> <li> <p>Modes 4 and 5: Unsupported.</p> </li> </ul><p>The enhanced video renderer (EVR) can drop video frames before sending them to the EVR mixer.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_DROP_MODE']/*"/>	
    /// <msdn-id>ms704659</msdn-id>	
    /// <unmanaged>MF_QUALITY_DROP_MODE</unmanaged>	
    /// <unmanaged-short>MF_QUALITY_DROP_MODE</unmanaged-short>	
    public enum QualityDropMode : int {	
        
        /// <summary>	
        /// <dd> <p>Normal processing of samples. Drop mode is disabled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_NONE']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_NONE</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_NONE</unmanaged-short>	
        MfDropModeNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>First drop mode (least aggressive).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_1']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_1</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_1</unmanaged-short>	
        MfDropMode1 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Second drop mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_2']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_2</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_2</unmanaged-short>	
        MfDropMode2 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Third drop mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_3']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_3</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_3</unmanaged-short>	
        MfDropMode3 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Fourth drop mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_4']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_4</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_4</unmanaged-short>	
        MfDropMode4 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Fifth drop mode (most aggressive, if it is supported; see Remarks).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_DROP_MODE_5']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_DROP_MODE_5</unmanaged>	
        /// <unmanaged-short>MF_DROP_MODE_5</unmanaged-short>	
        MfDropMode5 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Maximum number of drop modes. This value is not a valid flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_NUM_DROP_MODES']/*"/>	
        /// <msdn-id>ms704659</msdn-id>	
        /// <unmanaged>MF_NUM_DROP_MODES</unmanaged>	
        /// <unmanaged-short>MF_NUM_DROP_MODES</unmanaged-short>	
        MfNumDropModes = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Specifies the quality level for a pipeline component. The quality level determines how the component consumes or produces samples.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Each successive quality level decreases the amount of processing that is needed, while also reducing the resulting quality of the audio or video. The specific algorithm used to reduce quality depends on the component. Mode 1 is the least aggressive mode, and mode 5 is the most aggressive. A component is not required to implement all five levels. Also, the same quality level might not be comparable between two different components. </p><p> Video decoders can often reduce quality by leaving out certain post-processing steps. The enhanced video renderer (EVR) can sometimes reduce quality by switching to a different deinterlacing mode. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_LEVEL']/*"/>	
    /// <msdn-id>ms698949</msdn-id>	
    /// <unmanaged>MF_QUALITY_LEVEL</unmanaged>	
    /// <unmanaged-short>MF_QUALITY_LEVEL</unmanaged-short>	
    public enum QualityLevel : int {	
        
        /// <summary>	
        /// <dd> <p> Normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL</unmanaged-short>	
        MfQualityNormal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> One level below normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL_MINUS_1']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL_MINUS_1</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL_MINUS_1</unmanaged-short>	
        MfQualityNormalMinus1 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Two levels below normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL_MINUS_2']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL_MINUS_2</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL_MINUS_2</unmanaged-short>	
        MfQualityNormalMinus2 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> Three levels below normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL_MINUS_3']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL_MINUS_3</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL_MINUS_3</unmanaged-short>	
        MfQualityNormalMinus3 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> Four levels below normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL_MINUS_4']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL_MINUS_4</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL_MINUS_4</unmanaged-short>	
        MfQualityNormalMinus4 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> Five levels below normal quality. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUALITY_NORMAL_MINUS_5']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_QUALITY_NORMAL_MINUS_5</unmanaged>	
        /// <unmanaged-short>MF_QUALITY_NORMAL_MINUS_5</unmanaged-short>	
        MfQualityNormalMinus5 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p> Maximum number of quality levels. This value is not a valid flag. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_NUM_QUALITY_LEVELS']/*"/>	
        /// <msdn-id>ms698949</msdn-id>	
        /// <unmanaged>MF_NUM_QUALITY_LEVELS</unmanaged>	
        /// <unmanaged-short>MF_NUM_QUALITY_LEVELS</unmanaged-short>	
        MfNumQualityLevels = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies the direction of playback (forward or reverse).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRATE_DIRECTION']/*"/>	
    /// <msdn-id>ms696225</msdn-id>	
    /// <unmanaged>MFRATE_DIRECTION</unmanaged>	
    /// <unmanaged-short>MFRATE_DIRECTION</unmanaged-short>	
    public enum RateDirection : int {	
        
        /// <summary>	
        /// <dd> <p>Forward playback.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRATE_FORWARD']/*"/>	
        /// <msdn-id>ms696225</msdn-id>	
        /// <unmanaged>MFRATE_FORWARD</unmanaged>	
        /// <unmanaged-short>MFRATE_FORWARD</unmanaged-short>	
        Forward = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Reverse playback.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRATE_REVERSE']/*"/>	
        /// <msdn-id>ms696225</msdn-id>	
        /// <unmanaged>MFRATE_REVERSE</unmanaged>	
        /// <unmanaged-short>MFRATE_REVERSE</unmanaged-short>	
        Reverse = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the version number for sample protection.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION']/*"/>	
    /// <msdn-id>ms697061</msdn-id>	
    /// <unmanaged>SAMPLE_PROTECTION_VERSION</unmanaged>	
    /// <unmanaged-short>SAMPLE_PROTECTION_VERSION</unmanaged-short>	
    public enum SampleProtectionVersion : int {	
        
        /// <summary>	
        /// <dd> <p>No sample protection.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION_NO']/*"/>	
        /// <msdn-id>ms697061</msdn-id>	
        /// <unmanaged>SAMPLE_PROTECTION_VERSION_NO</unmanaged>	
        /// <unmanaged-short>SAMPLE_PROTECTION_VERSION_NO</unmanaged-short>	
        No = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Version 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION_BASIC_LOKI']/*"/>	
        /// <msdn-id>ms697061</msdn-id>	
        /// <unmanaged>SAMPLE_PROTECTION_VERSION_BASIC_LOKI</unmanaged>	
        /// <unmanaged-short>SAMPLE_PROTECTION_VERSION_BASIC_LOKI</unmanaged-short>	
        BasicLoki = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Version 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION_SCATTER']/*"/>	
        /// <msdn-id>ms697061</msdn-id>	
        /// <unmanaged>SAMPLE_PROTECTION_VERSION_SCATTER</unmanaged>	
        /// <unmanaged-short>SAMPLE_PROTECTION_VERSION_SCATTER</unmanaged-short>	
        Scatter = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Version 3.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION_RC4']/*"/>	
        /// <msdn-id>ms697061</msdn-id>	
        /// <unmanaged>SAMPLE_PROTECTION_VERSION_RC4</unmanaged>	
        /// <unmanaged-short>SAMPLE_PROTECTION_VERSION_RC4</unmanaged-short>	
        Rc4 = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SAMPLE_PROTECTION_VERSION_AES128CTR']/*"/>	
        /// <msdn-id>ms697061</msdn-id>	
        /// <unmanaged>SAMPLE_PROTECTION_VERSION_AES128CTR</unmanaged>	
        /// <unmanaged-short>SAMPLE_PROTECTION_VERSION_AES128CTR</unmanaged-short>	
        Aes128ctr = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies how a video stream is interlaced.</p><p>In the descriptions that follow, upper field refers to the field that contains the leading half scan line. Lower field refers to the field that contains the first full scan line.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Scan lines in the lower field are 0.5 scan line lower than those in the upper field. In NTSC television, a frame consists of a lower field followed by an upper field. In PAL television, a frame consists of an upper field followed by a lower field.</p><p>The upper field is also called the even field, the top field, or field 2. The lower field is also called the odd field, the bottom field, or field 1.</p><p>If the interlace mode is <see cref="SharpDX.MediaFoundation.VideoInterlaceMode.FieldSingleUpper"/> or <see cref="SharpDX.MediaFoundation.VideoInterlaceMode.FieldSingleLower"/>, each sample contains a single field, so each buffer contains only half the number of field lines given in the media type.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceMode']/*"/>	
    /// <msdn-id>ms694269</msdn-id>	
    /// <unmanaged>MFSensorDeviceMode</unmanaged>	
    /// <unmanaged-short>MFSensorDeviceMode</unmanaged-short>	
    public enum SensorDeviceMode : int {	
        
        /// <summary>	
        /// <dd> <p> The type of interlacing is not known. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceMode_Controller']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFSensorDeviceMode_Controller</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceMode_Controller</unmanaged-short>	
        Controller = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Progressive frames. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceMode_Shared']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFSensorDeviceMode_Shared</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceMode_Shared</unmanaged-short>	
        Shared = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how to open or create a file.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType']/*"/>	
    /// <msdn-id>ms694164</msdn-id>	
    /// <unmanaged>MFSensorDeviceType</unmanaged>	
    /// <unmanaged-short>MFSensorDeviceType</unmanaged-short>	
    public enum SensorDeviceType : int {	
        
        /// <summary>	
        /// <dd> <p>Open an existing file. Fail if the file does not exist.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType_Unknown']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MFSensorDeviceType_Unknown</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceType_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Create a new file. Fail if the file already exists.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType_Device']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MFSensorDeviceType_Device</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceType_Device</unmanaged-short>	
        Device = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Open an existing file and truncate it, so that the size is zero bytes. Fail if the file does not already exist.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType_MediaSource']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MFSensorDeviceType_MediaSource</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceType_MediaSource</unmanaged-short>	
        MediaSource = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>If the file does not exist, create a new file. If the file exists, open it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType_FrameProvider']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MFSensorDeviceType_FrameProvider</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceType_FrameProvider</unmanaged-short>	
        FrameProvider = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Create a new file. If the file exists, overwrite the file.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorDeviceType_SensorTransform']/*"/>	
        /// <msdn-id>ms694164</msdn-id>	
        /// <unmanaged>MFSensorDeviceType_SensorTransform</unmanaged>	
        /// <unmanaged-short>MFSensorDeviceType_SensorTransform</unmanaged-short>	
        SensorTransform = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies whether a stream associated with an <strong><see cref="SharpDX.MediaFoundation.SensorDevice"/></strong> is an input or an output stream.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorStreamType']/*"/>	
    /// <msdn-id>mt797984</msdn-id>	
    /// <unmanaged>MFSensorStreamType</unmanaged>	
    /// <unmanaged-short>MFSensorStreamType</unmanaged-short>	
    public enum SensorStreamType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorStreamType_Unknown']/*"/>	
        /// <msdn-id>mt797984</msdn-id>	
        /// <unmanaged>MFSensorStreamType_Unknown</unmanaged>	
        /// <unmanaged-short>MFSensorStreamType_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorStreamType_Input']/*"/>	
        /// <msdn-id>mt797984</msdn-id>	
        /// <unmanaged>MFSensorStreamType_Input</unmanaged>	
        /// <unmanaged-short>MFSensorStreamType_Input</unmanaged-short>	
        Input = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSensorStreamType_Output']/*"/>	
        /// <msdn-id>mt797984</msdn-id>	
        /// <unmanaged>MFSensorStreamType_Output</unmanaged>	
        /// <unmanaged-short>MFSensorStreamType_Output</unmanaged-short>	
        Output = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains flags for adding a topology to the sequencer source, or updating a topology already in the queue.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSequencerTopologyFlags']/*"/>	
    /// <msdn-id>ms703884</msdn-id>	
    /// <unmanaged>MFSequencerTopologyFlags</unmanaged>	
    /// <unmanaged-short>MFSequencerTopologyFlags</unmanaged-short>	
    public enum SequencerTopologyFlags : int {	
        
        /// <summary>	
        /// <dd> <p>This topology is the last topology in the sequence.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SequencerTopologyFlags_Last']/*"/>	
        /// <msdn-id>ms703884</msdn-id>	
        /// <unmanaged>SequencerTopologyFlags_Last</unmanaged>	
        /// <unmanaged-short>SequencerTopologyFlags_Last</unmanaged-short>	
        SequencerTopologyFlagsLast = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Retrieves an interface from the enhanced video renderer (EVR), or from the video mixer or video presenter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This method can be called only from inside the <strong><see cref="SharpDX.MediaFoundation.TopologyServiceLookupClient.InitServicePointers"/></strong> method. At any other time, the method returns <see cref="SharpDX.MediaFoundation.ResultCode.NotAccepting"/>.</p><p>The presenter can use this method to query the EVR and the mixer. The mixer can use it to query the EVR and the presenter. Which objects are queried depends on the caller and the service <see cref="System.Guid"/>, as shown in the following table.</p><table> <tr><th>Caller</th><th>Service <see cref="System.Guid"/></th><th>Objects queried</th></tr> <tr><td>Presenter</td><td>MR_VIDEO_RENDER_SERVICE</td><td>EVR</td></tr> <tr><td>Presenter</td><td>MR_VIDEO_MIXER_SERVICE</td><td>Mixer</td></tr> <tr><td>Mixer</td><td>MR_VIDEO_RENDER_SERVICE</td><td>Presenter and EVR</td></tr> </table><p>?</p><p>The following interfaces are available from the EVR:</p><ul> <li> <p><strong>IMediaEventSink</strong>. This interface is documented in the DirectShow SDK documentation.</p> </li> <li> <p> <strong><see cref="SharpDX.MediaFoundation.Clock"/></strong> interface. This interface is available if the EVR has access to a clock (reference clock in DirectShow or presentation clock in Media Foundation). This interface might not be available. Presenter and mixers must be able to process data without a clock. If the <strong><see cref="SharpDX.MediaFoundation.Clock"/></strong> interface is available, you can also get these related interfaces:</p> <ul> <li> <p> <strong><see cref="SharpDX.MediaFoundation.Timer"/></strong> </p> </li> <li> <p> <strong><see cref="SharpDX.MediaFoundation.PresentationClock"/></strong> (Media Foundation EVR only)</p> </li> </ul> </li> </ul><p>The following interfaces are available from the mixer:</p><ul> <li> <p> <strong><see cref="SharpDX.MediaFoundation.Transform"/></strong> </p> </li> <li> <p> <strong><see cref="SharpDX.MediaFoundation.VideoDeviceID"/></strong> </p> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_TYPE']/*"/>	
    /// <msdn-id>bb970504</msdn-id>	
    /// <unmanaged>MF_SERVICE_LOOKUP_TYPE</unmanaged>	
    /// <unmanaged-short>MF_SERVICE_LOOKUP_TYPE</unmanaged-short>	
    public enum ServiceLookupType : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies the scope of the search. Currently this parameter is ignored. Use the value <see cref="SharpDX.MediaFoundation.ServiceLookupType.Global"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_UPSTREAM']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_UPSTREAM</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_UPSTREAM</unmanaged-short>	
        Upstream = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Reserved, must be zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_UPSTREAM_DIRECT']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_UPSTREAM_DIRECT</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_UPSTREAM_DIRECT</unmanaged-short>	
        UpstreamDirect = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Service <see cref="System.Guid"/> of the requested interface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_DOWNSTREAM']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_DOWNSTREAM</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_DOWNSTREAM</unmanaged-short>	
        Downstream = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Interface identifier of the requested interface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT</unmanaged-short>	
        DownstreamDirect = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Array of interface references. If the method succeeds, each member of the array contains either a valid interface reference or <strong><c>null</c></strong>. The caller must release the interface references when the EVR calls <strong><see cref="SharpDX.MediaFoundation.TopologyServiceLookupClient.ReleaseServicePointers"/></strong> (or earlier). If the method fails, every member of the array is <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_ALL']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_ALL</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_ALL</unmanaged-short>	
        All = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Pointer to a value that specifies the size of the <em>ppvObjects</em> array. The value must be at least 1. In the current implementation, there is no reason to specify an array size larger than one element. The value is not changed on output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SERVICE_LOOKUP_GLOBAL']/*"/>	
        /// <msdn-id>bb970504</msdn-id>	
        /// <unmanaged>MF_SERVICE_LOOKUP_GLOBAL</unmanaged>	
        /// <unmanaged-short>MF_SERVICE_LOOKUP_GLOBAL</unmanaged-short>	
        Global = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p> Defines flags for the <strong><see cref="SharpDX.MediaFoundation.MediaSession.GetFullTopology"/></strong> method. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_GETFULLTOPOLOGY_FLAGS']/*"/>	
    /// <msdn-id>ms701845</msdn-id>	
    /// <unmanaged>MFSESSION_GETFULLTOPOLOGY_FLAGS</unmanaged>	
    /// <unmanaged-short>MFSESSION_GETFULLTOPOLOGY_FLAGS</unmanaged-short>	
    [Flags]
    public enum SessionGetFullTopologyFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_GETFULLTOPOLOGY_CURRENT']/*"/>	
        /// <msdn-id>ms701845</msdn-id>	
        /// <unmanaged>MFSESSION_GETFULLTOPOLOGY_CURRENT</unmanaged>	
        /// <unmanaged-short>MFSESSION_GETFULLTOPOLOGY_CURRENT</unmanaged-short>	
        Current = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the behavior of the <strong><see cref="SharpDX.MediaFoundation.MediaSession.SetTopology"/></strong> method.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> These flags are optional, and are not mutually exclusive. If no flags are set, the Media Session resolves the topology and then adds it to the queue of pending presentations. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_SETTOPOLOGY_FLAGS']/*"/>	
    /// <msdn-id>ms696169</msdn-id>	
    /// <unmanaged>MFSESSION_SETTOPOLOGY_FLAGS</unmanaged>	
    /// <unmanaged-short>MFSESSION_SETTOPOLOGY_FLAGS</unmanaged-short>	
    [Flags]
    public enum SessionSetTopologyFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_SETTOPOLOGY_IMMEDIATE']/*"/>	
        /// <msdn-id>ms696169</msdn-id>	
        /// <unmanaged>MFSESSION_SETTOPOLOGY_IMMEDIATE</unmanaged>	
        /// <unmanaged-short>MFSESSION_SETTOPOLOGY_IMMEDIATE</unmanaged-short>	
        Immediate = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_SETTOPOLOGY_NORESOLUTION']/*"/>	
        /// <msdn-id>ms696169</msdn-id>	
        /// <unmanaged>MFSESSION_SETTOPOLOGY_NORESOLUTION</unmanaged>	
        /// <unmanaged-short>MFSESSION_SETTOPOLOGY_NORESOLUTION</unmanaged-short>	
        Noresolution = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSESSION_SETTOPOLOGY_CLEAR_CURRENT']/*"/>	
        /// <msdn-id>ms696169</msdn-id>	
        /// <unmanaged>MFSESSION_SETTOPOLOGY_CLEAR_CURRENT</unmanaged>	
        /// <unmanaged-short>MFSESSION_SETTOPOLOGY_CLEAR_CURRENT</unmanaged-short>	
        ClearCurrent = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Describes the current status of a call to the <strong><see cref="SharpDX.MediaFoundation.Shutdownable.Shutdown"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSHUTDOWN_STATUS']/*"/>	
    /// <msdn-id>ms701630</msdn-id>	
    /// <unmanaged>MFSHUTDOWN_STATUS</unmanaged>	
    /// <unmanaged-short>MFSHUTDOWN_STATUS</unmanaged-short>	
    public enum ShutdownStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSHUTDOWN_INITIATED']/*"/>	
        /// <msdn-id>ms701630</msdn-id>	
        /// <unmanaged>MFSHUTDOWN_INITIATED</unmanaged>	
        /// <unmanaged-short>MFSHUTDOWN_INITIATED</unmanaged-short>	
        Initiated = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSHUTDOWN_COMPLETED']/*"/>	
        /// <msdn-id>ms701630</msdn-id>	
        /// <unmanaged>MFSHUTDOWN_COMPLETED</unmanaged>	
        /// <unmanaged-short>MFSHUTDOWN_COMPLETED</unmanaged-short>	
        Completed = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies how the ASF file sink should apply Windows Media DRM.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION']/*"/>	
    /// <msdn-id>ms703949</msdn-id>	
    /// <unmanaged>MFSINK_WMDRMACTION</unmanaged>	
    /// <unmanaged-short>MFSINK_WMDRMACTION</unmanaged-short>	
    public enum SinkWmdrmaction : int {	
        
        /// <summary>	
        /// <dd> <p>Undefined action.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION_UNDEFINED']/*"/>	
        /// <msdn-id>ms703949</msdn-id>	
        /// <unmanaged>MFSINK_WMDRMACTION_UNDEFINED</unmanaged>	
        /// <unmanaged-short>MFSINK_WMDRMACTION_UNDEFINED</unmanaged-short>	
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Encode the content using Windows Media DRM. Use this flag if the source content does not have DRM protection.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION_ENCODE']/*"/>	
        /// <msdn-id>ms703949</msdn-id>	
        /// <unmanaged>MFSINK_WMDRMACTION_ENCODE</unmanaged>	
        /// <unmanaged-short>MFSINK_WMDRMACTION_ENCODE</unmanaged-short>	
        Encode = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Transcode the content using Windows Media DRM. Use this flag if the source content has Windows Media DRM protection and you want to change the encoding parameters but not the DRM protection.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION_TRANSCODE']/*"/>	
        /// <msdn-id>ms703949</msdn-id>	
        /// <unmanaged>MFSINK_WMDRMACTION_TRANSCODE</unmanaged>	
        /// <unmanaged-short>MFSINK_WMDRMACTION_TRANSCODE</unmanaged-short>	
        Transcode = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Transcrypt the content. Use this flag if the source content has DRM protection and you want to change the DRM protection; for example, if you want to convert from Windows Media DRM version 1 to Windows Media DRM version 7 or later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION_TRANSCRYPT']/*"/>	
        /// <msdn-id>ms703949</msdn-id>	
        /// <unmanaged>MFSINK_WMDRMACTION_TRANSCRYPT</unmanaged>	
        /// <unmanaged-short>MFSINK_WMDRMACTION_TRANSCRYPT</unmanaged-short>	
        Transcrypt = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Reserved. Do not use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSINK_WMDRMACTION_LAST']/*"/>	
        /// <msdn-id>ms703949</msdn-id>	
        /// <unmanaged>MFSINK_WMDRMACTION_LAST</unmanaged>	
        /// <unmanaged-short>MFSINK_WMDRMACTION_LAST</unmanaged-short>	
        Last = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfreadwrite_0000_0005_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfreadwrite_0000_0005_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfreadwrite_0000_0005_0001</unmanaged-short>	
    public enum SinkWriterIndex : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_INVALID_STREAM_INDEX']/*"/>	
        /// <unmanaged>MF_SINK_WRITER_INVALID_STREAM_INDEX</unmanaged>	
        /// <unmanaged-short>MF_SINK_WRITER_INVALID_STREAM_INDEX</unmanaged-short>	
        InvalidStreamIndex = unchecked((int)-1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_ALL_STREAMS']/*"/>	
        /// <unmanaged>MF_SINK_WRITER_ALL_STREAMS</unmanaged>	
        /// <unmanaged-short>MF_SINK_WRITER_ALL_STREAMS</unmanaged-short>	
        AllStreams = unchecked((int)-2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_MEDIASINK']/*"/>	
        /// <unmanaged>MF_SINK_WRITER_MEDIASINK</unmanaged>	
        /// <unmanaged-short>MF_SINK_WRITER_MEDIASINK</unmanaged-short>	
        MediaSink = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.SourceReader.ReadSample"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_CONTROL_FLAG']/*"/>	
    /// <msdn-id>dd375771</msdn-id>	
    /// <unmanaged>MF_SOURCE_READER_CONTROL_FLAG</unmanaged>	
    /// <unmanaged-short>MF_SOURCE_READER_CONTROL_FLAG</unmanaged-short>	
    [Flags]
    public enum SourceReaderControlFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_CONTROLF_DRAIN']/*"/>	
        /// <msdn-id>dd375771</msdn-id>	
        /// <unmanaged>MF_SOURCE_READER_CONTROLF_DRAIN</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_CONTROLF_DRAIN</unmanaged-short>	
        ControlfDrain = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Contains flags that indicate the status of the <strong><see cref="SharpDX.MediaFoundation.SourceReader.ReadSample"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_FLAG']/*"/>	
    /// <msdn-id>dd375773</msdn-id>	
    /// <unmanaged>MF_SOURCE_READER_FLAG</unmanaged>	
    /// <unmanaged-short>MF_SOURCE_READER_FLAG</unmanaged-short>	
    [Flags]
    public enum SourceReaderFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_ERROR']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_ERROR</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_ERROR</unmanaged-short>	
        Error = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_ENDOFSTREAM']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_ENDOFSTREAM</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_ENDOFSTREAM</unmanaged-short>	
        Endofstream = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_NEWSTREAM']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_NEWSTREAM</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_NEWSTREAM</unmanaged-short>	
        Newstream = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED</unmanaged-short>	
        Nativemediatypechanged = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED</unmanaged-short>	
        Currentmediatypechanged = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_STREAMTICK']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_STREAMTICK</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_STREAMTICK</unmanaged-short>	
        StreamTick = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READERF_ALLEFFECTSREMOVED']/*"/>	
        /// <msdn-id>dd375773</msdn-id>	
        /// <unmanaged>MF_SOURCE_READERF_ALLEFFECTSREMOVED</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READERF_ALLEFFECTSREMOVED</unmanaged-short>	
        AllEffectsremoved = unchecked((int)512),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfreadwrite_0000_0001_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfreadwrite_0000_0001_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfreadwrite_0000_0001_0001</unmanaged-short>	
    public enum SourceReaderIndex : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_INVALID_STREAM_INDEX']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_INVALID_STREAM_INDEX</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_INVALID_STREAM_INDEX</unmanaged-short>	
        InvalidStreamIndex = unchecked((int)-1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_ALL_STREAMS']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_ALL_STREAMS</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_ALL_STREAMS</unmanaged-short>	
        AllStreams = unchecked((int)-2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_ANY_STREAM']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_ANY_STREAM</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_ANY_STREAM</unmanaged-short>	
        AnyStream = unchecked((int)-2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_FIRST_AUDIO_STREAM']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_FIRST_AUDIO_STREAM</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_FIRST_AUDIO_STREAM</unmanaged-short>	
        FirstAudioStream = unchecked((int)-3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_FIRST_VIDEO_STREAM']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_FIRST_VIDEO_STREAM</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_FIRST_VIDEO_STREAM</unmanaged-short>	
        FirstVideoStream = unchecked((int)-4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SOURCE_READER_MEDIASOURCE']/*"/>	
        /// <unmanaged>MF_SOURCE_READER_MEDIASOURCE</unmanaged>	
        /// <unmanaged-short>MF_SOURCE_READER_MEDIASOURCE</unmanaged-short>	
        MediaSource = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='__MIDL___MIDL_itf_mfidl_0000_0001_0001']/*"/>	
    /// <unmanaged>__MIDL___MIDL_itf_mfidl_0000_0001_0001</unmanaged>	
    /// <unmanaged-short>__MIDL___MIDL_itf_mfidl_0000_0001_0001</unmanaged-short>	
    [Flags]
    public enum SourceResolverFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_MEDIASOURCE']/*"/>	
        /// <unmanaged>MF_RESOLUTION_MEDIASOURCE</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_MEDIASOURCE</unmanaged-short>	
        MediaSource = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_BYTESTREAM']/*"/>	
        /// <unmanaged>MF_RESOLUTION_BYTESTREAM</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_BYTESTREAM</unmanaged-short>	
        ByteStream = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE']/*"/>	
        /// <unmanaged>MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE</unmanaged-short>	
        ContentDoesNotHaveToMatchExtensionOrMimeType = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL']/*"/>	
        /// <unmanaged>MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL</unmanaged-short>	
        KeepByteStreamAliveOnFail = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_DISABLE_LOCAL_PLUGINS']/*"/>	
        /// <unmanaged>MF_RESOLUTION_DISABLE_LOCAL_PLUGINS</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_DISABLE_LOCAL_PLUGINS</unmanaged-short>	
        DisableLocalPlugins = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY']/*"/>	
        /// <unmanaged>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY</unmanaged-short>	
        PluginControlPolicyApprovedOnly = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY']/*"/>	
        /// <unmanaged>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY</unmanaged-short>	
        PluginControlPolicyWebOnly = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE']/*"/>	
        /// <unmanaged>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE</unmanaged-short>	
        PluginControlPolicyWebOnlyEdgemode = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_READ']/*"/>	
        /// <unmanaged>MF_RESOLUTION_READ</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_READ</unmanaged-short>	
        Read = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_RESOLUTION_WRITE']/*"/>	
        /// <unmanaged>MF_RESOLUTION_WRITE</unmanaged>	
        /// <unmanaged-short>MF_RESOLUTION_WRITE</unmanaged-short>	
        Write = unchecked((int)131072),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains values that specify common video formats.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStandardVideoFormat']/*"/>	
    /// <msdn-id>aa473799</msdn-id>	
    /// <unmanaged>MFStandardVideoFormat</unmanaged>	
    /// <unmanaged-short>MFStandardVideoFormat</unmanaged-short>	
    public enum StandardVideoFormat : int {	
        
        /// <summary>	
        /// <dd> <p>Reserved; do not use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_reserved']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_reserved</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_reserved</unmanaged-short>	
        DVideoFormatReserved = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>NTSC television (720 x 480i).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_NTSC']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_NTSC</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_NTSC</unmanaged-short>	
        DVideoFormatNtsc = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>PAL television (720 x 576i).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_PAL']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_PAL</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_PAL</unmanaged-short>	
        DVideoFormatPal = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>DVD, NTSC standard (720 x 480).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_DVD_NTSC']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_DVD_NTSC</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_DVD_NTSC</unmanaged-short>	
        DVideoFormatDvdNtsc = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>DVD, PAL standard (720 x 576).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_DVD_PAL']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_DVD_PAL</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_DVD_PAL</unmanaged-short>	
        DVideoFormatDvdPal = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>DV video, PAL standard.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_DV_PAL']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_DV_PAL</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_DV_PAL</unmanaged-short>	
        DVideoFormatDvPal = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>DV video, NTSC standard.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_DV_NTSC']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_DV_NTSC</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_DV_NTSC</unmanaged-short>	
        DVideoFormatDvNtsc = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>ATSC digital television, SD (480i).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_ATSC_SD480i']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_ATSC_SD480i</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_ATSC_SD480i</unmanaged-short>	
        DVideoFormatAtscSD480i = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>ATSC digital television, HD interlaced (1080i)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_ATSC_HD1080i']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_ATSC_HD1080i</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_ATSC_HD1080i</unmanaged-short>	
        DVideoFormatAtscHD1080i = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>ATSC digital television, HD progressive (720p)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFStdVideoFormat_ATSC_HD720p']/*"/>	
        /// <msdn-id>aa473799</msdn-id>	
        /// <unmanaged>MFStdVideoFormat_ATSC_HD720p</unmanaged>	
        /// <unmanaged-short>MFStdVideoFormat_ATSC_HD720p</unmanaged-short>	
        DVideoFormatAtscHD720p = unchecked((int)9),			
    }
    
    /// <summary>	
    /// <p>Defines stream marker information for the <strong><see cref="SharpDX.MediaFoundation.StreamSink.PlaceMarker"/></strong> method. The <strong>PlaceMarker</strong> method places a marker on the stream between samples. The <strong><see cref="SharpDX.MediaFoundation.StreamsInkMarkerType"/></strong> enumeration defines the marker type and the type of information associated with the marker.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the Streaming Audio Renderer receives an <strong><see cref="SharpDX.MediaFoundation.StreamsInkMarkerType.Tick"/></strong> marker, it inserts silence to cover the gap in the data. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSTREAMSINK_MARKER_TYPE']/*"/>	
    /// <msdn-id>ms703837</msdn-id>	
    /// <unmanaged>MFSTREAMSINK_MARKER_TYPE</unmanaged>	
    /// <unmanaged-short>MFSTREAMSINK_MARKER_TYPE</unmanaged-short>	
    public enum StreamsInkMarkerType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSTREAMSINK_MARKER_DEFAULT']/*"/>	
        /// <msdn-id>ms703837</msdn-id>	
        /// <unmanaged>MFSTREAMSINK_MARKER_DEFAULT</unmanaged>	
        /// <unmanaged-short>MFSTREAMSINK_MARKER_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSTREAMSINK_MARKER_ENDOFSEGMENT']/*"/>	
        /// <msdn-id>ms703837</msdn-id>	
        /// <unmanaged>MFSTREAMSINK_MARKER_ENDOFSEGMENT</unmanaged>	
        /// <unmanaged-short>MFSTREAMSINK_MARKER_ENDOFSEGMENT</unmanaged-short>	
        Endofsegment = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSTREAMSINK_MARKER_TICK']/*"/>	
        /// <msdn-id>ms703837</msdn-id>	
        /// <unmanaged>MFSTREAMSINK_MARKER_TICK</unmanaged>	
        /// <unmanaged-short>MFSTREAMSINK_MARKER_TICK</unmanaged-short>	
        Tick = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSTREAMSINK_MARKER_EVENT']/*"/>	
        /// <msdn-id>ms703837</msdn-id>	
        /// <unmanaged>MFSTREAMSINK_MARKER_EVENT</unmanaged>	
        /// <unmanaged-short>MFSTREAMSINK_MARKER_EVENT</unmanaged-short>	
        Event = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_STREAM_STATE']/*"/>	
    /// <unmanaged>MF_STREAM_STATE</unmanaged>	
    /// <unmanaged-short>MF_STREAM_STATE</unmanaged-short>	
    public enum StreamState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_STREAM_STATE_STOPPED']/*"/>	
        /// <unmanaged>MF_STREAM_STATE_STOPPED</unmanaged>	
        /// <unmanaged-short>MF_STREAM_STATE_STOPPED</unmanaged-short>	
        Stopped = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_STREAM_STATE_PAUSED']/*"/>	
        /// <unmanaged>MF_STREAM_STATE_PAUSED</unmanaged>	
        /// <unmanaged-short>MF_STREAM_STATE_PAUSED</unmanaged-short>	
        Paused = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_STREAM_STATE_RUNNING']/*"/>	
        /// <unmanaged>MF_STREAM_STATE_RUNNING</unmanaged>	
        /// <unmanaged-short>MF_STREAM_STATE_RUNNING</unmanaged-short>	
        Running = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_REASON']/*"/>	
    /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_REASON</unmanaged>	
    /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_REASON</unmanaged-short>	
    public enum TAudioDecoderDegradationReason : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT</unmanaged-short>	
        LicensingRequirement = unchecked((int)1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_TYPE']/*"/>	
    /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE</unmanaged>	
    /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE</unmanaged-short>	
    public enum TAudioDecoderDegradationType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL</unmanaged-short>	
        Downmix2channel = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL</unmanaged-short>	
        Downmix6channel = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL</unmanaged-short>	
        Downmix8channel = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies how text is aligned in its parent block element. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ALIGNMENT']/*"/>	
    /// <msdn-id>dn782325</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_ALIGNMENT</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_ALIGNMENT</unmanaged-short>	
    public enum TimedTextAlignment : int {	
        
        /// <summary>	
        /// <dd> <p>Text is aligned at the start of its parent block element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ALIGNMENT_START']/*"/>	
        /// <msdn-id>dn782325</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ALIGNMENT_START</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ALIGNMENT_START</unmanaged-short>	
        Start = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Text is aligned at the end of its parent block element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ALIGNMENT_END']/*"/>	
        /// <msdn-id>dn782325</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ALIGNMENT_END</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ALIGNMENT_END</unmanaged-short>	
        End = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Text is aligned in the center of its parent block element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ALIGNMENT_CENTER']/*"/>	
        /// <msdn-id>dn782325</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ALIGNMENT_CENTER</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ALIGNMENT_CENTER</unmanaged-short>	
        Center = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the type of  a timed text cue event.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_CUE_EVENT']/*"/>	
    /// <msdn-id>dn904197</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_CUE_EVENT</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_CUE_EVENT</unmanaged-short>	
    public enum TimedTextCueEvent : int {	
        
        /// <summary>	
        /// <dd> <p>The cue has become active.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_CUE_EVENT_ACTIVE']/*"/>	
        /// <msdn-id>dn904197</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_CUE_EVENT_ACTIVE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_CUE_EVENT_ACTIVE</unmanaged-short>	
        Active = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The cue has become inactive.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_CUE_EVENT_INACTIVE']/*"/>	
        /// <msdn-id>dn904197</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_CUE_EVENT_INACTIVE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_CUE_EVENT_INACTIVE</unmanaged-short>	
        Inactive = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>All cues have been deactivated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_CUE_EVENT_CLEAR']/*"/>	
        /// <msdn-id>dn904197</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_CUE_EVENT_CLEAR</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_CUE_EVENT_CLEAR</unmanaged-short>	
        Clear = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies how text is decorated (underlined and so on). </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DECORATION']/*"/>	
    /// <msdn-id>dn782326</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_DECORATION</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_DECORATION</unmanaged-short>	
    public enum TimedTextDecoration : int {	
        
        /// <summary>	
        /// <dd> <p>Text isn't decorated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DECORATION_NONE']/*"/>	
        /// <msdn-id>dn782326</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DECORATION_NONE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DECORATION_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Text is underlined.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DECORATION_UNDERLINE']/*"/>	
        /// <msdn-id>dn782326</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DECORATION_UNDERLINE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DECORATION_UNDERLINE</unmanaged-short>	
        Underline = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Text has a line through it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DECORATION_LINE_THROUGH']/*"/>	
        /// <msdn-id>dn782326</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DECORATION_LINE_THROUGH</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DECORATION_LINE_THROUGH</unmanaged-short>	
        LineThrough = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Text has a line over it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DECORATION_OVERLINE']/*"/>	
        /// <msdn-id>dn782326</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DECORATION_OVERLINE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DECORATION_OVERLINE</unmanaged-short>	
        Overline = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies how text is aligned with the display. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DISPLAY_ALIGNMENT']/*"/>	
    /// <msdn-id>dn782327</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_DISPLAY_ALIGNMENT</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_DISPLAY_ALIGNMENT</unmanaged-short>	
    public enum TimedTextDisplayAlignment : int {	
        
        /// <summary>	
        /// <dd> <p>Text is aligned before an element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE']/*"/>	
        /// <msdn-id>dn782327</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE</unmanaged-short>	
        Before = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Text is aligned after an element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER']/*"/>	
        /// <msdn-id>dn782327</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER</unmanaged-short>	
        After = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Text is aligned in the center between elements.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER']/*"/>	
        /// <msdn-id>dn782327</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER</unmanaged-short>	
        Center = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the kind error that occurred with a timed text track.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used to return error information  from the <strong><see cref="SharpDX.MediaFoundation.TimedTextTrack.GetErrorCode"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE']/*"/>	
    /// <msdn-id>dn859186</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE</unmanaged-short>	
    public enum TimedTextErrorCode : int {	
        
        /// <summary>	
        /// <dd> <p>No error occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE_NOERROR']/*"/>	
        /// <msdn-id>dn859186</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE_NOERROR</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE_NOERROR</unmanaged-short>	
        Noerror = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>A fatal error occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE_FATAL']/*"/>	
        /// <msdn-id>dn859186</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE_FATAL</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE_FATAL</unmanaged-short>	
        Fatal = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>An error occurred with the data format of the timed text track.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT']/*"/>	
        /// <msdn-id>dn859186</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT</unmanaged-short>	
        DataFormat = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>A network error occurred when trying to load the timed text track.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE_NETWORK']/*"/>	
        /// <msdn-id>dn859186</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE_NETWORK</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE_NETWORK</unmanaged-short>	
        Network = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>An internal error occurred.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_ERROR_CODE_INTERNAL']/*"/>	
        /// <msdn-id>dn859186</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_ERROR_CODE_INTERNAL</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_ERROR_CODE_INTERNAL</unmanaged-short>	
        Internal = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the font style of the timed text.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_FONT_STYLE']/*"/>	
    /// <msdn-id>dn782328</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_FONT_STYLE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_FONT_STYLE</unmanaged-short>	
    public enum TimedTextFontStyle : int {	
        
        /// <summary>	
        /// <dd> <p>The font style is normal, sometimes referred to as roman.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_FONT_STYLE_NORMAL']/*"/>	
        /// <msdn-id>dn782328</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_FONT_STYLE_NORMAL</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_FONT_STYLE_NORMAL</unmanaged-short>	
        Normal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The font style is oblique.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_FONT_STYLE_OBLIQUE']/*"/>	
        /// <msdn-id>dn782328</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_FONT_STYLE_OBLIQUE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_FONT_STYLE_OBLIQUE</unmanaged-short>	
        Oblique = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The font style is italic.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_FONT_STYLE_ITALIC']/*"/>	
        /// <msdn-id>dn782328</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_FONT_STYLE_ITALIC</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_FONT_STYLE_ITALIC</unmanaged-short>	
        Italic = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies how text appears when the parent element is scrolled.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_SCROLL_MODE']/*"/>	
    /// <msdn-id>dn782329</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_SCROLL_MODE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_SCROLL_MODE</unmanaged-short>	
    public enum TimedTextScrollMode : int {	
        
        /// <summary>	
        /// <dd> <p>Text pops on when the parent element is scrolled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_SCROLL_MODE_POP_ON']/*"/>	
        /// <msdn-id>dn782329</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_SCROLL_MODE_POP_ON</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_SCROLL_MODE_POP_ON</unmanaged-short>	
        PopOn = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Text rolls up when the parent element is scrolled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP']/*"/>	
        /// <msdn-id>dn782329</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP</unmanaged-short>	
        RollUp = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the kind of timed text track.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_KIND']/*"/>	
    /// <msdn-id>dn782330</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_TRACK_KIND</unmanaged-short>	
    public enum TimedTextTrackKind : int {	
        
        /// <summary>	
        /// <dd> <p>The kind of timed text track is unknown.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_KIND_UNKNOWN']/*"/>	
        /// <msdn-id>dn782330</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND_UNKNOWN</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_KIND_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The kind of timed text track is subtitles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_KIND_SUBTITLES']/*"/>	
        /// <msdn-id>dn782330</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND_SUBTITLES</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_KIND_SUBTITLES</unmanaged-short>	
        SubTitles = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The kind of timed text track is closed captions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_KIND_CAPTIONS']/*"/>	
        /// <msdn-id>dn782330</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND_CAPTIONS</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_KIND_CAPTIONS</unmanaged-short>	
        Captions = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The kind of timed text track is metadata.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_KIND_METADATA']/*"/>	
        /// <msdn-id>dn782330</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_KIND_METADATA</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_KIND_METADATA</unmanaged-short>	
        Metadata = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_READY_STATE']/*"/>	
    /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_TRACK_READY_STATE</unmanaged-short>	
    public enum TimedTextTrackReadyState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_READY_STATE_NONE']/*"/>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE_NONE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_READY_STATE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_READY_STATE_LOADING']/*"/>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE_LOADING</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_READY_STATE_LOADING</unmanaged-short>	
        Loading = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_READY_STATE_LOADED']/*"/>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE_LOADED</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_READY_STATE_LOADED</unmanaged-short>	
        Loaded = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_TRACK_READY_STATE_ERROR']/*"/>	
        /// <unmanaged>MF_TIMED_TEXT_TRACK_READY_STATE_ERROR</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_TRACK_READY_STATE_ERROR</unmanaged-short>	
        Error = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the units in which the timed text is measured.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_UNIT_TYPE']/*"/>	
    /// <msdn-id>dn782331</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_UNIT_TYPE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_UNIT_TYPE</unmanaged-short>	
    public enum TimedTextUnitType : int {	
        
        /// <summary>	
        /// <dd> <p>The timed text is measured in pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_UNIT_TYPE_PIXELS']/*"/>	
        /// <msdn-id>dn782331</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_UNIT_TYPE_PIXELS</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_UNIT_TYPE_PIXELS</unmanaged-short>	
        Pixels = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The timed text is measured as a percentage.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE']/*"/>	
        /// <msdn-id>dn782331</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE</unmanaged-short>	
        Percentage = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Specifies the sequence in which text is written on its parent element.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE']/*"/>	
    /// <msdn-id>dn782332</msdn-id>	
    /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE</unmanaged>	
    /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE</unmanaged-short>	
    public enum TimedTextWritingMode : int {	
        
        /// <summary>	
        /// <dd> <p>Text is written from left to right and top to bottom.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_LRTB']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_LRTB</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_LRTB</unmanaged-short>	
        Lrtb = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Text is written from right to left and top to bottom.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_RLTB']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_RLTB</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_RLTB</unmanaged-short>	
        Rltb = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Text is written from top to bottom and right to left.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_TBRL']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_TBRL</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_TBRL</unmanaged-short>	
        Tbrl = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Text is written from top to bottom and left to right.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_TBLR']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_TBLR</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_TBLR</unmanaged-short>	
        Tblr = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Text is written from left to right.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_LR']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_LR</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_LR</unmanaged-short>	
        Lr = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Text is written from right to left.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_RL']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_RL</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_RL</unmanaged-short>	
        Rl = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Text is written from top to bottom.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TIMED_TEXT_WRITING_MODE_TB']/*"/>	
        /// <msdn-id>dn782332</msdn-id>	
        /// <unmanaged>MF_TIMED_TEXT_WRITING_MODE_TB</unmanaged>	
        /// <unmanaged-short>MF_TIMED_TEXT_WRITING_MODE_TB</unmanaged-short>	
        Tb = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains flags for the <strong><see cref="SharpDX.MediaFoundation.Timer.SetTimer_"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTIMER_FLAGS']/*"/>	
    /// <msdn-id>ms703005</msdn-id>	
    /// <unmanaged>MFTIMER_FLAGS</unmanaged>	
    /// <unmanaged-short>MFTIMER_FLAGS</unmanaged-short>	
    [Flags]
    public enum TimerFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTIMER_RELATIVE']/*"/>	
        /// <msdn-id>ms703005</msdn-id>	
        /// <unmanaged>MFTIMER_RELATIVE</unmanaged>	
        /// <unmanaged-short>MFTIMER_RELATIVE</unmanaged-short>	
        Relative = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines messages for a Media Foundation transform (MFT). To send a message to an MFT, call <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessMessage"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Some messages require specific actions from the MFT. These events have "MESSAGE" in the message name. Other messages are informational; they notify the MFT of some action by the client, and do not require any particular response from the MFT. These messages have "NOTIFY" in the messages name. Except where noted, an MFT should not rely on the client sending notification messages.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_TYPE']/*"/>	
    /// <msdn-id>ms697223</msdn-id>	
    /// <unmanaged>MFT_MESSAGE_TYPE</unmanaged>	
    /// <unmanaged-short>MFT_MESSAGE_TYPE</unmanaged-short>	
    public enum TMessageType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_FLUSH']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_FLUSH</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_FLUSH</unmanaged-short>	
        CommandFlush = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_DRAIN']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_DRAIN</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_DRAIN</unmanaged-short>	
        CommandDrain = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_SET_D3D_MANAGER']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_SET_D3D_MANAGER</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_SET_D3D_MANAGER</unmanaged-short>	
        SetD3DManager = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_DROP_SAMPLES']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_DROP_SAMPLES</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_DROP_SAMPLES</unmanaged-short>	
        DropSamples = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_TICK']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_TICK</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_TICK</unmanaged-short>	
        CommandTick = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_BEGIN_STREAMING']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_BEGIN_STREAMING</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_BEGIN_STREAMING</unmanaged-short>	
        NotifyBeginStreaming = unchecked((int)268435456),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_END_STREAMING']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_END_STREAMING</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_END_STREAMING</unmanaged-short>	
        NotifyEndStreaming = unchecked((int)268435457),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_END_OF_STREAM']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_END_OF_STREAM</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_END_OF_STREAM</unmanaged-short>	
        NotifyEndOfStream = unchecked((int)268435458),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_START_OF_STREAM']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_START_OF_STREAM</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_START_OF_STREAM</unmanaged-short>	
        NotifyStartOfStream = unchecked((int)268435459),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES</unmanaged-short>	
        NotifyReleaseResources = unchecked((int)268435460),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES</unmanaged-short>	
        NotifyReacquireResources = unchecked((int)268435461),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_NOTIFY_EVENT']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_NOTIFY_EVENT</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_NOTIFY_EVENT</unmanaged-short>	
        NotifyEvent = unchecked((int)268435462),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE</unmanaged-short>	
        CommandSetOutputStreamState = unchecked((int)268435463),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM</unmanaged-short>	
        CommandFlushOutputStream = unchecked((int)268435464),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_MESSAGE_COMMAND_MARKER']/*"/>	
        /// <msdn-id>ms697223</msdn-id>	
        /// <unmanaged>MFT_MESSAGE_COMMAND_MARKER</unmanaged>	
        /// <unmanaged-short>MFT_MESSAGE_COMMAND_MARKER</unmanaged-short>	
        CommandMarker = unchecked((int)536870912),			
    }
    
    /// <summary>	
    /// <p>Specifies whether the topology loader enables Microsoft DirectX Video Acceleration (DXVA) in the topology.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <see cref="SharpDX.MediaFoundation.TopologyAttributeKeys.DXVAMode"/> topology attribute.</p><p>If an MFT supports DXVA, the MFT must return <strong>TRUE</strong> for the <strong><see cref="SharpDX.MediaFoundation.TransformAttributeKeys.D3DAware"/></strong> attribute. To enable DXVA, the topology loader calls <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessMessage"/></strong> on the MFT, passing the MFT a reference to the <strong>IDirect3DDeviceManager9</strong> interface. The topology loader gets the <strong>IDirect3DDeviceManager9</strong> reference from the media sink for the video stream. Typically the enhanced video renderer (EVR) is the media sink.</p><p>Previous versions of Microsoft Media Foundation supported DXVA only for decoders.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_DXVA_MODE']/*"/>	
    /// <msdn-id>dd388653</msdn-id>	
    /// <unmanaged>MFTOPOLOGY_DXVA_MODE</unmanaged>	
    /// <unmanaged-short>MFTOPOLOGY_DXVA_MODE</unmanaged-short>	
    public enum TopologyDxvaMode : int {	
        
        /// <summary>	
        /// <dd> <p>The topology loader enables DXVA	
        /// on the decoder if possible, and drops optional Media Foundation transforms (MFTs) that do not support DXVA.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_DXVA_DEFAULT']/*"/>	
        /// <msdn-id>dd388653</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_DXVA_DEFAULT</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_DXVA_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The topology loader disables all video acceleration. This setting forces software processing, even when the decoder supports DXVA.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_DXVA_NONE']/*"/>	
        /// <msdn-id>dd388653</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_DXVA_NONE</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_DXVA_NONE</unmanaged-short>	
        None = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The topology loader enables DXVA on every MFT that supports it.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_DXVA_FULL']/*"/>	
        /// <msdn-id>dd388653</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_DXVA_FULL</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_DXVA_FULL</unmanaged-short>	
        Full = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies whether the topology loader will insert hardware-based Media Foundation transforms (MFTs) into the topology.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enumeration is used with the <see cref="SharpDX.MediaFoundation.TopologyAttributeKeys.HardwareMode"/> topology attribute. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_HARDWARE_MODE']/*"/>	
    /// <msdn-id>dd388654</msdn-id>	
    /// <unmanaged>MFTOPOLOGY_HARDWARE_MODE</unmanaged>	
    /// <unmanaged-short>MFTOPOLOGY_HARDWARE_MODE</unmanaged-short>	
    public enum TopologyHardwareMode : int {	
        
        /// <summary>	
        /// <dd> <p>Use only software  MFTs. Do not use hardware-based MFTs. This mode is the default, for backward compatibility with existing applications.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_HWMODE_SOFTWARE_ONLY']/*"/>	
        /// <msdn-id>dd388654</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_HWMODE_SOFTWARE_ONLY</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_HWMODE_SOFTWARE_ONLY</unmanaged-short>	
        WmodeSoftwareOnly = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Use hardware-based MFTs when possible, and software MFTs otherwise. This mode is the recommended one.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_HWMODE_USE_HARDWARE']/*"/>	
        /// <msdn-id>dd388654</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_HWMODE_USE_HARDWARE</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_HWMODE_USE_HARDWARE</unmanaged-short>	
        WmodeUseHardware = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>If hardware-based MFTs are available, the topoloader will insert them.  If not, the connection will fail.</p> <p>Supported in Windows?8.1 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE']/*"/>	
        /// <msdn-id>dd388654</msdn-id>	
        /// <unmanaged>MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE</unmanaged>	
        /// <unmanaged-short>MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE</unmanaged-short>	
        WmodeUseOnlyHardware = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines status flags for the <strong><see cref="SharpDX.MediaFoundation.TopologyAttributeKeys.ResolutionStatus"/></strong> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS']/*"/>	
    /// <msdn-id>ms704637</msdn-id>	
    /// <unmanaged>MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS</unmanaged-short>	
    [Flags]
    public enum TopologyResolutionStatusFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_RESOLUTION_SUCCEEDED']/*"/>	
        /// <msdn-id>ms704637</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_RESOLUTION_SUCCEEDED</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_RESOLUTION_SUCCEEDED</unmanaged-short>	
        MfTopologyResolutionSucceeded = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE']/*"/>	
        /// <msdn-id>ms704637</msdn-id>	
        /// <unmanaged>MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE</unmanaged>	
        /// <unmanaged-short>MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE</unmanaged-short>	
        MfOptionalNodeRejectedMediaType = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS']/*"/>	
        /// <msdn-id>ms704637</msdn-id>	
        /// <unmanaged>MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS</unmanaged>	
        /// <unmanaged-short>MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS</unmanaged-short>	
        MfOptionalNodeRejectedProtectedProcess = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Specifies the status of a topology during playback. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enumeration is used with the <see cref="SharpDX.MediaFoundation.MediaEventTypes.SessionTopologyStatus"/> event. The <see cref="SharpDX.MediaFoundation.MediaEventTypes.SessionTopologyStatus"/> event always has an <strong><see cref="SharpDX.MediaFoundation.EventAttributeKeys.TopologyStatus"/></strong> attribute whose value is a member of this enumeration. </p><p> For a single topology, the Media Session sends these status flags in numerical order, starting with <strong><see cref="SharpDX.MediaFoundation.TopologyStatus.Ready"/></strong>. However, there is no guarantee about the ordering of the events across two different topologies. For example, you might get <strong><see cref="SharpDX.MediaFoundation.TopologyStatus.Ready"/></strong> for a topology before you get <strong><see cref="SharpDX.MediaFoundation.TopologyStatus.Ended"/></strong> for the previous topology. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS']/*"/>	
    /// <msdn-id>aa370812</msdn-id>	
    /// <unmanaged>MF_TOPOSTATUS</unmanaged>	
    /// <unmanaged-short>MF_TOPOSTATUS</unmanaged-short>	
    public enum TopologyStatus : int {	
        
        /// <summary>	
        /// <dd> <p> This value is not used. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_INVALID']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_INVALID</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_INVALID</unmanaged-short>	
        Invalid = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The topology is ready to start. After this status flag is received, you can use the Media Session's <strong><see cref="SharpDX.MediaFoundation.ServiceProvider.GetService"/></strong> method to query the topology for services, such as rate control. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_READY']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_READY</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_READY</unmanaged-short>	
        Ready = unchecked((int)100),			
        
        /// <summary>	
        /// <dd> <p> The Media Session has started to read data from the media sources in the topology. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_STARTED_SOURCE']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_STARTED_SOURCE</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_STARTED_SOURCE</unmanaged-short>	
        StartedSource = unchecked((int)200),			
        
        /// <summary>	
        /// <dd> <p>The Media Session modified the topology, because the format of a stream changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_DYNAMIC_CHANGED']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_DYNAMIC_CHANGED</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_DYNAMIC_CHANGED</unmanaged-short>	
        DynamicChanged = unchecked((int)210),			
        
        /// <summary>	
        /// <dd> <p> The media sinks have switched from the previous topology to this topology. This status value is not sent for the first topology that is played. For the first topology, the <see cref="SharpDX.MediaFoundation.MediaEventTypes.SessionStarted"/> event indicates that the media sinks have started receiving data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_SINK_SWITCHED']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_SINK_SWITCHED</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_SINK_SWITCHED</unmanaged-short>	
        SinkSwitched = unchecked((int)300),			
        
        /// <summary>	
        /// <dd> <p> Playback of this topology is complete. The Media Session might still use the topology internally. The Media Session does not completely release the topology until it sends the next <strong><see cref="SharpDX.MediaFoundation.TopologyStatus.StartedSource"/></strong> status event or the <see cref="SharpDX.MediaFoundation.MediaEventTypes.SessionEnded"/> event. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOSTATUS_ENDED']/*"/>	
        /// <msdn-id>aa370812</msdn-id>	
        /// <unmanaged>MF_TOPOSTATUS_ENDED</unmanaged>	
        /// <unmanaged-short>MF_TOPOSTATUS_ENDED</unmanaged-short>	
        Ended = unchecked((int)400),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines the type of a topology node.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_TYPE']/*"/>	
    /// <msdn-id>ms698973</msdn-id>	
    /// <unmanaged>MF_TOPOLOGY_TYPE</unmanaged>	
    /// <unmanaged-short>MF_TOPOLOGY_TYPE</unmanaged-short>	
    public enum TopologyType : int {	
        
        /// <summary>	
        /// <dd> <p>Output node. Represents a media sink in the topology.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_OUTPUT_NODE']/*"/>	
        /// <msdn-id>ms698973</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_OUTPUT_NODE</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_OUTPUT_NODE</unmanaged-short>	
        OutputNode = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Source node. Represents a media stream in the topology.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_SOURCESTREAM_NODE']/*"/>	
        /// <msdn-id>ms698973</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_SOURCESTREAM_NODE</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_SOURCESTREAM_NODE</unmanaged-short>	
        SourceStreamNode = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Transform node. Represents a Media Foundation Transform (MFT) in the topology.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_TRANSFORM_NODE']/*"/>	
        /// <msdn-id>ms698973</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_TRANSFORM_NODE</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_TRANSFORM_NODE</unmanaged-short>	
        TransformNode = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Tee node. A tee node does not hold a reference to an object. Instead, it represents a fork in the stream. A tee node has one input and multiple outputs, and samples from the upstream node are delivered to all of the downstream nodes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_TEE_NODE']/*"/>	
        /// <msdn-id>ms698973</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_TEE_NODE</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_TEE_NODE</unmanaged-short>	
        TeeNode = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPOLOGY_MAX']/*"/>	
        /// <msdn-id>ms698973</msdn-id>	
        /// <unmanaged>MF_TOPOLOGY_MAX</unmanaged>	
        /// <unmanaged-short>MF_TOPOLOGY_MAX</unmanaged-short>	
        Maximum = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines at what times a transform in a topology is drained.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_DRAIN_MODE']/*"/>	
    /// <msdn-id>aa370822</msdn-id>	
    /// <unmanaged>MF_TOPONODE_DRAIN_MODE</unmanaged>	
    /// <unmanaged-short>MF_TOPONODE_DRAIN_MODE</unmanaged-short>	
    public enum ToponodeDrainMode : int {	
        
        /// <summary>	
        /// <dd> <p>The transform is drained when the end of a stream is reached. It is not drained when markout is reached at the end of a segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_DRAIN_DEFAULT']/*"/>	
        /// <msdn-id>aa370822</msdn-id>	
        /// <unmanaged>MF_TOPONODE_DRAIN_DEFAULT</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_DRAIN_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The transform is drained whenever a topology ends.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_DRAIN_ALWAYS']/*"/>	
        /// <msdn-id>aa370822</msdn-id>	
        /// <unmanaged>MF_TOPONODE_DRAIN_ALWAYS</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_DRAIN_ALWAYS</unmanaged-short>	
        Always = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The transform is never drained.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_DRAIN_NEVER']/*"/>	
        /// <msdn-id>aa370822</msdn-id>	
        /// <unmanaged>MF_TOPONODE_DRAIN_NEVER</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_DRAIN_NEVER</unmanaged-short>	
        Never = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines when a transform in a topology is flushed.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_FLUSH_MODE']/*"/>	
    /// <msdn-id>ms704760</msdn-id>	
    /// <unmanaged>MF_TOPONODE_FLUSH_MODE</unmanaged>	
    /// <unmanaged-short>MF_TOPONODE_FLUSH_MODE</unmanaged-short>	
    public enum ToponodeFlushMode : int {	
        
        /// <summary>	
        /// <dd> <p>The transform is flushed whenever the stream changes, including seeks and new segments.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_FLUSH_ALWAYS']/*"/>	
        /// <msdn-id>ms704760</msdn-id>	
        /// <unmanaged>MF_TOPONODE_FLUSH_ALWAYS</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_FLUSH_ALWAYS</unmanaged-short>	
        Always = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The transform is flushed when seeking is performed on the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_FLUSH_SEEK']/*"/>	
        /// <msdn-id>ms704760</msdn-id>	
        /// <unmanaged>MF_TOPONODE_FLUSH_SEEK</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_FLUSH_SEEK</unmanaged-short>	
        Seek = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The transform is never flushed during streaming. It is flushed only when the object is released.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TOPONODE_FLUSH_NEVER']/*"/>	
        /// <msdn-id>ms704760</msdn-id>	
        /// <unmanaged>MF_TOPONODE_FLUSH_NEVER</unmanaged>	
        /// <unmanaged-short>MF_TOPONODE_FLUSH_NEVER</unmanaged-short>	
        Never = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the profile flags that are set in the <see cref="SharpDX.MediaFoundation.TranscodeAttributeKeys.TranscodeAdjustProfile"/> attribute.</p><p>These flags are checked by <strong><see cref="SharpDX.MediaFoundation.MediaFactory.CreateTranscodeTopology"/></strong> during topology building. Based on these flags, <strong><see cref="SharpDX.MediaFoundation.MediaFactory.CreateTranscodeTopology"/></strong> adjusts the  transcode profile by modifying the configuration settings for the streams according to the input requirements of the encoder used in the topology. </p><p>For more information about the stream settings that an application can specify, see Using the Transcode API.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the <strong><see cref="SharpDX.MediaFoundation.TranscodeAdjustProfileFlags.Default"/></strong> flag is specified, the following changes are made for the video stream:</p><ul> <li>If the frame rate of the media source specified in the <em>pSrc</em> parameter of  <strong><see cref="SharpDX.MediaFoundation.MediaFactory.CreateTranscodeTopology"/></strong> and the frame rate specified by the application in the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.FrameRate"/></strong> attribute differ by less than 1/1000, the profile uses the media source frame rate. This is because the pipeline considers the difference to be negligible.</li> <li>If the application does not specify an interlaced mode by setting the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.InterlaceMode"/></strong> attribute, the profile is changed to use progressive frames.</li> </ul><p>The <strong><see cref="SharpDX.MediaFoundation.TranscodeAdjustProfileFlags.Default"/></strong> flag must be accompanied with the required audio and video stream attributes provided by the application. For the audio stream, the required attributes are as follows:</p><ul> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioNumChannels"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioSamplesPerSecond"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioBlockAlignment"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioAvgBytesPerSecond"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioBitsPerSample"/></strong> </li> </ul><p> For the video stream, the required attributes are as follows:</p><ul> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.FrameRate"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.FrameSize"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AvgBitrate"/></strong> </li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PixelAspectRatio"/></strong> </li> </ul><p> If these attributes are not set, <strong><see cref="SharpDX.MediaFoundation.MediaFactory.CreateTranscodeTopology"/></strong> creates the topology but Media Session fails to generate the encoded file. The failure code depends on the MFT node in the topology. For example, if the application does not set the frame size, the WMV encoder fails to encode the content and application gets the <see cref="SharpDX.MediaFoundation.ResultCode.InvalidMediaType"/> error code through the Media Session.  </p><p>Use the <strong><see cref="SharpDX.MediaFoundation.TranscodeAdjustProfileFlags.UseSourceAttributes"/></strong> flag when you want to transcode the file by using the input stream attributes. The input source stream attributes are copied to the output media type before the MFT node is inserted in the topology. If you set additional stream attributes, this flag does not overwrite the set values. Only the missing attributes are filled with the input source's attribute values. This flag is useful in remux scenario where you want to generate the output file in the same format as the input source. If you want to perform format conversion, make sure you set the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Subtype"/></strong> attribute for the stream to specify the encoder that topology builder must use. The transform node is added in the topology unless <see cref="SharpDX.MediaFoundation.TranscodeAttributeKeys.TranscodeDonotInsertEncoder"/> is set. In this case, and the content is not encoded. Instead, if permitted by the container, the content is embedded in the specified container. </p><p>For example, assume that your input source is an MP3 file.  You set the container to be <strong><see cref="SharpDX.MediaFoundation.TranscodeContainerTypeGuids.Asf"/></strong>, you do not set any stream attributes, and you set the <strong><see cref="SharpDX.MediaFoundation.TranscodeAdjustProfileFlags.UseSourceAttributes"/></strong> flag. In this case, the generated output file is an ASF file (.wma)  containing MP3 media data. Note that if you use this flag, certain input stream attributes and the container type might not be compatible. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_ADJUST_PROFILE_FLAGS']/*"/>	
    /// <msdn-id>dd388918</msdn-id>	
    /// <unmanaged>MF_TRANSCODE_ADJUST_PROFILE_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_TRANSCODE_ADJUST_PROFILE_FLAGS</unmanaged-short>	
    [Flags]
    public enum TranscodeAdjustProfileFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_ADJUST_PROFILE_DEFAULT']/*"/>	
        /// <msdn-id>dd388918</msdn-id>	
        /// <unmanaged>MF_TRANSCODE_ADJUST_PROFILE_DEFAULT</unmanaged>	
        /// <unmanaged-short>MF_TRANSCODE_ADJUST_PROFILE_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES']/*"/>	
        /// <msdn-id>dd388918</msdn-id>	
        /// <unmanaged>MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES</unmanaged>	
        /// <unmanaged-short>MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES</unmanaged-short>	
        UseSourceAttributes = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines flags for the <see cref="SharpDX.MediaFoundation.TranscodeAttributeKeys.TranscodeTopologymode"/> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_TOPOLOGYMODE_FLAGS']/*"/>	
    /// <msdn-id>dd388926</msdn-id>	
    /// <unmanaged>MF_TRANSCODE_TOPOLOGYMODE_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_TRANSCODE_TOPOLOGYMODE_FLAGS</unmanaged-short>	
    [Flags]
    public enum TranscodeTopologymodeFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY']/*"/>	
        /// <msdn-id>dd388926</msdn-id>	
        /// <unmanaged>MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY</unmanaged>	
        /// <unmanaged-short>MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY</unmanaged-short>	
        SoftwareOnly = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED']/*"/>	
        /// <msdn-id>dd388926</msdn-id>	
        /// <unmanaged>MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED</unmanaged>	
        /// <unmanaged-short>MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED</unmanaged-short>	
        HardwareAllowEd = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSFER_VIDEO_FRAME_FLAGS']/*"/>	
    /// <unmanaged>MF_TRANSFER_VIDEO_FRAME_FLAGS</unmanaged>	
    /// <unmanaged-short>MF_TRANSFER_VIDEO_FRAME_FLAGS</unmanaged-short>	
    [Flags]
    public enum TransferVideoFrameFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSFER_VIDEO_FRAME_DEFAULT']/*"/>	
        /// <unmanaged>MF_TRANSFER_VIDEO_FRAME_DEFAULT</unmanaged>	
        /// <unmanaged-short>MF_TRANSFER_VIDEO_FRAME_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSFER_VIDEO_FRAME_STRETCH']/*"/>	
        /// <unmanaged>MF_TRANSFER_VIDEO_FRAME_STRETCH</unmanaged>	
        /// <unmanaged-short>MF_TRANSFER_VIDEO_FRAME_STRETCH</unmanaged-short>	
        Stretch = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR']/*"/>	
        /// <unmanaged>MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR</unmanaged>	
        /// <unmanaged-short>MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR</unmanaged-short>	
        IgnorePar = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Contains flags for registering and enumeration Media Foundation transforms (MFTs).</p><p>These flags are used in the following functions:</p><ul> <li> <strong><see cref="SharpDX.MediaFoundation.MediaFactory.TEnumEx"/></strong>: These flags control which Media Foundation transforms (MFTs) are enumerated, as well as the enumeration order.</li> <li> <strong><see cref="SharpDX.MediaFoundation.MediaFactory.TRegister"/></strong>: A subset of these flags are used when registering an MFT.</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>For registration, these flags describe the MFT that is being registered. Some flags do not apply in that context. For enumeration, these flags control which MFTs are selected in the enumeration. For more details about the precise meaning of these flags, see the reference topics for <strong><see cref="SharpDX.MediaFoundation.MediaFactory.TRegister"/></strong> and <strong><see cref="SharpDX.MediaFoundation.MediaFactory.TEnumEx"/></strong> </p><p>For registration, the <strong><see cref="SharpDX.MediaFoundation.TransformEnumFlag.Syncmft"/></strong>,  <strong><see cref="SharpDX.MediaFoundation.TransformEnumFlag.Asyncmft"/></strong>, and <strong><see cref="SharpDX.MediaFoundation.TransformEnumFlag.Hardware"/></strong> flags are mutually exclusive. For enumeration, these three flags can be combined.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_ENUM_FLAG']/*"/>	
    /// <msdn-id>dd389302</msdn-id>	
    /// <unmanaged>_MFT_ENUM_FLAG</unmanaged>	
    /// <unmanaged-short>_MFT_ENUM_FLAG</unmanaged-short>	
    [Flags]
    public enum TransformEnumFlag : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_SYNCMFT']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_SYNCMFT</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_SYNCMFT</unmanaged-short>	
        Syncmft = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_ASYNCMFT']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_ASYNCMFT</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_ASYNCMFT</unmanaged-short>	
        Asyncmft = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_HARDWARE']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_HARDWARE</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_HARDWARE</unmanaged-short>	
        Hardware = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_FIELDOFUSE']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_FIELDOFUSE</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_FIELDOFUSE</unmanaged-short>	
        Fieldofuse = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_LOCALMFT']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_LOCALMFT</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_LOCALMFT</unmanaged-short>	
        Localmft = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_TRANSCODE_ONLY']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_TRANSCODE_ONLY</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_TRANSCODE_ONLY</unmanaged-short>	
        TranscodeOnly = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_SORTANDFILTER']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_SORTANDFILTER</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_SORTANDFILTER</unmanaged-short>	
        SortAndFilter = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY</unmanaged-short>	
        SortAndFilterApprovedOnly = unchecked((int)192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY</unmanaged-short>	
        SortAndFilterWebOnly = unchecked((int)320),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE</unmanaged-short>	
        SortAndFilterWebOnlyEdgemode = unchecked((int)576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_UNTRUSTED_STOREMFT']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_UNTRUSTED_STOREMFT</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_UNTRUSTED_STOREMFT</unmanaged-short>	
        UntrustedStoremft = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_ENUM_FLAG_ALL']/*"/>	
        /// <msdn-id>dd389302</msdn-id>	
        /// <unmanaged>MFT_ENUM_FLAG_ALL</unmanaged>	
        /// <unmanaged-short>MFT_ENUM_FLAG_ALL</unmanaged-short>	
        All = unchecked((int)63),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Defines flags for processing output samples in a Media Foundation transform (MFT).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_PROCESS_OUTPUT_FLAGS']/*"/>	
    /// <msdn-id>ms700163</msdn-id>	
    /// <unmanaged>_MFT_PROCESS_OUTPUT_FLAGS</unmanaged>	
    /// <unmanaged-short>_MFT_PROCESS_OUTPUT_FLAGS</unmanaged-short>	
    [Flags]
    public enum TransformProcessOutputFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Do not produce output for streams in which the <strong>pSample</strong> member of the <strong><see cref="SharpDX.MediaFoundation.TOutputDataBuffer"/></strong> structure is <strong><c>null</c></strong>. This flag is not valid unless the MFT has marked the output stream with the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamDiscardable"/> or <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamLazyRead"/> flag. For more information, see <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER']/*"/>	
        /// <msdn-id>ms700163</msdn-id>	
        /// <unmanaged>MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</unmanaged>	
        /// <unmanaged-short>MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</unmanaged-short>	
        MftProcessOutputDiscardWhenNoBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Regenerates the last output sample.</p> <p><strong>Note</strong> Requires Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT']/*"/>	
        /// <msdn-id>ms700163</msdn-id>	
        /// <unmanaged>MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT</unmanaged>	
        /// <unmanaged-short>MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT</unmanaged-short>	
        MftProcessOutputRegenerateLastOutput = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Indicates the status of a call to <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the MFT sets this flag, the <strong>ProcessOutput</strong> method returns <see cref="SharpDX.MediaFoundation.ResultCode.TransformStreamChange"/> and no output data is produced. The client should respond as follows:</p><ol> <li> <p>Call <strong><see cref="SharpDX.MediaFoundation.Transform.GetStreamCount"/></strong> to get the new number of streams.</p> </li> <li> <p>Call <strong><see cref="SharpDX.MediaFoundation.Transform.GetStreamIDs"/></strong> to get the new stream identifiers.</p> </li> <li> <p>Call <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputAvailableType"/></strong> and <strong><see cref="SharpDX.MediaFoundation.Transform.SetOutputType"/></strong> to set the media types on the new streams.</p> </li> </ol><p>Until these steps are completed, all further calls to <strong>ProcessOutput</strong> return <see cref="SharpDX.MediaFoundation.ResultCode.TransformStreamChange"/>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MFT_PROCESS_OUTPUT_STATUS']/*"/>	
    /// <msdn-id>ms699875</msdn-id>	
    /// <unmanaged>_MFT_PROCESS_OUTPUT_STATUS</unmanaged>	
    /// <unmanaged-short>_MFT_PROCESS_OUTPUT_STATUS</unmanaged-short>	
    public enum TransformProcessOutputStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS']/*"/>	
        /// <msdn-id>ms699875</msdn-id>	
        /// <unmanaged>MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS</unmanaged>	
        /// <unmanaged-short>MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS</unmanaged-short>	
        MftProcessOutputStatusNewStreams = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p> </p><p>Indicates whether the URL is from a trusted source.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_URL_TRUST_STATUS']/*"/>	
    /// <msdn-id>ms705652</msdn-id>	
    /// <unmanaged>MF_URL_TRUST_STATUS</unmanaged>	
    /// <unmanaged-short>MF_URL_TRUST_STATUS</unmanaged-short>	
    public enum UrlTrustStatus : int {	
        
        /// <summary>	
        /// <dd> <p>The validity of the URL cannot be guaranteed because it is not signed. The application should warn the user.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LICENSE_URL_UNTRUSTED']/*"/>	
        /// <msdn-id>ms705652</msdn-id>	
        /// <unmanaged>MF_LICENSE_URL_UNTRUSTED</unmanaged>	
        /// <unmanaged-short>MF_LICENSE_URL_UNTRUSTED</unmanaged-short>	
        MfLicenseUrlUntrusted = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The URL is the original one provided with the content.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LICENSE_URL_TRUSTED']/*"/>	
        /// <msdn-id>ms705652</msdn-id>	
        /// <unmanaged>MF_LICENSE_URL_TRUSTED</unmanaged>	
        /// <unmanaged-short>MF_LICENSE_URL_TRUSTED</unmanaged-short>	
        MfLicenseUrlTrusted = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The URL was originally signed and has been tampered with. The file should be considered corrupted, and the application should not navigate to the URL without issuing a strong warning the user.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LICENSE_URL_TAMPERED']/*"/>	
        /// <msdn-id>ms705652</msdn-id>	
        /// <unmanaged>MF_LICENSE_URL_TAMPERED</unmanaged>	
        /// <unmanaged-short>MF_LICENSE_URL_TAMPERED</unmanaged-short>	
        MfLicenseUrlTampered = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies how 3D video frames are stored in memory.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Video3dFormat"/> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DFormat']/*"/>	
    /// <msdn-id>hh162802</msdn-id>	
    /// <unmanaged>MFVideo3DFormat</unmanaged>	
    /// <unmanaged-short>MFVideo3DFormat</unmanaged-short>	
    public enum Video3DFormat : int {	
        
        /// <summary>	
        /// <dd> <p>The base view is stored in a single buffer. The other view is discarded.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DSampleFormat_BaseView']/*"/>	
        /// <msdn-id>hh162802</msdn-id>	
        /// <unmanaged>MFVideo3DSampleFormat_BaseView</unmanaged>	
        /// <unmanaged-short>MFVideo3DSampleFormat_BaseView</unmanaged-short>	
        SampleFormatBaseView = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Each media sample contains multiple buffers, one for each view.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DSampleFormat_MultiView']/*"/>	
        /// <msdn-id>hh162802</msdn-id>	
        /// <unmanaged>MFVideo3DSampleFormat_MultiView</unmanaged>	
        /// <unmanaged-short>MFVideo3DSampleFormat_MultiView</unmanaged-short>	
        SampleFormatMultiView = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Each media sample contains one buffer, with both views packed side-by-side into a single frame. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DSampleFormat_Packed_LeftRight']/*"/>	
        /// <msdn-id>hh162802</msdn-id>	
        /// <unmanaged>MFVideo3DSampleFormat_Packed_LeftRight</unmanaged>	
        /// <unmanaged-short>MFVideo3DSampleFormat_Packed_LeftRight</unmanaged-short>	
        SampleFormatPackedLeftRight = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Each media sample contains one buffer, with both views packed top-and-bottom into a single frame. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DSampleFormat_Packed_TopBottom']/*"/>	
        /// <msdn-id>hh162802</msdn-id>	
        /// <unmanaged>MFVideo3DSampleFormat_Packed_TopBottom</unmanaged>	
        /// <unmanaged-short>MFVideo3DSampleFormat_Packed_TopBottom</unmanaged-short>	
        SampleFormatPackedTopBottom = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies how to  output a 3D stereoscopic video stream.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <see cref="SharpDX.MediaFoundation.TransformAttributeKeys.Enable3dvideoOutput"/> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF3DVideoOutputType']/*"/>	
    /// <msdn-id>hh162743</msdn-id>	
    /// <unmanaged>MF3DVideoOutputType</unmanaged>	
    /// <unmanaged-short>MF3DVideoOutputType</unmanaged-short>	
    public enum Video3DOutputType : int {	
        
        /// <summary>	
        /// <dd> <p>Output the base view only. Discard the other view.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF3DVideoOutputType_BaseView']/*"/>	
        /// <msdn-id>hh162743</msdn-id>	
        /// <unmanaged>MF3DVideoOutputType_BaseView</unmanaged>	
        /// <unmanaged-short>MF3DVideoOutputType_BaseView</unmanaged-short>	
        BaseView = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Output a stereo view (two buffers).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF3DVideoOutputType_Stereo']/*"/>	
        /// <msdn-id>hh162743</msdn-id>	
        /// <unmanaged>MF3DVideoOutputType_Stereo</unmanaged>	
        /// <unmanaged-short>MF3DVideoOutputType_Stereo</unmanaged-short>	
        Stereo = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how a 3D video frame is stored in a media sample.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <see cref="SharpDX.MediaFoundation.SampleAttributeKeys.Video3DSampleFormat"/> attribute.</p><p>The exact layout of the views in memory is specified by the following media type attributes:</p><ul> <li> <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Video3dFormat"/> </li> <li> <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Video3dFirstIsLeft"/> </li> <li> <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Video3dLeftIsBase"/> </li> <li> <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.Video3dNumViews"/> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideo3DSampleFormat']/*"/>	
    /// <msdn-id>hh162803</msdn-id>	
    /// <unmanaged>MFVideo3DSampleFormat</unmanaged>	
    /// <unmanaged-short>MFVideo3DSampleFormat</unmanaged-short>	
    public enum Video3DSampleFormat : int {	
        
        /// <summary>	
        /// <dd> <p>Each view is stored in a separate buffer. The sample contains one buffer per view.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSampleExtension_3DVideo_MultiView']/*"/>	
        /// <msdn-id>hh162803</msdn-id>	
        /// <unmanaged>MFSampleExtension_3DVideo_MultiView</unmanaged>	
        /// <unmanaged-short>MFSampleExtension_3DVideo_MultiView</unmanaged-short>	
        MFSampleExtension3DVideoMultiView = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>All of the views are stored in the same buffer. The sample contains a single buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFSampleExtension_3DVideo_Packed']/*"/>	
        /// <msdn-id>hh162803</msdn-id>	
        /// <unmanaged>MFSampleExtension_3DVideo_Packed</unmanaged>	
        /// <unmanaged-short>MFSampleExtension_3DVideo_Packed</unmanaged-short>	
        MFSampleExtension3DVideoPacked = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies the aspect-ratio mode.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoAspectRatioMode']/*"/>	
    /// <msdn-id>ms703040</msdn-id>	
    /// <unmanaged>MFVideoAspectRatioMode</unmanaged>	
    /// <unmanaged-short>MFVideoAspectRatioMode</unmanaged-short>	
    public enum VideoAspectRatioMode : int {	
        
        /// <summary>	
        /// <dd> <p>Do not maintain the aspect ratio of the video. Stretch the video to fit the output rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoARMode_None']/*"/>	
        /// <msdn-id>ms703040</msdn-id>	
        /// <unmanaged>MFVideoARMode_None</unmanaged>	
        /// <unmanaged-short>MFVideoARMode_None</unmanaged-short>	
        RModeNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Preserve the aspect ratio of the video by letterboxing or within the output rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoARMode_PreservePicture']/*"/>	
        /// <msdn-id>ms703040</msdn-id>	
        /// <unmanaged>MFVideoARMode_PreservePicture</unmanaged>	
        /// <unmanaged-short>MFVideoARMode_PreservePicture</unmanaged-short>	
        RModePreservePicture = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <strong>Note</strong>??Currently the EVR ignores this flag. ? <p>Correct the aspect ratio if the physical size of the display device does not match the display resolution. For example, if the native resolution of the monitor is 1600 by 1200 (4:3) but the display resolution is 1280 by 1024 (5:4), the monitor will display non-square pixels.</p> <p>If this flag is set, you must also set the <strong><see cref="SharpDX.MediaFoundation.VideoAspectRatioMode.RModePreservePicture"/></strong> flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoARMode_PreservePixel']/*"/>	
        /// <msdn-id>ms703040</msdn-id>	
        /// <unmanaged>MFVideoARMode_PreservePixel</unmanaged>	
        /// <unmanaged-short>MFVideoARMode_PreservePixel</unmanaged-short>	
        RModePreservePixel = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Apply a non-linear horizontal stretch if the aspect ratio of the destination rectangle does not match the aspect ratio of the source rectangle.</p> <p>The non-linear stretch algorithm preserves the aspect ratio in the middle of the picture and stretches (or shrinks) the image progressively more toward the left and right. This mode is useful when viewing 4:3 content full-screen on a 16:9 display, instead of pillar-boxing. Non-linear vertical stretch is not supported, because the visual results are generally poor.</p> <p>This mode may cause performance degradation.</p> <p>If this flag is set, you must also set the <strong><see cref="SharpDX.MediaFoundation.VideoAspectRatioMode.RModePreservePixel"/></strong> and <strong><see cref="SharpDX.MediaFoundation.VideoAspectRatioMode.RModePreservePicture"/></strong> flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoARMode_NonLinearStretch']/*"/>	
        /// <msdn-id>ms703040</msdn-id>	
        /// <unmanaged>MFVideoARMode_NonLinearStretch</unmanaged>	
        /// <unmanaged-short>MFVideoARMode_NonLinearStretch</unmanaged-short>	
        RModeNonLinearStretch = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains flags that define the chroma encoding scheme for Y'Cb'Cr' data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These flags are used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoChromaSiting"/></strong> attribute.</p><p>For more information about these values, see the remarks for the <strong>DXVA2_VideoChromaSubSampling</strong> enumeration, which is the DirectX Video Acceleration (DXVA) equivalent of this enumeration.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling']/*"/>	
    /// <msdn-id>ms698989</msdn-id>	
    /// <unmanaged>MFVideoChromaSubsampling</unmanaged>	
    /// <unmanaged-short>MFVideoChromaSubsampling</unmanaged-short>	
    public enum VideoChromaSubsampling : int {	
        
        /// <summary>	
        /// <dd> <p>Unknown encoding scheme.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Unknown']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Chroma should be reconstructed as if the underlying video was progressive content, rather than skipping fields or applying chroma filtering to minimize artifacts from reconstructing 4:2:0 interlaced chroma.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_ProgressiveChroma']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_ProgressiveChroma</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_ProgressiveChroma</unmanaged-short>	
        ProgressiveChroma = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Chroma samples are aligned horizontally with the luma samples, or with multiples of the luma samples. If this flag is not set, chroma samples are located 1/2 pixel to the right of the corresponding luma sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Horizontally_Cosited']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Horizontally_Cosited</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Horizontally_Cosited</unmanaged-short>	
        HorizontallyCosited = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Chroma samples are aligned vertically with the luma samples, or with multiples of the luma samples. If this flag is not set, chroma samples are located 1/2 pixel down from the corresponding luma sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Vertically_Cosited']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Vertically_Cosited</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Vertically_Cosited</unmanaged-short>	
        VerticallyCosited = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The U and V planes are aligned vertically. If this flag is not set, the chroma planes are assumed to be out of phase by 1/2 chroma sample, alternating between a line of U followed by a line of V.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes</unmanaged-short>	
        VerticallyAlignedChromaPlanes = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies the chroma encoding scheme for MPEG-2 video. Chroma samples are aligned horizontally with the luma samples, but are not aligned vertically. The U and V planes are aligned vertically.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_MPEG2']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_MPEG2</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_MPEG2</unmanaged-short>	
        Mpeg2 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Specifies the chroma encoding scheme for MPEG-1 video.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_MPEG1']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_MPEG1</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_MPEG1</unmanaged-short>	
        Mpeg1 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies the chroma encoding scheme for PAL DV video.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_DV_PAL']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_DV_PAL</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_DV_PAL</unmanaged-short>	
        DvPal = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Chroma samples are aligned vertically and horizontally with the luma samples. YUV formats such as 4:4:4, 4:2:2, and 4:1:1 are always cosited in both directions and should use this flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Cosited']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Cosited</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Cosited</unmanaged-short>	
        Cosited = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_Last']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_Last</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_Last</unmanaged-short>	
        Last = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoChromaSubsampling_ForceDWORD']/*"/>	
        /// <msdn-id>ms698989</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Specifies the type of copy protection required for a video stream. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use these flags with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.DrmFlags"/></strong> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoDRMFlags']/*"/>	
    /// <msdn-id>ms698900</msdn-id>	
    /// <unmanaged>MFVideoDRMFlags</unmanaged>	
    /// <unmanaged-short>MFVideoDRMFlags</unmanaged-short>	
    public enum VideoDRMFlags : int {	
        
        /// <summary>	
        /// <dd> <p>No copy protection is required. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoDRMFlag_None']/*"/>	
        /// <msdn-id>ms698900</msdn-id>	
        /// <unmanaged>MFVideoDRMFlag_None</unmanaged>	
        /// <unmanaged-short>MFVideoDRMFlag_None</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Analog copy protection should be applied. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoDRMFlag_AnalogProtected']/*"/>	
        /// <msdn-id>ms698900</msdn-id>	
        /// <unmanaged>MFVideoDRMFlag_AnalogProtected</unmanaged>	
        /// <unmanaged-short>MFVideoDRMFlag_AnalogProtected</unmanaged-short>	
        AnalogProtected = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Digital copy protection should be applied. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoDRMFlag_DigitallyProtected']/*"/>	
        /// <msdn-id>ms698900</msdn-id>	
        /// <unmanaged>MFVideoDRMFlag_DigitallyProtected</unmanaged>	
        /// <unmanaged-short>MFVideoDRMFlag_DigitallyProtected</unmanaged-short>	
        DigitallyProtected = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Contains flags that describe a video stream.</p><p>These flags are used in the <strong><see cref="SharpDX.MediaFoundation.VideoInfo"/></strong> structure, which is part of the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Developers are encouraged to use media type attributes instead of using the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure. The following table lists the attributes that correspond to the flags defined in this enumeration.</p><table> <tr><th>Flags</th><th>Media Type Attribute</th></tr> <tr><td> <p><see cref="SharpDX.MediaFoundation.VideoFlags.PadToNone"/></p> <p><see cref="SharpDX.MediaFoundation.VideoFlags.PadTo4x3"/></p> <p><see cref="SharpDX.MediaFoundation.VideoFlags.PadTo16x9"/></p> </td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PadControlFlags"/></strong> </td></tr> <tr><td> <p><see cref="SharpDX.MediaFoundation.VideoFlags.SrcContentHint16x9"/></p> <p><see cref="SharpDX.MediaFoundation.VideoFlags.SrcContentHint16x9"/></p> <p><see cref="SharpDX.MediaFoundation.VideoFlags.SrcContentHint2351"/></p> </td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.SourceContentHint"/></strong> </td></tr> <tr><td> <p><see cref="SharpDX.MediaFoundation.VideoFlags.AnalogProtected"/></p> <p><see cref="SharpDX.MediaFoundation.VideoFlags.DigitallyProtected"/></p> </td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.DrmFlags"/></strong> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.VideoFlags.PanScanEnabled"/></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PanScanEnabled"/></strong> </td></tr> <tr><td><see cref="SharpDX.MediaFoundation.VideoFlags.BottomUpLinearRep"/></td><td>Use the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.DefaultStride"/></strong> attribute to specify a negative stride.</td></tr> </table><p>?</p><p>The following flags were defined to describe per-sample interlacing information, but are obsolete:</p><ul> <li> <see cref="SharpDX.MediaFoundation.VideoFlags.ProgressiveContent"/> </li> <li> <see cref="SharpDX.MediaFoundation.VideoFlags.FieldRepeatCountMask"/> </li> <li> <see cref="SharpDX.MediaFoundation.VideoFlags.FieldRepeatCountShift"/> </li> <li> <see cref="SharpDX.MediaFoundation.VideoFlags.ProgressiveSeqReset"/> </li> <li> <see cref="SharpDX.MediaFoundation.VideoFlags.LowerFieldFirst"/> </li> </ul><p>Instead, components should use sample attributes to describe per-sample interlacing information, as described in the topic Video Interlacing.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlags']/*"/>	
    /// <msdn-id>aa473786</msdn-id>	
    /// <unmanaged>MFVideoFlags</unmanaged>	
    /// <unmanaged-short>MFVideoFlags</unmanaged-short>	
    public enum VideoFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_PAD_TO_None']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_PAD_TO_None</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_PAD_TO_None</unmanaged-short>	
        PadToNone = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_PAD_TO_4x3']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_PAD_TO_4x3</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_PAD_TO_4x3</unmanaged-short>	
        PadTo4x3 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_PAD_TO_16x9']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_PAD_TO_16x9</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_PAD_TO_16x9</unmanaged-short>	
        PadTo16x9 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_SrcContentHintMask']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_SrcContentHintMask</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_SrcContentHintMask</unmanaged-short>	
        SrcContentHintMask = unchecked((int)28),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_SrcContentHintNone']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_SrcContentHintNone</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_SrcContentHintNone</unmanaged-short>	
        SrcContentHintNone = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_SrcContentHint16x9']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_SrcContentHint16x9</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_SrcContentHint16x9</unmanaged-short>	
        SrcContentHint16x9 = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_SrcContentHint235_1']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_SrcContentHint235_1</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_SrcContentHint235_1</unmanaged-short>	
        SrcContentHint2351 = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_AnalogProtected']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_AnalogProtected</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_AnalogProtected</unmanaged-short>	
        AnalogProtected = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_DigitallyProtected']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_DigitallyProtected</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_DigitallyProtected</unmanaged-short>	
        DigitallyProtected = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_ProgressiveContent']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_ProgressiveContent</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_ProgressiveContent</unmanaged-short>	
        ProgressiveContent = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_FieldRepeatCountMask']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_FieldRepeatCountMask</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_FieldRepeatCountMask</unmanaged-short>	
        FieldRepeatCountMask = unchecked((int)1792),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_FieldRepeatCountShift']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_FieldRepeatCountShift</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_FieldRepeatCountShift</unmanaged-short>	
        FieldRepeatCountShift = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_ProgressiveSeqReset']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_ProgressiveSeqReset</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_ProgressiveSeqReset</unmanaged-short>	
        ProgressiveSeqReset = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_PanScanEnabled']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_PanScanEnabled</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_PanScanEnabled</unmanaged-short>	
        PanScanEnabled = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_LowerFieldFirst']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_LowerFieldFirst</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_LowerFieldFirst</unmanaged-short>	
        LowerFieldFirst = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlag_BottomUpLinearRep']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlag_BottomUpLinearRep</unmanaged>	
        /// <unmanaged-short>MFVideoFlag_BottomUpLinearRep</unmanaged-short>	
        BottomUpLinearRep = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlags_DXVASurface']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlags_DXVASurface</unmanaged>	
        /// <unmanaged-short>MFVideoFlags_DXVASurface</unmanaged-short>	
        SDXVASurface = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlags_RenderTargetSurface']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlags_RenderTargetSurface</unmanaged>	
        /// <unmanaged-short>MFVideoFlags_RenderTargetSurface</unmanaged-short>	
        SRenderTargetSurface = unchecked((int)4194304),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoFlags_ForceQWORD']/*"/>	
        /// <msdn-id>aa473786</msdn-id>	
        /// <unmanaged>MFVideoFlags_ForceQWORD</unmanaged>	
        /// <unmanaged-short>MFVideoFlags_ForceQWORD</unmanaged-short>	
        SForceQWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Specifies how a video stream is interlaced.</p><p>In the descriptions that follow, upper field refers to the field that contains the leading half scan line. Lower field refers to the field that contains the first full scan line.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Scan lines in the lower field are 0.5 scan line lower than those in the upper field. In NTSC television, a frame consists of a lower field followed by an upper field. In PAL television, a frame consists of an upper field followed by a lower field.</p><p>The upper field is also called the even field, the top field, or field 2. The lower field is also called the odd field, the bottom field, or field 1.</p><p>If the interlace mode is <see cref="SharpDX.MediaFoundation.VideoInterlaceMode.FieldSingleUpper"/> or <see cref="SharpDX.MediaFoundation.VideoInterlaceMode.FieldSingleLower"/>, each sample contains a single field, so each buffer contains only half the number of field lines given in the media type.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlaceMode']/*"/>	
    /// <msdn-id>ms694269</msdn-id>	
    /// <unmanaged>MFVideoInterlaceMode</unmanaged>	
    /// <unmanaged-short>MFVideoInterlaceMode</unmanaged-short>	
    public enum VideoInterlaceMode : int {	
        
        /// <summary>	
        /// <dd> <p> The type of interlacing is not known. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_Unknown']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Progressive frames. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_Progressive']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_Progressive</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_Progressive</unmanaged-short>	
        Progressive = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> Interlaced frames. Each frame contains two fields. The field lines are interleaved, with the upper field appearing on the first line. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_FieldInterleavedUpperFirst']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_FieldInterleavedUpperFirst</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_FieldInterleavedUpperFirst</unmanaged-short>	
        FieldInterleavedUpperFirst = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> Interlaced frames. Each frame contains two fields. The field lines are interleaved, with the lower field appearing on the first line. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_FieldInterleavedLowerFirst']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_FieldInterleavedLowerFirst</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_FieldInterleavedLowerFirst</unmanaged-short>	
        FieldInterleavedLowerFirst = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> Interlaced frames. Each frame contains one field, with the upper field appearing first. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_FieldSingleUpper']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_FieldSingleUpper</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_FieldSingleUpper</unmanaged-short>	
        FieldSingleUpper = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p> Interlaced frames. Each frame contains one field, with the lower field appearing first. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_FieldSingleLower']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_FieldSingleLower</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_FieldSingleLower</unmanaged-short>	
        FieldSingleLower = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p> The stream contains a mix of interlaced and progressive modes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_MixedInterlaceOrProgressive']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_MixedInterlaceOrProgressive</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_MixedInterlaceOrProgressive</unmanaged-short>	
        MixedInterlaceOrProgressive = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_Last']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_Last</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_Last</unmanaged-short>	
        Last = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p> Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInterlace_ForceDWORD']/*"/>	
        /// <msdn-id>ms694269</msdn-id>	
        /// <unmanaged>MFVideoInterlace_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoInterlace_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes the optimal lighting for viewing a particular set of video content.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoLighting"/></strong> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting']/*"/>	
    /// <msdn-id>ms696202</msdn-id>	
    /// <unmanaged>MFVideoLighting</unmanaged>	
    /// <unmanaged-short>MFVideoLighting</unmanaged-short>	
    public enum VideoLighting : int {	
        
        /// <summary>	
        /// <dd> <p>The optimal lighting is unknown.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_Unknown']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Bright lighting; for example, outdoors.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_bright']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_bright</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_bright</unmanaged-short>	
        Bright = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Medium brightness; for example, normal office lighting.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_office']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_office</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_office</unmanaged-short>	
        Office = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Dim; for example, a living room with a television and additional low lighting.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_dim']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_dim</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_dim</unmanaged-short>	
        Dim = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Dark; for example, a movie theater.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_dark']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_dark</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_dark</unmanaged-short>	
        Dark = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_Last']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_Last</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_Last</unmanaged-short>	
        Last = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoLighting_ForceDWORD']/*"/>	
        /// <msdn-id>ms696202</msdn-id>	
        /// <unmanaged>MFVideoLighting_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoLighting_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Contains flags that are used to configure how the enhanced video renderer (EVR) performs  deinterlacing.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To set these flags, call the <strong><see cref="SharpDX.MediaFoundation.VideoMixerControl2.SetMixingPrefs"/></strong> method.</p><p>These flags control some trade-offs between video quality and rendering speed. The constants named "MFVideoMixPrefs_Allow..." enable lower-quality settings, but only when the quality manager requests a drop in quality.  The constants named "MFVideoMixPrefs_Force..." force the EVR to use lower-quality settings regardless of  what the quality manager requests. (For more information about the quality manager, see <strong><see cref="SharpDX.MediaFoundation.QualityAdvise"/></strong>.)</p><p>Currently two lower-quality modes are supported, as described in the following table. Either is preferable to dropping an entire frame.</p><p></p><table> <tr><th>Mode</th><th>Description</th></tr> <tr><td> <p>Half interface</p> </td><td> <p>The EVR's video mixer skips the second field (relative to temporal order) of each interlaced frame. The video mixer still deinterlaces the first field, and this operation typically interpolates data from the second field. The overall frame rate is unaffected.</p> </td></tr> <tr><td> <p>Bob deinterlacing</p> </td><td> <p>The video mixer uses bob deinterlacing, even if the driver supports  a higher-quality deinterlacing algorithm.</p> </td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs']/*"/>	
    /// <msdn-id>dd388675</msdn-id>	
    /// <unmanaged>MFVideoMixPrefs</unmanaged>	
    /// <unmanaged-short>MFVideoMixPrefs</unmanaged-short>	
    public enum VideoMixPrefs : int {	
        
        /// <summary>	
        /// <dd> <p>Force the EVR  to skip the second field (in temporal order) of every interlaced frame. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs_ForceHalfInterlace']/*"/>	
        /// <msdn-id>dd388675</msdn-id>	
        /// <unmanaged>MFVideoMixPrefs_ForceHalfInterlace</unmanaged>	
        /// <unmanaged-short>MFVideoMixPrefs_ForceHalfInterlace</unmanaged-short>	
        ForceHalfInterlace = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>If the EVR is falling behind, allow it to skip the second field (in temporal order) of every interlaced frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs_AllowDropToHalfInterlace']/*"/>	
        /// <msdn-id>dd388675</msdn-id>	
        /// <unmanaged>MFVideoMixPrefs_AllowDropToHalfInterlace</unmanaged>	
        /// <unmanaged-short>MFVideoMixPrefs_AllowDropToHalfInterlace</unmanaged-short>	
        AllowDropToHalfInterlace = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>If the EVR is falling behind, allow it to use bob deinterlacing, even if the driver supports a higher-quality deinterlacing mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs_AllowDropToBob']/*"/>	
        /// <msdn-id>dd388675</msdn-id>	
        /// <unmanaged>MFVideoMixPrefs_AllowDropToBob</unmanaged>	
        /// <unmanaged-short>MFVideoMixPrefs_AllowDropToBob</unmanaged-short>	
        AllowDropToBob = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Force the EVR to use bob deinterlacing, even if the driver supports a higher-quality mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs_ForceBob']/*"/>	
        /// <msdn-id>dd388675</msdn-id>	
        /// <unmanaged>MFVideoMixPrefs_ForceBob</unmanaged>	
        /// <unmanaged-short>MFVideoMixPrefs_ForceBob</unmanaged-short>	
        ForceBob = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>The bitmask of valid flag values. This constant is not itself a valid flag.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoMixPrefs_EnableRotation']/*"/>	
        /// <msdn-id>dd388675</msdn-id>	
        /// <unmanaged>MFVideoMixPrefs_EnableRotation</unmanaged>	
        /// <unmanaged-short>MFVideoMixPrefs_EnableRotation</unmanaged-short>	
        EnableRotation = unchecked((int)16),			
    }
    
    /// <summary>	
    /// <p> </p><p>Specifies whether to pad a video image so that it fits within a specified aspect ratio.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use these flags with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PadControlFlags"/></strong> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPadFlags']/*"/>	
    /// <msdn-id>ms703091</msdn-id>	
    /// <unmanaged>MFVideoPadFlags</unmanaged>	
    /// <unmanaged-short>MFVideoPadFlags</unmanaged-short>	
    public enum VideoPadFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Do not pad the image.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPadFlag_PAD_TO_None']/*"/>	
        /// <msdn-id>ms703091</msdn-id>	
        /// <unmanaged>MFVideoPadFlag_PAD_TO_None</unmanaged>	
        /// <unmanaged-short>MFVideoPadFlag_PAD_TO_None</unmanaged-short>	
        PadToNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Pad the image so that it can be displayed in a 4?3 area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPadFlag_PAD_TO_4x3']/*"/>	
        /// <msdn-id>ms703091</msdn-id>	
        /// <unmanaged>MFVideoPadFlag_PAD_TO_4x3</unmanaged>	
        /// <unmanaged-short>MFVideoPadFlag_PAD_TO_4x3</unmanaged-short>	
        PadTo4x3 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Pad the image so that it can be displayed in a 16?9 area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPadFlag_PAD_TO_16x9']/*"/>	
        /// <msdn-id>ms703091</msdn-id>	
        /// <unmanaged>MFVideoPadFlag_PAD_TO_16x9</unmanaged>	
        /// <unmanaged-short>MFVideoPadFlag_PAD_TO_16x9</unmanaged-short>	
        PadTo16x9 = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies the color primaries of a video source. The color primaries define how to convert colors from RGB color space to CIE XYZ color space.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoPrimaries"/></strong> attribute.</p><p>For more information about these values, see the remarks for the <strong>DXVA2_VideoPrimaries</strong> enumeration, which is the DirectX Video Acceleration (DXVA) equivalent of this enumeration.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries']/*"/>	
    /// <msdn-id>ms701628</msdn-id>	
    /// <unmanaged>MFVideoPrimaries</unmanaged>	
    /// <unmanaged-short>MFVideoPrimaries</unmanaged-short>	
    public enum VideoPrimaries : int {	
        
        /// <summary>	
        /// <dd> <p> The color primaries are unknown. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_Unknown']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_reserved']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_reserved</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_reserved</unmanaged-short>	
        Reserved = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> ITU-R BT.709. Also used for sRGB and scRGB. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_BT709']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_BT709</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_BT709</unmanaged-short>	
        Bt709 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> ITU-R BT.470-4 System M (NTSC). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_BT470_2_SysM']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_BT470_2_SysM</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_BT470_2_SysM</unmanaged-short>	
        Bt4702SysM = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> ITU-R BT.470-4 System B,G (NTSC). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_BT470_2_SysBG']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_BT470_2_SysBG</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_BT470_2_SysBG</unmanaged-short>	
        Bt4702SysBG = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> SMPTE 170M. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_SMPTE170M']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_SMPTE170M</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_SMPTE170M</unmanaged-short>	
        Smpte170m = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p> SMPTE 240M. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_SMPTE240M']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_SMPTE240M</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_SMPTE240M</unmanaged-short>	
        Smpte240m = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p> EBU 3213. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_EBU3213']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_EBU3213</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_EBU3213</unmanaged-short>	
        Ebu3213 = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p> SMPTE C (SMPTE RP 145). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_SMPTE_C']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_SMPTE_C</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_SMPTE_C</unmanaged-short>	
        SmpteC = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_BT2020']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_BT2020</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_BT2020</unmanaged-short>	
        Bt2020 = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p> Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_XYZ']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_XYZ</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_XYZ</unmanaged-short>	
        Xyz = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_DCI_P3']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_DCI_P3</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_DCI_P3</unmanaged-short>	
        DeviceContextIP3 = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_ACES']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_ACES</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_ACES</unmanaged-short>	
        Aces = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_Last']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_Last</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_Last</unmanaged-short>	
        Last = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p> Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoPrimaries_ForceDWORD']/*"/>	
        /// <msdn-id>ms701628</msdn-id>	
        /// <unmanaged>MFVideoPrimaries_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Defines algorithms for the video processor which is use by MF_VIDEO_PROCESSOR_ALGORITHM.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_PROCESSOR_ALGORITHM_TYPE']/*"/>	
    /// <msdn-id>dn302208</msdn-id>	
    /// <unmanaged>MF_VIDEO_PROCESSOR_ALGORITHM_TYPE</unmanaged>	
    /// <unmanaged-short>MF_VIDEO_PROCESSOR_ALGORITHM_TYPE</unmanaged-short>	
    public enum VideoProcessorAlgorithmType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT']/*"/>	
        /// <msdn-id>dn302208</msdn-id>	
        /// <unmanaged>MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT</unmanaged>	
        /// <unmanaged-short>MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444']/*"/>	
        /// <msdn-id>dn302208</msdn-id>	
        /// <unmanaged>MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444</unmanaged>	
        /// <unmanaged-short>MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444</unmanaged-short>	
        MrfCrf444 = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how to flip a video image.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_PROCESSOR_MIRROR']/*"/>	
    /// <msdn-id>hh162904</msdn-id>	
    /// <unmanaged>MF_VIDEO_PROCESSOR_MIRROR</unmanaged>	
    /// <unmanaged-short>MF_VIDEO_PROCESSOR_MIRROR</unmanaged-short>	
    public enum VideoProcessorMirror : int {	
        
        /// <summary>	
        /// <dd> <p>Do not flip the image.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MIRROR_NONE']/*"/>	
        /// <msdn-id>hh162904</msdn-id>	
        /// <unmanaged>MIRROR_NONE</unmanaged>	
        /// <unmanaged-short>MIRROR_NONE</unmanaged-short>	
        MirrorNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Flip the image horizontally.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MIRROR_HORIZONTAL']/*"/>	
        /// <msdn-id>hh162904</msdn-id>	
        /// <unmanaged>MIRROR_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>MIRROR_HORIZONTAL</unmanaged-short>	
        MirrorHorizontal = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Flip the image vertically.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MIRROR_VERTICAL']/*"/>	
        /// <msdn-id>hh162904</msdn-id>	
        /// <unmanaged>MIRROR_VERTICAL</unmanaged>	
        /// <unmanaged-short>MIRROR_VERTICAL</unmanaged-short>	
        MirrorVertical = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies how to rotate a video image.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_PROCESSOR_ROTATION']/*"/>	
    /// <msdn-id>hh162905</msdn-id>	
    /// <unmanaged>MF_VIDEO_PROCESSOR_ROTATION</unmanaged>	
    /// <unmanaged-short>MF_VIDEO_PROCESSOR_ROTATION</unmanaged-short>	
    public enum VideoProcessorRotation : int {	
        
        /// <summary>	
        /// <dd> <p>Do not rotate the image.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ROTATION_NONE']/*"/>	
        /// <msdn-id>hh162905</msdn-id>	
        /// <unmanaged>ROTATION_NONE</unmanaged>	
        /// <unmanaged-short>ROTATION_NONE</unmanaged-short>	
        RotationNone = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Rotate the image to the correct viewing orientation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ROTATION_NORMAL']/*"/>	
        /// <msdn-id>hh162905</msdn-id>	
        /// <unmanaged>ROTATION_NORMAL</unmanaged>	
        /// <unmanaged-short>ROTATION_NORMAL</unmanaged-short>	
        RotationNormal = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains flags that define how the enhanced video renderer (EVR) displays the video.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To set these flags, call <strong><see cref="SharpDX.MediaFoundation.VideoDisplayControl.SetRenderingPrefs"/></strong>.</p><p>The flags named "MFVideoRenderPrefs_Allow..." cause the EVR to use lower-quality settings only when requested by the quality manager. (For more information, see <strong><see cref="SharpDX.MediaFoundation.QualityAdvise"/></strong>.) The flags named "MFVideoRenderPrefs_Force..." cause the video mixer to use lower-quality settings regardless of the quality manager. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs']/*"/>	
    /// <msdn-id>ms701834</msdn-id>	
    /// <unmanaged>MFVideoRenderPrefs</unmanaged>	
    /// <unmanaged-short>MFVideoRenderPrefs</unmanaged-short>	
    public enum VideoRenderPrefs : int {	
        
        /// <summary>	
        /// <dd> <p> If this flag is set, the EVR does not draw the border color. By default, the EVR draws a border on areas of the destination rectangle that have no video. See <strong><see cref="SharpDX.MediaFoundation.VideoDisplayControl.SetBorderColor"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_DoNotRenderBorder']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_DoNotRenderBorder</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_DoNotRenderBorder</unmanaged-short>	
        DoNotRenderBorder = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> If this flag is set, the EVR does not clip the video when the video window straddles two monitors. By default, if the video window straddles two monitors, the EVR clips the video to the monitor that contains the largest area of video. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_DoNotClipToDevice']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_DoNotClipToDevice</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_DoNotClipToDevice</unmanaged-short>	
        DoNotClipToDevice = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Allow the EVR to limit its output to match GPU bandwidth.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_AllowOutputThrottling']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_AllowOutputThrottling</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_AllowOutputThrottling</unmanaged-short>	
        AllowOutputThrottling = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Force the EVR to limit its output to match GPU bandwidth.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_ForceOutputThrottling']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_ForceOutputThrottling</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_ForceOutputThrottling</unmanaged-short>	
        ForceOutputThrottling = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Force the EVR to batch Direct3D <strong>Present</strong> calls. This optimization enables the system to enter to idle states more frequently, which can reduce power consumption. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_ForceBatching']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_ForceBatching</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_ForceBatching</unmanaged-short>	
        ForceBatching = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Allow the EVR to batch Direct3D <strong>Present</strong> calls.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_AllowBatching']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_AllowBatching</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_AllowBatching</unmanaged-short>	
        AllowBatching = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Force the EVR to mix the video inside a rectangle that is smaller than the output rectangle. The EVR will then scale the result to the correct output size. The effective resolution will be lower if this setting is applied.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_ForceScaling']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_ForceScaling</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_ForceScaling</unmanaged-short>	
        ForceScaling = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Allow the EVR to mix the video inside a rectangle that is smaller than the output rectangle. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_AllowScaling']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_AllowScaling</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_AllowScaling</unmanaged-short>	
        AllowScaling = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p> </p><strong>Note</strong>??Requires Windows?7 or later. ? <p>Prevent the EVR from repainting the video window after a stop command. By default, the EVR repaints the video window black after a stop command.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRenderPrefs_DoNotRepaintOnStop']/*"/>	
        /// <msdn-id>ms701834</msdn-id>	
        /// <unmanaged>MFVideoRenderPrefs_DoNotRepaintOnStop</unmanaged>	
        /// <unmanaged-short>MFVideoRenderPrefs_DoNotRepaintOnStop</unmanaged-short>	
        DoNotRepaintOnStop = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p>Describes the rotation of the video image in the counter-clockwise direction.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoRotation"/> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRotationFormat']/*"/>	
    /// <msdn-id>hh162805</msdn-id>	
    /// <unmanaged>MFVideoRotationFormat</unmanaged>	
    /// <unmanaged-short>MFVideoRotationFormat</unmanaged-short>	
    public enum VideoRotationFormat : int {	
        
        /// <summary>	
        /// <dd> <p>The image is not rotated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRotationFormat_0']/*"/>	
        /// <msdn-id>hh162805</msdn-id>	
        /// <unmanaged>MFVideoRotationFormat_0</unmanaged>	
        /// <unmanaged-short>MFVideoRotationFormat_0</unmanaged-short>	
        Angle0 = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated 90 degrees counter-clockwise.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRotationFormat_90']/*"/>	
        /// <msdn-id>hh162805</msdn-id>	
        /// <unmanaged>MFVideoRotationFormat_90</unmanaged>	
        /// <unmanaged-short>MFVideoRotationFormat_90</unmanaged-short>	
        Angle90 = unchecked((int)90),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated 180 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRotationFormat_180']/*"/>	
        /// <msdn-id>hh162805</msdn-id>	
        /// <unmanaged>MFVideoRotationFormat_180</unmanaged>	
        /// <unmanaged-short>MFVideoRotationFormat_180</unmanaged-short>	
        Angle180 = unchecked((int)180),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated 270 degrees counter-clockwise.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoRotationFormat_270']/*"/>	
        /// <msdn-id>hh162805</msdn-id>	
        /// <unmanaged>MFVideoRotationFormat_270</unmanaged>	
        /// <unmanaged-short>MFVideoRotationFormat_270</unmanaged-short>	
        Angle270 = unchecked((int)270),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSphericalFormat']/*"/>	
    /// <unmanaged>MFVideoSphericalFormat</unmanaged>	
    /// <unmanaged-short>MFVideoSphericalFormat</unmanaged-short>	
    public enum VideoSphericalFormat : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSphericalFormat_Unsupported']/*"/>	
        /// <unmanaged>MFVideoSphericalFormat_Unsupported</unmanaged>	
        /// <unmanaged-short>MFVideoSphericalFormat_Unsupported</unmanaged-short>	
        Unsupported = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSphericalFormat_Equirectangular']/*"/>	
        /// <unmanaged>MFVideoSphericalFormat_Equirectangular</unmanaged>	
        /// <unmanaged-short>MFVideoSphericalFormat_Equirectangular</unmanaged-short>	
        Equirectangular = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes the intended aspect ratio for a video stream.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use these flags with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.SourceContentHint"/></strong> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSrcContentHintFlags']/*"/>	
    /// <msdn-id>ms697451</msdn-id>	
    /// <unmanaged>MFVideoSrcContentHintFlags</unmanaged>	
    /// <unmanaged-short>MFVideoSrcContentHintFlags</unmanaged-short>	
    public enum VideoSrcContentHintFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The aspect ratio is unknown.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSrcContentHintFlag_None']/*"/>	
        /// <msdn-id>ms697451</msdn-id>	
        /// <unmanaged>MFVideoSrcContentHintFlag_None</unmanaged>	
        /// <unmanaged-short>MFVideoSrcContentHintFlag_None</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The source is 16?9 content encoded within a 4?3 area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSrcContentHintFlag_16x9']/*"/>	
        /// <msdn-id>ms697451</msdn-id>	
        /// <unmanaged>MFVideoSrcContentHintFlag_16x9</unmanaged>	
        /// <unmanaged-short>MFVideoSrcContentHintFlag_16x9</unmanaged-short>	
        Hint16x9 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The source is 2.35:1 content encoded within a 16?9 or 4?3 area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSrcContentHintFlag_235_1']/*"/>	
        /// <msdn-id>ms697451</msdn-id>	
        /// <unmanaged>MFVideoSrcContentHintFlag_235_1</unmanaged>	
        /// <unmanaged-short>MFVideoSrcContentHintFlag_235_1</unmanaged-short>	
        Hint235_1 = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Specifies the conversion function from linear RGB to non-linear RGB (R'G'B'). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> These flags are used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.TransferFunction"/></strong> attribute. </p><p> For more information about these values, see the remarks for the <strong>DXVA2_VideoTransferFunction</strong> enumeration, which is the DirectX Video Acceleration (DXVA) equivalent of this enumeration. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferFunction']/*"/>	
    /// <msdn-id>ms705629</msdn-id>	
    /// <unmanaged>MFVideoTransferFunction</unmanaged>	
    /// <unmanaged-short>MFVideoTransferFunction</unmanaged-short>	
    public enum VideoTransferFunction : int {	
        
        /// <summary>	
        /// <dd> <p> Unknown. Treat as <see cref="SharpDX.MediaFoundation.VideoTransferFunction.Func709"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_Unknown']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_Unknown</unmanaged-short>	
        FuncUnknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Linear RGB (gamma = 1.0). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_10']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_10</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_10</unmanaged-short>	
        Func10 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> True 1.8 gamma, L' = L^1/1.8. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_18']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_18</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_18</unmanaged-short>	
        Func18 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> True 2.0 gamma, L' = L^1/2.0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_20']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_20</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_20</unmanaged-short>	
        Func20 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> True 2.2 gamma, L' = L^1/2.2. This transfer function is used in ITU-R BT.470-2 System M (NTSC). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_22']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_22</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_22</unmanaged-short>	
        Func22 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> ITU-R BT.709 transfer function. Gamma 2.2 curve with a linear segment in the lower range. This transfer function is used in BT.709, BT.601, SMPTE 296M, SMPTE 170M, BT.470, and SPMTE 274M. In addition BT-1361 uses this function within the range [0...1]. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_709']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_709</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_709</unmanaged-short>	
        Func709 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p> SPMTE 240M transfer function. Gamma 2.2 curve with a linear segment in the lower range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_240M']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_240M</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_240M</unmanaged-short>	
        Func240m = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p> sRGB transfer function. Gamma 2.4 curve with a linear segment in the lower range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_sRGB']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_sRGB</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_sRGB</unmanaged-short>	
        FuncSRGB = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p> True 2.8 gamma. L' = L^1/2.8. This transfer function is used in ITU-R BT.470-2 System B, G (PAL). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_28']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_28</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_28</unmanaged-short>	
        Func28 = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Logarithmic transfer (100:1 range); for example, as used in H.264 video.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_Log_100']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_Log_100</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_Log_100</unmanaged-short>	
        FuncLog100 = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>Logarithmic transfer (316.22777:1 range); for example, as used in H.264 video.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_Log_316']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_Log_316</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_Log_316</unmanaged-short>	
        FuncLog316 = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Symmetric ITU-R BT.709.</p> <strong>Note</strong>??Requires Windows?7 or later. ? </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_709_sym']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_709_sym</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_709_sym</unmanaged-short>	
        Func709Sym = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_2020_const']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_2020_const</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_2020_const</unmanaged-short>	
        Func2020Const = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p> Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_2020']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_2020</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_2020</unmanaged-short>	
        Func2020 = unchecked((int)13),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_26']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_26</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_26</unmanaged-short>	
        Func26 = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_2084']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_2084</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_2084</unmanaged-short>	
        Func2084 = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_HLG']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_HLG</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_HLG</unmanaged-short>	
        FuncHlg = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p> Reserved. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_Last']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_Last</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_Last</unmanaged-short>	
        FuncLast = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p> Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransFunc_ForceDWORD']/*"/>	
        /// <msdn-id>ms705629</msdn-id>	
        /// <unmanaged>MFVideoTransFunc_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoTransFunc_ForceDWORD</unmanaged-short>	
        FuncForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p> </p><p>Describes the conversion matrices between Y'PbPr (component video) and studio R'G'B'.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.YuvMatrix"/></strong> attribute.</p><p>For more information about these values, see the remarks for the <strong>DXVA2_VideoTransferMatrix</strong> enumeration, which is the DirectX Video Acceleration (DXVA) equivalent of this enumeration.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix']/*"/>	
    /// <msdn-id>ms694036</msdn-id>	
    /// <unmanaged>MFVideoTransferMatrix</unmanaged>	
    /// <unmanaged-short>MFVideoTransferMatrix</unmanaged-short>	
    public enum VideoTransferMatrix : int {	
        
        /// <summary>	
        /// <dd> <p>Unknown transfer matrix. Treat as <see cref="SharpDX.MediaFoundation.VideoTransferMatrix.Bt709"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_Unknown']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_Unknown</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_Unknown</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>ITU-R BT.709 transfer matrix.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_BT709']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_BT709</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_BT709</unmanaged-short>	
        Bt709 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>ITU-R BT.601 transfer matrix. Also used for SMPTE 170 and ITU-R BT.470-2 System B,G.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_BT601']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_BT601</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_BT601</unmanaged-short>	
        Bt601 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>SMPTE 240M transfer matrix.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_SMPTE240M']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_SMPTE240M</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_SMPTE240M</unmanaged-short>	
        Smpte240m = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_BT2020_10']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_BT2020_10</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_BT2020_10</unmanaged-short>	
        Bt202010 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_BT2020_12']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_BT2020_12</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_BT2020_12</unmanaged-short>	
        Bt202012 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_Last']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_Last</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_Last</unmanaged-short>	
        Last = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Reserved. This member forces the enumeration type to compile as a <strong>DWORD</strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoTransferMatrix_ForceDWORD']/*"/>	
        /// <msdn-id>ms694036</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix_ForceDWORD</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix_ForceDWORD</unmanaged-short>	
        ForceDWORD = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Defines messages for an enhanced video renderer (EVR) presenter. This enumeration is used with the <strong><see cref="SharpDX.MediaFoundation.VideoPresenter.ProcessMessage"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_TYPE']/*"/>	
    /// <msdn-id>ms698964</msdn-id>	
    /// <unmanaged>MFVP_MESSAGE_TYPE</unmanaged>	
    /// <unmanaged-short>MFVP_MESSAGE_TYPE</unmanaged-short>	
    public enum VpMessageType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_FLUSH']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_FLUSH</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_FLUSH</unmanaged-short>	
        Flush = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_INVALIDATEMEDIATYPE']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_INVALIDATEMEDIATYPE</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_INVALIDATEMEDIATYPE</unmanaged-short>	
        InvalidateMediaType = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_PROCESSINPUTNOTIFY']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_PROCESSINPUTNOTIFY</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_PROCESSINPUTNOTIFY</unmanaged-short>	
        Processinputnotify = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_BEGINSTREAMING']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_BEGINSTREAMING</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_BEGINSTREAMING</unmanaged-short>	
        Beginstreaming = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_ENDSTREAMING']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_ENDSTREAMING</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_ENDSTREAMING</unmanaged-short>	
        Endstreaming = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_ENDOFSTREAM']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_ENDOFSTREAM</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_ENDOFSTREAM</unmanaged-short>	
        Endofstream = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_STEP']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_STEP</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_STEP</unmanaged-short>	
        Step = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVP_MESSAGE_CANCELSTEP']/*"/>	
        /// <msdn-id>ms698964</msdn-id>	
        /// <unmanaged>MFVP_MESSAGE_CANCELSTEP</unmanaged>	
        /// <unmanaged-short>MFVP_MESSAGE_CANCELSTEP</unmanaged-short>	
        Cancelstep = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p> </p><p>Contains flags that specify how to convert an audio media type.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFWaveFormatExConvertFlags']/*"/>	
    /// <msdn-id>ms703181</msdn-id>	
    /// <unmanaged>MFWaveFormatExConvertFlags</unmanaged>	
    /// <unmanaged-short>MFWaveFormatExConvertFlags</unmanaged-short>	
    public enum WaveFormatExConvertFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Convert the media type to a <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> structure if possible, or a <strong><see cref="SharpDX.Multimedia.WaveFormatExtensible"/></strong> structure otherwise.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFWaveFormatExConvertFlag_Normal']/*"/>	
        /// <msdn-id>ms703181</msdn-id>	
        /// <unmanaged>MFWaveFormatExConvertFlag_Normal</unmanaged>	
        /// <unmanaged-short>MFWaveFormatExConvertFlag_Normal</unmanaged-short>	
        Normal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Convert the media type to a <strong><see cref="SharpDX.Multimedia.WaveFormatExtensible"/></strong> structure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFWaveFormatExConvertFlag_ForceExtensible']/*"/>	
        /// <msdn-id>ms703181</msdn-id>	
        /// <unmanaged>MFWaveFormatExConvertFlag_ForceExtensible</unmanaged>	
        /// <unmanaged-short>MFWaveFormatExConvertFlag_ForceExtensible</unmanaged-short>	
        ForceExtensible = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> </p><p>Provides configuration information to the dispatching thread for a callback.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The <strong>GetParameters</strong> method returns information about the callback so that the dispatching thread can optimize the process that it uses to invoke the callback. </p><p> If the method returns a value other than zero in the <em>pdwFlags</em> parameter, your <strong>Invoke</strong> method must meet the requirements described here. Otherwise, the callback might delay the pipeline.</p><p> If you want default values for both parameters, return <strong>E_NOTIMPL</strong>. The default values are given in the parameter descriptions on this page.</p><p>This interface is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</p><ul> <li>Windows?XP with Service Pack?2 (SP2) and later.</li> <li>Windows?XP Media Center Edition?2005 with KB900325 (Windows?XP Media Center Edition?2005) and KB925766 (October 2006 Update Rollup for Windows?XP Media Center Edition) installed.</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE']/*"/>	
    /// <msdn-id>bb970381</msdn-id>	
    /// <unmanaged>MFASYNC_CALLBACK_QUEUE</unmanaged>	
    /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE</unmanaged-short>	
    public enum WorkQueueType : int {	
        
        /// <summary>	
        /// <dd> <p>Receives a flag indicating the behavior of the callback object's <strong><see cref="SharpDX.MediaFoundation.IAsyncCallback.Invoke"/></strong> method. The following values are defined. The default value is zero.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>Zero</strong></dt> </dl> </td><td> <p>The callback does not take a long time to complete, but has no specific restrictions on what system calls it makes. The callback generally takes less than 30 milliseconds to complete.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref="SharpDX.MediaFoundation.AsyncCallbackFlags.FastIoProcessing"/></strong></strong></dt> </dl> </td><td> <p>The callback does very minimal processing. It takes less than 1 millisecond to complete.</p> <p>The callback must be invoked from one of the following work queues:</p> <ul> <li><strong><see cref="SharpDX.MediaFoundation.WorkQueueType.Io"/></strong></li> <li><strong><see cref="SharpDX.MediaFoundation.WorkQueueType.Timer"/></strong></li> </ul> </td></tr> <tr><td><dl> <dt><strong><strong><see cref="SharpDX.MediaFoundation.AsyncCallbackFlags.Signal"/></strong></strong></dt> </dl> </td><td> <p>Implies <strong><see cref="SharpDX.MediaFoundation.AsyncCallbackFlags.FastIoProcessing"/></strong>, with the additional restriction that the callback does no processing (less than 50 microseconds), and the only system call it makes is <strong>SetEvent</strong>.</p> <p>The callback must be invoked from one of the following work queues:</p> <ul> <li><strong><see cref="SharpDX.MediaFoundation.WorkQueueType.Io"/></strong></li> <li><strong><see cref="SharpDX.MediaFoundation.WorkQueueType.Timer"/></strong></li> </ul> </td></tr> <tr><td><dl> <dt><strong><strong><see cref="SharpDX.MediaFoundation.AsyncCallbackFlags.Blocking"/></strong></strong></dt> </dl> </td><td> <p>Blocking callback.</p> </td></tr> <tr><td><dl> <dt><strong><strong><see cref="SharpDX.MediaFoundation.AsyncCallbackFlags.Reply"/></strong></strong></dt> </dl> </td><td> <p>Reply callback.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_UNDEFINED']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_UNDEFINED</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_UNDEFINED</unmanaged-short>	
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Receives the identifier of the work queue on which the callback is dispatched.  </p> <p>This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <strong>Work Queue Identifiers</strong>. To create a new work queue, call <strong><see cref="SharpDX.MediaFoundation.MediaFactory.AllocateWorkQueue"/></strong>. The default value is <strong><see cref="SharpDX.MediaFoundation.WorkQueueType.Standard"/></strong>.</p> <p>If the work queue is not compatible with the value returned in <em>pdwFlags</em>, the Media Foundation platform returns <strong><see cref="SharpDX.MediaFoundation.ResultCode.InvalidWorkqueue"/></strong> when it tries to dispatch the callback. (See <strong><see cref="SharpDX.MediaFoundation.MediaFactory.PutWorkItem"/></strong>.)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_STANDARD']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_STANDARD</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_STANDARD</unmanaged-short>	
        Standard = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_RT']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_RT</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_RT</unmanaged-short>	
        Rt = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_IO']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_IO</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_IO</unmanaged-short>	
        Io = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_TIMER']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_TIMER</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_TIMER</unmanaged-short>	
        Timer = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_MULTITHREADED']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_MULTITHREADED</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_MULTITHREADED</unmanaged-short>	
        Multithreaded = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION</unmanaged-short>	
        LongFunction = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK</unmanaged-short>	
        PrivateMask = unchecked((int)-65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFASYNC_CALLBACK_QUEUE_ALL']/*"/>	
        /// <msdn-id>bb970381</msdn-id>	
        /// <unmanaged>MFASYNC_CALLBACK_QUEUE_ALL</unmanaged>	
        /// <unmanaged-short>MFASYNC_CALLBACK_QUEUE_ALL</unmanaged-short>	
        All = unchecked((int)-1),			
    }
}
