// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.MediaFoundation namespace.
//     This code was generated by a tool.
//     Date : 2017/7/15 0:31:19
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.MediaFoundation
{

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574

    /// <summary>	
    /// <p> </p><p>Contains an image that is stored as metadata for a media source. This structure is used as the data item for the <strong>WM/Picture</strong> metadata attribute.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>WM/Picture</strong> attribute is defined in the Windows Media Format SDK. The attribute contains a picture related to the content, such as album art.</p><p>To get this attribute from a media source, call <strong><see cref="SharpDX.MediaFoundation.Metadata.GetProperty"/></strong>, passing in the constant g_wszWMPicture for the <em>pwszName</em> parameter. The method retrieves a <strong><see cref="SharpDX.Win32.Variant"/></strong> that contains a binary array (VT_BLOB). The layout of the array is as follows:</p><ul> <li><strong><see cref="SharpDX.MediaFoundation.AsfFlatPicture"/></strong> structure. </li> <li> Null-terminated wide-character string that contains the MIME type. </li> <li> Null-terminated wide-character string that contains a description. </li> <li> <p>Image data.</p> </li> </ul><p>This format differs from the <strong>WM_PICTURE</strong> structure used in the Windows Media Format SDK. The <strong>WM_PICTURE</strong> structure contains internal references to two strings and the image data. If the structure is copied, these references become invalid. The <strong><see cref="SharpDX.MediaFoundation.AsfFlatPicture"/></strong> structure does not contain internal references, so it is safe to copy the structure.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_PICTURE']/*"/>	
    /// <msdn-id>ms696178</msdn-id>	
    /// <unmanaged>ASF_FLAT_PICTURE</unmanaged>	
    /// <unmanaged-short>ASF_FLAT_PICTURE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsfFlatPicture
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_PICTURE::bPictureType']/*"/>	
        /// <msdn-id>ms696178</msdn-id>	
        /// <unmanaged>unsigned char bPictureType</unmanaged>	
        /// <unmanaged-short>unsigned char bPictureType</unmanaged-short>	
        public byte BPictureType;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_PICTURE::dwDataLen']/*"/>	
        /// <msdn-id>ms696178</msdn-id>	
        /// <unmanaged>unsigned int dwDataLen</unmanaged>	
        /// <unmanaged-short>unsigned int dwDataLen</unmanaged-short>	
        public int DwDataLen;
    }

    /// <summary>	
    /// <p> </p><p>Contains synchronized lyrics stored as metadata for a media source. This structure is used as the data item for the <strong>WM/Lyrics_Synchronised</strong> metadata attribute.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>WM/Lyrics_Synchronised</strong> attribute is defined in the Windows Media Format SDK. The attribute contains lyrics synchronized to times in the source file.</p><p>To get this attribute from a media source, call <strong><see cref="SharpDX.MediaFoundation.Metadata.GetProperty"/></strong>, passing in the constant g_wszWMLyrics_Synchronised for the <em>pwszName</em> parameter. The method retrieves a <strong><see cref="SharpDX.Win32.Variant"/></strong> that contains a binary array (VT_BLOB). The layout of the array is as follows:</p><ul> <li> <p><strong><see cref="SharpDX.MediaFoundation.AsfFlatSynchronisedLyrics"/></strong> structure.</p> </li> <li> <p>Null-terminated wide-character string that contains a description.</p> </li> <li> <p>Lyric data. The format of the lyric data is described in the Windows Media Format SDK documentation.</p> </li> </ul><p>This format differs from the <strong>WM_SYNCHRONISED_LYRICS</strong> structure used in the Windows Media Format SDK. The <strong>WM_SYNCHRONISED_LYRICS</strong> structure contains internal references to two strings and the lyric data. If the structure is copied, these references become invalid. The <strong><see cref="SharpDX.MediaFoundation.AsfFlatSynchronisedLyrics"/></strong> structure does not contain internal references, so it is safe to copy the structure.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_SYNCHRONISED_LYRICS']/*"/>	
    /// <msdn-id>ms697057</msdn-id>	
    /// <unmanaged>ASF_FLAT_SYNCHRONISED_LYRICS</unmanaged>	
    /// <unmanaged-short>ASF_FLAT_SYNCHRONISED_LYRICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsfFlatSynchronisedLyrics
    {

        /// <summary>	
        /// <dd> <p>Specifies the format of time stamps in the lyrics. This member is equivalent to the <strong>bTimeStampFormat</strong> member in the <strong>WM_SYNCHRONISED_LYRICS</strong> structure. The <strong>WM_SYNCHRONISED_LYRICS</strong> structure is documented in the Windows Media Format SDK.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_SYNCHRONISED_LYRICS::bTimeStampFormat']/*"/>	
        /// <msdn-id>ms697057</msdn-id>	
        /// <unmanaged>unsigned char bTimeStampFormat</unmanaged>	
        /// <unmanaged-short>unsigned char bTimeStampFormat</unmanaged-short>	
        public byte BTimeStampFormat;

        /// <summary>	
        /// <dd> <p>Specifies the type of synchronized strings that are in the lyric data. This member is equivalent to the <strong>bContentType</strong> member in the <strong>WM_SYNCHRONISED_LYRICS</strong> structure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_SYNCHRONISED_LYRICS::bContentType']/*"/>	
        /// <msdn-id>ms697057</msdn-id>	
        /// <unmanaged>unsigned char bContentType</unmanaged>	
        /// <unmanaged-short>unsigned char bContentType</unmanaged-short>	
        public byte BContentType;

        /// <summary>	
        /// <dd> <p>Size, in bytes, of the lyric data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_FLAT_SYNCHRONISED_LYRICS::dwLyricsLen']/*"/>	
        /// <msdn-id>ms697057</msdn-id>	
        /// <unmanaged>unsigned int dwLyricsLen</unmanaged>	
        /// <unmanaged-short>unsigned int dwLyricsLen</unmanaged-short>	
        public int DwLyricsLen;
    }

    /// <summary>	
    /// <p> </p><p>Describes the indexing configuration for a stream and type of index.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_DESCRIPTOR']/*"/>	
    /// <msdn-id>ms696174</msdn-id>	
    /// <unmanaged>ASF_INDEX_DESCRIPTOR</unmanaged>	
    /// <unmanaged-short>ASF_INDEX_DESCRIPTOR</unmanaged-short>	
    public partial struct AsfIndexDescriptor
    {

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.MediaFoundation.AsfIndexIdentifier"/></strong> structure that identifies the stream number and the type of index.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_DESCRIPTOR::Identifier']/*"/>	
        /// <msdn-id>ms696174</msdn-id>	
        /// <unmanaged>ASF_INDEX_IDENTIFIER Identifier</unmanaged>	
        /// <unmanaged-short>ASF_INDEX_IDENTIFIER Identifier</unmanaged-short>	
        public SharpDX.MediaFoundation.AsfIndexIdentifier Identifier;

        /// <summary>	
        /// <dd> <p>Number of bytes used for each index entry. If the value is MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC, the index entries have variable size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_DESCRIPTOR::cPerEntryBytes']/*"/>	
        /// <msdn-id>ms696174</msdn-id>	
        /// <unmanaged>unsigned short cPerEntryBytes</unmanaged>	
        /// <unmanaged-short>unsigned short cPerEntryBytes</unmanaged-short>	
        public short CPerEntryBytes;

        /// <summary>	
        /// <dd> <p>Optional text description of the index.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_DESCRIPTOR::szDescription']/*"/>	
        /// <msdn-id>ms696174</msdn-id>	
        /// <unmanaged>wchar_t szDescription[32]</unmanaged>	
        /// <unmanaged-short>wchar_t szDescription</unmanaged-short>	
        public string SzDescription;

        /// <summary>	
        /// <dd> <p>Indexing interval. The units of this value depend on the index type. A value of MFASFINDEXER_NO_FIXED_INTERVAL indicates that there is no fixed indexing interval.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_DESCRIPTOR::dwInterval']/*"/>	
        /// <msdn-id>ms696174</msdn-id>	
        /// <unmanaged>unsigned int dwInterval</unmanaged>	
        /// <unmanaged-short>unsigned int dwInterval</unmanaged-short>	
        public int DwInterval;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public SharpDX.MediaFoundation.AsfIndexIdentifier Identifier;
            public short CPerEntryBytes;
            public char SzDescription;
            char __SzDescription1;
            char __SzDescription2;
            char __SzDescription3;
            char __SzDescription4;
            char __SzDescription5;
            char __SzDescription6;
            char __SzDescription7;
            char __SzDescription8;
            char __SzDescription9;
            char __SzDescription10;
            char __SzDescription11;
            char __SzDescription12;
            char __SzDescription13;
            char __SzDescription14;
            char __SzDescription15;
            char __SzDescription16;
            char __SzDescription17;
            char __SzDescription18;
            char __SzDescription19;
            char __SzDescription20;
            char __SzDescription21;
            char __SzDescription22;
            char __SzDescription23;
            char __SzDescription24;
            char __SzDescription25;
            char __SzDescription26;
            char __SzDescription27;
            char __SzDescription28;
            char __SzDescription29;
            char __SzDescription30;
            char __SzDescription31;
            public int DwInterval;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.Identifier = @ref.Identifier;
            this.CPerEntryBytes = @ref.CPerEntryBytes;
            fixed (char* __ptr = &@ref.SzDescription) this.SzDescription = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 32);
            this.DwInterval = @ref.DwInterval;
        }
    }

    /// <summary>	
    /// <p> Specifies an index for the ASF indexer object. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The index object of an ASF file can contain a number of distinct indexes. Each index is identified by the type of index and the stream number. No ASF index object can contain more than one index for a particular combination of stream number and index type.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_IDENTIFIER']/*"/>	
    /// <msdn-id>ms700100</msdn-id>	
    /// <unmanaged>ASF_INDEX_IDENTIFIER</unmanaged>	
    /// <unmanaged-short>ASF_INDEX_IDENTIFIER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsfIndexIdentifier
    {

        /// <summary>	
        /// <dd> <p> The type of index. Currently this value must be GUID_NULL, which specifies time-based indexing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_IDENTIFIER::guidIndexType']/*"/>	
        /// <msdn-id>ms700100</msdn-id>	
        /// <unmanaged>GUID guidIndexType</unmanaged>	
        /// <unmanaged-short>GUID guidIndexType</unmanaged-short>	
        public System.Guid GuidIndexType;

        /// <summary>	
        /// <dd> <p> The stream number to which this structure applies. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_INDEX_IDENTIFIER::wStreamNumber']/*"/>	
        /// <msdn-id>ms700100</msdn-id>	
        /// <unmanaged>unsigned short wStreamNumber</unmanaged>	
        /// <unmanaged-short>unsigned short wStreamNumber</unmanaged-short>	
        public short WStreamNumber;
    }

    /// <summary>	
    /// <p> </p><p>Contains statistics about the progress of the ASF multiplexer.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use <strong><see cref="SharpDX.MediaFoundation.ASFMultiplexer.GetStatistics"/></strong> to retrieve this structure.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_MUX_STATISTICS']/*"/>	
    /// <msdn-id>ms696231</msdn-id>	
    /// <unmanaged>ASF_MUX_STATISTICS</unmanaged>	
    /// <unmanaged-short>ASF_MUX_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsfMuxStatistics
    {

        /// <summary>	
        /// <dd> <p>Number of frames written by the ASF multiplexer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_MUX_STATISTICS::cFramesWritten']/*"/>	
        /// <msdn-id>ms696231</msdn-id>	
        /// <unmanaged>unsigned int cFramesWritten</unmanaged>	
        /// <unmanaged-short>unsigned int cFramesWritten</unmanaged-short>	
        public int CFramesWritten;

        /// <summary>	
        /// <dd> <p>Number of frames dropped by the ASF multiplexer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ASF_MUX_STATISTICS::cFramesDropped']/*"/>	
        /// <msdn-id>ms696231</msdn-id>	
        /// <unmanaged>unsigned int cFramesDropped</unmanaged>	
        /// <unmanaged-short>unsigned int cFramesDropped</unmanaged-short>	
        public int CFramesDropped;
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAudioDecoderDegradationInfo']/*"/>	
    /// <unmanaged>MFAudioDecoderDegradationInfo</unmanaged>	
    /// <unmanaged-short>MFAudioDecoderDegradationInfo</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AudioDecoderDegradationInfo
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAudioDecoderDegradationInfo::eDegradationReason']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_REASON eDegradationReason</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_REASON eDegradationReason</unmanaged-short>	
        public SharpDX.MediaFoundation.TAudioDecoderDegradationReason EDegradationReason;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAudioDecoderDegradationInfo::eType']/*"/>	
        /// <unmanaged>MFT_AUDIO_DECODER_DEGRADATION_TYPE eType</unmanaged>	
        /// <unmanaged-short>MFT_AUDIO_DECODER_DEGRADATION_TYPE eType</unmanaged-short>	
        public SharpDX.MediaFoundation.TAudioDecoderDegradationType EType;
    }

    /// <summary>	
    /// <p> </p><p>Describes a 4:4:4:4 Y'Cb'Cr' sample.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAYUVSample']/*"/>	
    /// <msdn-id>ms701580</msdn-id>	
    /// <unmanaged>MFAYUVSample</unmanaged>	
    /// <unmanaged-short>MFAYUVSample</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AYUVSample
    {

        /// <summary>	
        /// <dd> <p>Cr (chroma difference) value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAYUVSample::bCrValue']/*"/>	
        /// <msdn-id>ms701580</msdn-id>	
        /// <unmanaged>unsigned char bCrValue</unmanaged>	
        /// <unmanaged-short>unsigned char bCrValue</unmanaged-short>	
        public byte BCrValue;

        /// <summary>	
        /// <dd> <p>Cb (chroma difference) value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAYUVSample::bCbValue']/*"/>	
        /// <msdn-id>ms701580</msdn-id>	
        /// <unmanaged>unsigned char bCbValue</unmanaged>	
        /// <unmanaged-short>unsigned char bCbValue</unmanaged-short>	
        public byte BCbValue;

        /// <summary>	
        /// <dd> <p>Y (luma) value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAYUVSample::bYValue']/*"/>	
        /// <msdn-id>ms701580</msdn-id>	
        /// <unmanaged>unsigned char bYValue</unmanaged>	
        /// <unmanaged-short>unsigned char bYValue</unmanaged-short>	
        public byte BYValue;

        /// <summary>	
        /// <dd> <p>Alpha value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFAYUVSample::bSampleAlpha8']/*"/>	
        /// <msdn-id>ms701580</msdn-id>	
        /// <unmanaged>unsigned char bSampleAlpha8</unmanaged>	
        /// <unmanaged-short>unsigned char bSampleAlpha8</unmanaged-short>	
        public byte BSampleAlpha8;
    }

    /// <summary>	
    /// <p> </p><p>Specifies the buffering parameters for a network byte stream.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS']/*"/>	
    /// <msdn-id>aa370446</msdn-id>	
    /// <unmanaged>MFBYTESTREAM_BUFFERING_PARAMS</unmanaged>	
    /// <unmanaged-short>MFBYTESTREAM_BUFFERING_PARAMS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ByteStreamBufferingParameters
    {

        /// <summary>	
        /// <dd> <p>Size of the file, in bytes. If the total size is unknown, set this member to -1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::cbTotalFileSize']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned longlong cbTotalFileSize</unmanaged>	
        /// <unmanaged-short>unsigned longlong cbTotalFileSize</unmanaged-short>	
        public long CbTotalFileSize;

        /// <summary>	
        /// <dd> <p>Size of the playable media data in the file, excluding any trailing data that is not useful for playback. If this value is unknown, set this member to -1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::cbPlayableDataSize']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned longlong cbPlayableDataSize</unmanaged>	
        /// <unmanaged-short>unsigned longlong cbPlayableDataSize</unmanaged-short>	
        public long CbPlayableDataSize;

        /// <summary>	
        /// <dd> <p>Pointer to an array of <strong><see cref="SharpDX.MediaFoundation.LeakyBucketPair"/></strong> structures. Each member of the array gives the buffer window for a particular bit rate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::prgBuckets']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>MF_LEAKY_BUCKET_PAIR* prgBuckets</unmanaged>	
        /// <unmanaged-short>MF_LEAKY_BUCKET_PAIR prgBuckets</unmanaged-short>	
        public System.IntPtr PrgBuckets;

        /// <summary>	
        /// <dd> <p>The number of elements in the <strong>prgBuckets</strong> array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::cBuckets']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned int cBuckets</unmanaged>	
        /// <unmanaged-short>unsigned int cBuckets</unmanaged-short>	
        public int CBuckets;

        /// <summary>	
        /// <dd> <p>Amount of data to buffer from the network, in 100-nanosecond units. This value is in addition to the buffer windows defined in the <strong>prgBuckets</strong> member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::qwNetBufferingTime']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned longlong qwNetBufferingTime</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwNetBufferingTime</unmanaged-short>	
        public long QwNetBufferingTime;

        /// <summary>	
        /// <dd> <p>Amount of additional data to buffer when seeking, in 100-nanosecond units. This value reflects the fact that downloading must start from the previous key frame before the seek point. If the value is unknown, set this member to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::qwExtraBufferingTimeDuringSeek']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned longlong qwExtraBufferingTimeDuringSeek</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwExtraBufferingTimeDuringSeek</unmanaged-short>	
        public long QwExtraBufferingTimeDuringSeek;

        /// <summary>	
        /// <dd> <p>The playback duration of the file, in 100-nanosecond units. If the duration is unknown, set this member to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::qwPlayDuration']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>unsigned longlong qwPlayDuration</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwPlayDuration</unmanaged-short>	
        public long QwPlayDuration;

        /// <summary>	
        /// <dd> <p>Playback rate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFBYTESTREAM_BUFFERING_PARAMS::dRate']/*"/>	
        /// <msdn-id>aa370446</msdn-id>	
        /// <unmanaged>float dRate</unmanaged>	
        /// <unmanaged-short>float dRate</unmanaged-short>	
        public float DRate;
    }

    /// <summary>	
    /// <p>Specifies a range of bytes.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_BYTE_STREAM_CACHE_RANGE']/*"/>	
    /// <msdn-id>hh162808</msdn-id>	
    /// <unmanaged>MF_BYTE_STREAM_CACHE_RANGE</unmanaged>	
    /// <unmanaged-short>MF_BYTE_STREAM_CACHE_RANGE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ByteStreamCacheRange
    {

        /// <summary>	
        /// <dd> <p>The offset, in bytes, of the start of the range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_BYTE_STREAM_CACHE_RANGE::qwStartOffset']/*"/>	
        /// <msdn-id>hh162808</msdn-id>	
        /// <unmanaged>unsigned longlong qwStartOffset</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwStartOffset</unmanaged-short>	
        public long QwStartOffset;

        /// <summary>	
        /// <dd> <p>The offset, in bytes, of the end of the range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_BYTE_STREAM_CACHE_RANGE::qwEndOffset']/*"/>	
        /// <msdn-id>hh162808</msdn-id>	
        /// <unmanaged>unsigned longlong qwEndOffset</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwEndOffset</unmanaged-short>	
        public long QwEndOffset;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>A transform describing the location of a camera relative to other cameras or an established external reference.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>Position</strong> value should be expressed in real-world coordinates in units of meters. The coordinate system of both position and orientation should be right-handed Cartesian as shown in the following diagram. </p><strong>Important</strong>??<p>The position and orientation are expressed as transforms toward the reference frame or origin. For example, a <strong>Position</strong> value of {-5, 0, 0} means that the origin is 5 meters to the left of the sensor, and therefore the sensor is 5 meters to the right of the origin. A sensor that is positioned 2 meters above the origin should specify a <strong>Position</strong> of {0, -2, 0} because that is the translation from the sensor to the origin.</p> <p>If the sensor is aligned with the origin, the rotation is the identity quaternion and the forward vector is along the -Z axis  {0, 0, -1}. If the sensor is rotated +30 degrees around the Y axis from the origin, then the <strong>Orientation</strong> value should be a rotation of -30 degrees around the Y axis, because it represents the rotation from the sensor to the origin.</p>?	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsic_CalibratedTransform']/*"/>	
    /// <msdn-id>mt740393</msdn-id>	
    /// <unmanaged>MFCameraExtrinsic_CalibratedTransform</unmanaged>	
    /// <unmanaged-short>MFCameraExtrinsic_CalibratedTransform</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CameraExtrinsicCalibratedTransform
    {

        /// <summary>	
        /// <dd> <p>A reference <see cref="System.Guid"/> identifying the calibration process for the data, allowing different consumers to identify calibration data from the same process.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsic_CalibratedTransform::CalibrationId']/*"/>	
        /// <msdn-id>mt740393</msdn-id>	
        /// <unmanaged>GUID CalibrationId</unmanaged>	
        /// <unmanaged-short>GUID CalibrationId</unmanaged-short>	
        public System.Guid CalibrationId;

        /// <summary>	
        /// <dd> <p>The transform position.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsic_CalibratedTransform::Position']/*"/>	
        /// <msdn-id>mt740393</msdn-id>	
        /// <unmanaged>MF_FLOAT3 Position</unmanaged>	
        /// <unmanaged-short>MF_FLOAT3 Position</unmanaged-short>	
        public SharpDX.MediaFoundation.Float3 Position;

        /// <summary>	
        /// <dd> <p>The transform rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsic_CalibratedTransform::Orientation']/*"/>	
        /// <msdn-id>mt740393</msdn-id>	
        /// <unmanaged>MF_QUATERNION Orientation</unmanaged>	
        /// <unmanaged-short>MF_QUATERNION Orientation</unmanaged-short>	
        public SharpDX.MediaFoundation.Quaternion Orientation;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Describes the location of a camera relative to other cameras or an established external reference.  </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsics']/*"/>	
    /// <msdn-id>mt740392</msdn-id>	
    /// <unmanaged>MFCameraExtrinsics</unmanaged>	
    /// <unmanaged-short>MFCameraExtrinsics</unmanaged-short>	
    public partial struct CameraExtrinsics
    {

        /// <summary>	
        /// <dd> <p>The number of transforms in the <em>CalibratedTransforms</em> array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsics::TransformCount']/*"/>	
        /// <msdn-id>mt740392</msdn-id>	
        /// <unmanaged>unsigned int TransformCount</unmanaged>	
        /// <unmanaged-short>unsigned int TransformCount</unmanaged-short>	
        public int TransformCount;

        /// <summary>	
        /// <dd> <p>The array of transforms in the extrinsic data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraExtrinsics::CalibratedTransforms']/*"/>	
        /// <msdn-id>mt740392</msdn-id>	
        /// <unmanaged>MFCameraExtrinsic_CalibratedTransform CalibratedTransforms[1]</unmanaged>	
        /// <unmanaged-short>MFCameraExtrinsic_CalibratedTransform CalibratedTransforms</unmanaged-short>	
        public SharpDX.MediaFoundation.CameraExtrinsicCalibratedTransform[] CalibratedTransforms
        {
            get { return _CalibratedTransforms ?? (_CalibratedTransforms = new SharpDX.MediaFoundation.CameraExtrinsicCalibratedTransform[1]); }
        }
        internal SharpDX.MediaFoundation.CameraExtrinsicCalibratedTransform[] _CalibratedTransforms;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int TransformCount;
            public SharpDX.MediaFoundation.CameraExtrinsicCalibratedTransform CalibratedTransforms;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.TransformCount = @ref.TransformCount;
            fixed (void* __to = &this.CalibratedTransforms[0]) fixed (void* __from = &@ref.CalibratedTransforms) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.CameraExtrinsicCalibratedTransform));
        }
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents a polynomial lens distortion model.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel']/*"/>	
    /// <msdn-id>mt740394</msdn-id>	
    /// <unmanaged>MFCameraIntrinsic_DistortionModel</unmanaged>	
    /// <unmanaged-short>MFCameraIntrinsic_DistortionModel</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CameraIntrinsicDistortionModel
    {

        /// <summary>	
        /// <dd> <p>The first radial distortion coefficient.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel::Radial_k1']/*"/>	
        /// <msdn-id>mt740394</msdn-id>	
        /// <unmanaged>float Radial_k1</unmanaged>	
        /// <unmanaged-short>float Radial_k1</unmanaged-short>	
        public float RadialK1;

        /// <summary>	
        /// <dd> <p>The second radial distortion coefficient.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel::Radial_k2']/*"/>	
        /// <msdn-id>mt740394</msdn-id>	
        /// <unmanaged>float Radial_k2</unmanaged>	
        /// <unmanaged-short>float Radial_k2</unmanaged-short>	
        public float RadialK2;

        /// <summary>	
        /// <dd> <p>The third radial distortion coefficient.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel::Radial_k3']/*"/>	
        /// <msdn-id>mt740394</msdn-id>	
        /// <unmanaged>float Radial_k3</unmanaged>	
        /// <unmanaged-short>float Radial_k3</unmanaged-short>	
        public float RadialK3;

        /// <summary>	
        /// <dd> <p>The first tangential distortion coefficient.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel::Tangential_p1']/*"/>	
        /// <msdn-id>mt740394</msdn-id>	
        /// <unmanaged>float Tangential_p1</unmanaged>	
        /// <unmanaged-short>float Tangential_p1</unmanaged-short>	
        public float TangentialP1;

        /// <summary>	
        /// <dd> <p>The second tangential distortion coefficient.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_DistortionModel::Tangential_p2']/*"/>	
        /// <msdn-id>mt740394</msdn-id>	
        /// <unmanaged>float Tangential_p2</unmanaged>	
        /// <unmanaged-short>float Tangential_p2</unmanaged-short>	
        public float TangentialP2;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents a pinhole camera model. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For square pixels, the X and Y fields of the <strong>FocalLength</strong> should be the same.</p><p>The <strong>PrincipalPoint</strong> field is expressed in pixels, not in normalized coordinates. The  origin [0,0] is the bottom, left corner of the image.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_PinholeCameraModel']/*"/>	
    /// <msdn-id>mt740395</msdn-id>	
    /// <unmanaged>MFCameraIntrinsic_PinholeCameraModel</unmanaged>	
    /// <unmanaged-short>MFCameraIntrinsic_PinholeCameraModel</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CameraIntrinsicPinholeCameraModel
    {

        /// <summary>	
        /// <dd> <p>The focal length of the camera.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_PinholeCameraModel::FocalLength']/*"/>	
        /// <msdn-id>mt740395</msdn-id>	
        /// <unmanaged>MF_FLOAT2 FocalLength</unmanaged>	
        /// <unmanaged-short>MF_FLOAT2 FocalLength</unmanaged-short>	
        public SharpDX.MediaFoundation.Float2 FocalLength;

        /// <summary>	
        /// <dd> <p>The principal point of the camera.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCameraIntrinsic_PinholeCameraModel::PrincipalPoint']/*"/>	
        /// <msdn-id>mt740395</msdn-id>	
        /// <unmanaged>MF_FLOAT2 PrincipalPoint</unmanaged>	
        /// <unmanaged-short>MF_FLOAT2 PrincipalPoint</unmanaged-short>	
        public SharpDX.MediaFoundation.Float2 PrincipalPoint;
    }

    /// <summary>	
    /// <p>This structure contains blob information for the EV compensation feedback for the photo captured.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataExposureCompensation']/*"/>	
    /// <msdn-id>dn897242</msdn-id>	
    /// <unmanaged>CapturedMetadataExposureCompensation</unmanaged>	
    /// <unmanaged-short>CapturedMetadataExposureCompensation</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CapturedMetadataExposureCompensation
    {

        /// <summary>	
        /// <dd> <p>A KSCAMERA_EXTENDEDPROP_EVCOMP_XXX step flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataExposureCompensation::Flags']/*"/>	
        /// <msdn-id>dn897242</msdn-id>	
        /// <unmanaged>unsigned longlong Flags</unmanaged>	
        /// <unmanaged-short>unsigned longlong Flags</unmanaged-short>	
        public long Flags;

        /// <summary>	
        /// <dd> <p>The EV compensation value in units of the step specified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataExposureCompensation::Value']/*"/>	
        /// <msdn-id>dn897242</msdn-id>	
        /// <unmanaged>int Value</unmanaged>	
        /// <unmanaged-short>int Value</unmanaged-short>	
        public int Value;
    }

    /// <summary>	
    /// <p>The CapturedMetadataISOGains structure describes the blob format for <strong>MF_CAPTURE_METADATA_ISO_GAINS</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>CapturedMetadataISOGains</strong> structure only describes the blob format for the <strong>MF_CAPTURE_METADATA_ISO_GAINS</strong> attribute.  The metadata item structure for ISO gains (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + ISO gains metadata payload) is up to driver and must be 8-byte aligned.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataISOGains']/*"/>	
    /// <msdn-id>dn927550</msdn-id>	
    /// <unmanaged>CapturedMetadataISOGains</unmanaged>	
    /// <unmanaged-short>CapturedMetadataISOGains</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CapturedMetadataISOGains
    {

        /// <summary>	
        /// <dd></dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataISOGains::AnalogGain']/*"/>	
        /// <msdn-id>dn927550</msdn-id>	
        /// <unmanaged>float AnalogGain</unmanaged>	
        /// <unmanaged-short>float AnalogGain</unmanaged-short>	
        public float AnalogGain;

        /// <summary>	
        /// <dd></dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataISOGains::DigitalGain']/*"/>	
        /// <msdn-id>dn927550</msdn-id>	
        /// <unmanaged>float DigitalGain</unmanaged>	
        /// <unmanaged-short>float DigitalGain</unmanaged-short>	
        public float DigitalGain;
    }

    /// <summary>	
    /// <p>This structure describes the blob format for the <strong>MF_CAPTURE_METADATA_WHITEBALANCE_GAINS</strong> attribute.  </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>MF_CAPTURE_METADATA_WHITEBALANCE_GAINS</strong> attribute contains the white balance gains applied to R, G, B by the sensor or ISP when the preview frame was captured. This is a unitless.</p><p>The <strong>CapturedMetadataWhiteBalanceGains</strong> structure only describes the blob format for the <strong>MF_CAPTURE_METADATA_WHITEBALANCE_GAINS</strong> attribute.  The metadata item structure for white balance gains (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + white balance gains metadata payload) is up to driver and must be 8-byte aligned.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataWhiteBalanceGains']/*"/>	
    /// <msdn-id>dn927556</msdn-id>	
    /// <unmanaged>CapturedMetadataWhiteBalanceGains</unmanaged>	
    /// <unmanaged-short>CapturedMetadataWhiteBalanceGains</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CapturedMetadataWhiteBalanceGains
    {

        /// <summary>	
        /// <dd> <p>The  <strong>R</strong> value of the blob.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataWhiteBalanceGains::R']/*"/>	
        /// <msdn-id>dn927556</msdn-id>	
        /// <unmanaged>float R</unmanaged>	
        /// <unmanaged-short>float R</unmanaged-short>	
        public float R;

        /// <summary>	
        /// <dd> <p>The  <strong>G</strong> value of the blob.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataWhiteBalanceGains::G']/*"/>	
        /// <msdn-id>dn927556</msdn-id>	
        /// <unmanaged>float G</unmanaged>	
        /// <unmanaged-short>float G</unmanaged-short>	
        public float G;

        /// <summary>	
        /// <dd> <p>The  <strong>B</strong> value of the blob.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CapturedMetadataWhiteBalanceGains::B']/*"/>	
        /// <msdn-id>dn927556</msdn-id>	
        /// <unmanaged>float B</unmanaged>	
        /// <unmanaged-short>float B</unmanaged-short>	
        public float B;
    }

    /// <summary>	
    /// <p> Defines the properties of a clock. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES']/*"/>	
    /// <msdn-id>ms695206</msdn-id>	
    /// <unmanaged>MFCLOCK_PROPERTIES</unmanaged>	
    /// <unmanaged-short>MFCLOCK_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ClockProperties
    {

        /// <summary>	
        /// <dd> <p> The interval at which the clock correlates its clock time with the system time, in 100-nanosecond units. If the value is zero, the correlation is made whenever the <strong><see cref="SharpDX.MediaFoundation.Clock.GetCorrelatedTime"/></strong> method is called. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::qwCorrelationRate']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>unsigned longlong qwCorrelationRate</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwCorrelationRate</unmanaged-short>	
        public long QwCorrelationRate;

        /// <summary>	
        /// <dd> <p> The unique identifier of the underlying device that provides the time. If two clocks have the same unique identifier, they are based on the same device. If the underlying device is not shared between two clocks, the value can be <strong>GUID_NULL</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::guidClockId']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>GUID guidClockId</unmanaged>	
        /// <unmanaged-short>GUID guidClockId</unmanaged-short>	
        public System.Guid GuidClockId;

        /// <summary>	
        /// <dd> <p> A bitwise <strong>OR</strong> of flags from the <strong><see cref="SharpDX.MediaFoundation.ClockRelationalFlags"/></strong> enumeration. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::dwClockFlags']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>unsigned int dwClockFlags</unmanaged>	
        /// <unmanaged-short>unsigned int dwClockFlags</unmanaged-short>	
        public int DwClockFlags;

        /// <summary>	
        /// <dd> <p> The clock frequency in Hz. A value of <strong>MFCLOCK_FREQUENCY_HNS</strong> means that the clock has a frequency of 10 MHz (100-nanosecond ticks), which is the standard <strong>MFTIME</strong> time unit in Media Foundation. If the <strong><see cref="SharpDX.MediaFoundation.Clock.GetClockCharacteristics"/></strong> method returns the <strong><see cref="SharpDX.MediaFoundation.ClockCharacteristicsFlags.Frequency10mhz"/></strong> flag, the value of this field must be <strong>MFCLOCK_FREQUENCY_HNS</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::qwClockFrequency']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>unsigned longlong qwClockFrequency</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwClockFrequency</unmanaged-short>	
        public long QwClockFrequency;

        /// <summary>	
        /// <dd> <p> The amount of inaccuracy that may be present on the clock, in parts per billion (ppb). For example, an inaccuracy of 50 ppb means the clock might drift up to 50 seconds per billion seconds of real time. If the tolerance is not known, the value is <strong>MFCLOCK_TOLERANCE_UNKNOWN</strong>. This constant is equal to 50 parts per million (ppm). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::dwClockTolerance']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>unsigned int dwClockTolerance</unmanaged>	
        /// <unmanaged-short>unsigned int dwClockTolerance</unmanaged-short>	
        public int DwClockTolerance;

        /// <summary>	
        /// <dd> <p> The amount of jitter that may be present, in 100-nanosecond units. Jitter is the variation in the frequency due to sampling the underlying clock. Jitter does not include inaccuracies caused by drift, which is reflected in the value of <strong>dwClockTolerance</strong>. </p> <p> For clocks based on a single device, the minimum jitter is the length of the tick period (the inverse of the frequency). For example, if the frequency is 10 Hz, the jitter is 0.1 second, which is 1,000,000 in <strong>MFTIME</strong> units. This value reflects the fact that the clock might be sampled just before the next tick, resulting in a clock time that is one period less than the actual time. If the frequency is greater than 10 MHz, the jitter should be set to 1 (the minimum value). </p> <p> If a clock's underlying hardware device does not directly time stamp the incoming data, the jitter also includes the time required to dispatch the driver's interrupt service routine (ISR). In that case, the expected jitter should include the following values: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MFCLOCK_JITTER_ISR</strong></dt> </dl> </td><td> <p> Jitter due to time stamping during the device driver's ISR. </p> </td></tr> <tr><td><dl> <dt><strong>MFCLOCK_JITTER_DPC</strong></dt> </dl> </td><td> <p> Jitter due to time stamping during the deferred procedure call (DPC) processing. </p> </td></tr> <tr><td><dl> <dt><strong>MFCLOCK_JITTER_PASSIVE</strong></dt> </dl> </td><td> <p> Jitter due to dropping to normal thread execution before time stamping. </p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCLOCK_PROPERTIES::dwClockJitter']/*"/>	
        /// <msdn-id>ms695206</msdn-id>	
        /// <unmanaged>unsigned int dwClockJitter</unmanaged>	
        /// <unmanaged-short>unsigned int dwClockJitter</unmanaged-short>	
        public int DwClockJitter;
    }

    /// <summary>	
    /// <p>Contains information about the data that you want to provide as input to a protection system function.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA']/*"/>	
    /// <msdn-id>mt219216</msdn-id>	
    /// <unmanaged>MFCONTENTPROTECTIONDEVICE_INPUT_DATA</unmanaged>	
    /// <unmanaged-short>MFCONTENTPROTECTIONDEVICE_INPUT_DATA</unmanaged-short>	
    public partial struct ContentprotectiondeviceInputData
    {

        /// <summary>	
        /// <dd> <p>The identifier of the function that you need to run. This value is defined by the implementation of the protection system.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA::HWProtectionFunctionID']/*"/>	
        /// <msdn-id>mt219216</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionFunctionID</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionFunctionID</unmanaged-short>	
        public int HWProtectionFunctionID;

        /// <summary>	
        /// <dd> <p>The size of the private data that the implementation of  the security processor implementation reserved. You can determine this value by calling the <strong><see cref="SharpDX.MediaFoundation.ContentProtectionDevice.GetPrivateDataByteCount"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA::PrivateDataByteCount']/*"/>	
        /// <msdn-id>mt219216</msdn-id>	
        /// <unmanaged>unsigned int PrivateDataByteCount</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateDataByteCount</unmanaged-short>	
        public int PrivateDataByteCount;

        /// <summary>	
        /// <dd> <p>The size of the data provided as input to the protection system function that you want to run.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA::HWProtectionDataByteCount']/*"/>	
        /// <msdn-id>mt219216</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionDataByteCount</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionDataByteCount</unmanaged-short>	
        public int HWProtectionDataByteCount;

        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA::Reserved']/*"/>	
        /// <msdn-id>mt219216</msdn-id>	
        /// <unmanaged>unsigned int Reserved</unmanaged>	
        /// <unmanaged-short>unsigned int Reserved</unmanaged-short>	
        public int Reserved;

        /// <summary>	
        /// <dd> <p>The data to provide as input to the protection system function.</p> <p>If the value of the <strong>PrivateDataByteCount</strong> member is greater than 0, bytes 0 through <strong>PrivateDataByteCount</strong> - 1 are reserved for use by the independent hardware vendor (IHV). Bytes <strong>PrivateDataByteCount</strong> through <strong>HWProtectionDataByteCount</strong> + <strong>PrivateDataByteCount</strong> - 1 contain the input data for the protection system function.    </p> <p>The protection system specification defines the format and size of the DRM function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_INPUT_DATA::InputData']/*"/>	
        /// <msdn-id>mt219216</msdn-id>	
        /// <unmanaged>unsigned char InputData[4]</unmanaged>	
        /// <unmanaged-short>unsigned char InputData</unmanaged-short>	
        public byte[] InputData
        {
            get { return _InputData ?? (_InputData = new byte[4]); }
        }
        internal byte[] _InputData;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int HWProtectionFunctionID;
            public int PrivateDataByteCount;
            public int HWProtectionDataByteCount;
            public int Reserved;
            public byte InputData;
            byte __InputData1;
            byte __InputData2;
            byte __InputData3;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.HWProtectionFunctionID = @ref.HWProtectionFunctionID;
            this.PrivateDataByteCount = @ref.PrivateDataByteCount;
            this.HWProtectionDataByteCount = @ref.HWProtectionDataByteCount;
            this.Reserved = @ref.Reserved;
            fixed (void* __to = &this.InputData[0]) fixed (void* __from = &@ref.InputData) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 4 * sizeof(byte));
        }
    }

    /// <summary>	
    /// <p>Contains information about the data you received as output from a protection system function.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA']/*"/>	
    /// <msdn-id>mt219217</msdn-id>	
    /// <unmanaged>MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA</unmanaged>	
    /// <unmanaged-short>MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA</unmanaged-short>	
    public partial struct ContentprotectiondeviceOutputData
    {

        /// <summary>	
        /// <dd> <p>The size of the private data that the implementation of the security processor reserves, in bytes. You can determine this value  by calling the <strong><see cref="SharpDX.MediaFoundation.ContentProtectionDevice.GetPrivateDataByteCount"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::PrivateDataByteCount']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>unsigned int PrivateDataByteCount</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateDataByteCount</unmanaged-short>	
        public int PrivateDataByteCount;

        /// <summary>	
        /// <dd> <p>The maximum size of data that the independent hardware vendor (IHV) can return in the output buffer, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::MaxHWProtectionDataByteCount']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>unsigned int MaxHWProtectionDataByteCount</unmanaged>	
        /// <unmanaged-short>unsigned int MaxHWProtectionDataByteCount</unmanaged-short>	
        public int MaxHWProtectionDataByteCount;

        /// <summary>	
        /// <dd> <p>The size of the data that the  IHV wrote to the output buffer, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::HWProtectionDataByteCount']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionDataByteCount</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionDataByteCount</unmanaged-short>	
        public int HWProtectionDataByteCount;

        /// <summary>	
        /// <dd> <p>The result of the protection system function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::Status']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>HRESULT Status</unmanaged>	
        /// <unmanaged-short>HRESULT Status</unmanaged-short>	
        public SharpDX.Result Status;

        /// <summary>	
        /// <dd> <p>The number of 100 nanosecond units spent transporting the data.   </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::TransportTimeInHundredsOfNanoseconds']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>longlong TransportTimeInHundredsOfNanoseconds</unmanaged>	
        /// <unmanaged-short>longlong TransportTimeInHundredsOfNanoseconds</unmanaged-short>	
        public long TransportTimeInHundredsOfNanoseconds;

        /// <summary>	
        /// <dd> <p>The number of 100 nanosecond units spent running the protection system function.  	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::ExecutionTimeInHundredsOfNanoseconds']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>longlong ExecutionTimeInHundredsOfNanoseconds</unmanaged>	
        /// <unmanaged-short>longlong ExecutionTimeInHundredsOfNanoseconds</unmanaged-short>	
        public long ExecutionTimeInHundredsOfNanoseconds;

        /// <summary>	
        /// <dd> <p>The output of the protection system function.</p> <p>If the value of the <strong>PrivateDataByteCount</strong> member is greater than 0, bytes 0 through <strong>PrivateDataByteCount</strong> - 1 are reserved for IHV use.   Bytes <strong>PrivateDataByteCount</strong> through <strong>MaxHWProtectionDataByteCount</strong> + <strong>PrivateDataByteCount</strong> - 1 contain the region    of the array into which the driver should return the output data from the protection system function.</p> <p>The protection system specification defines the format and size of the    function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA::OutputData']/*"/>	
        /// <msdn-id>mt219217</msdn-id>	
        /// <unmanaged>unsigned char OutputData[4]</unmanaged>	
        /// <unmanaged-short>unsigned char OutputData</unmanaged-short>	
        public byte[] OutputData
        {
            get { return _OutputData ?? (_OutputData = new byte[4]); }
        }
        internal byte[] _OutputData;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int PrivateDataByteCount;
            public int MaxHWProtectionDataByteCount;
            public int HWProtectionDataByteCount;
            public SharpDX.Result Status;
            public long TransportTimeInHundredsOfNanoseconds;
            public long ExecutionTimeInHundredsOfNanoseconds;
            public byte OutputData;
            byte __OutputData1;
            byte __OutputData2;
            byte __OutputData3;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.PrivateDataByteCount = @ref.PrivateDataByteCount;
            this.MaxHWProtectionDataByteCount = @ref.MaxHWProtectionDataByteCount;
            this.HWProtectionDataByteCount = @ref.HWProtectionDataByteCount;
            this.Status = @ref.Status;
            this.TransportTimeInHundredsOfNanoseconds = @ref.TransportTimeInHundredsOfNanoseconds;
            this.ExecutionTimeInHundredsOfNanoseconds = @ref.ExecutionTimeInHundredsOfNanoseconds;
            fixed (void* __to = &this.OutputData[0]) fixed (void* __from = &@ref.OutputData) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 4 * sizeof(byte));
        }
    }

    /// <summary>	
    /// <p>Advises the secure processor of the  Multimedia Class Scheduler service (MMCSS) parameters so that real-time tasks can be scheduled at the expected priority.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA']/*"/>	
    /// <msdn-id>mt219218</msdn-id>	
    /// <unmanaged>MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA</unmanaged>	
    /// <unmanaged-short>MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA</unmanaged-short>	
    public partial struct ContentprotectiondeviceRealtimeclientData
    {

        /// <summary>	
        /// <dd> <p>The identifier for the MMCSS task.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA::TaskIndex']/*"/>	
        /// <msdn-id>mt219218</msdn-id>	
        /// <unmanaged>unsigned int TaskIndex</unmanaged>	
        /// <unmanaged-short>unsigned int TaskIndex</unmanaged-short>	
        public int TaskIndex;

        /// <summary>	
        /// <dd> <p>The name of the MMCSS task.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA::ClassName']/*"/>	
        /// <msdn-id>mt219218</msdn-id>	
        /// <unmanaged>wchar_t ClassName[260]</unmanaged>	
        /// <unmanaged-short>wchar_t ClassName</unmanaged-short>	
        public string ClassName;

        /// <summary>	
        /// <dd> <p>The base priority of the thread that runs the MMCSS task.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA::BasePriority']/*"/>	
        /// <msdn-id>mt219218</msdn-id>	
        /// <unmanaged>int BasePriority</unmanaged>	
        /// <unmanaged-short>int BasePriority</unmanaged-short>	
        public int BasePriority;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int TaskIndex;
            public char ClassName;
            char __ClassName1;
            char __ClassName2;
            char __ClassName3;
            char __ClassName4;
            char __ClassName5;
            char __ClassName6;
            char __ClassName7;
            char __ClassName8;
            char __ClassName9;
            char __ClassName10;
            char __ClassName11;
            char __ClassName12;
            char __ClassName13;
            char __ClassName14;
            char __ClassName15;
            char __ClassName16;
            char __ClassName17;
            char __ClassName18;
            char __ClassName19;
            char __ClassName20;
            char __ClassName21;
            char __ClassName22;
            char __ClassName23;
            char __ClassName24;
            char __ClassName25;
            char __ClassName26;
            char __ClassName27;
            char __ClassName28;
            char __ClassName29;
            char __ClassName30;
            char __ClassName31;
            char __ClassName32;
            char __ClassName33;
            char __ClassName34;
            char __ClassName35;
            char __ClassName36;
            char __ClassName37;
            char __ClassName38;
            char __ClassName39;
            char __ClassName40;
            char __ClassName41;
            char __ClassName42;
            char __ClassName43;
            char __ClassName44;
            char __ClassName45;
            char __ClassName46;
            char __ClassName47;
            char __ClassName48;
            char __ClassName49;
            char __ClassName50;
            char __ClassName51;
            char __ClassName52;
            char __ClassName53;
            char __ClassName54;
            char __ClassName55;
            char __ClassName56;
            char __ClassName57;
            char __ClassName58;
            char __ClassName59;
            char __ClassName60;
            char __ClassName61;
            char __ClassName62;
            char __ClassName63;
            char __ClassName64;
            char __ClassName65;
            char __ClassName66;
            char __ClassName67;
            char __ClassName68;
            char __ClassName69;
            char __ClassName70;
            char __ClassName71;
            char __ClassName72;
            char __ClassName73;
            char __ClassName74;
            char __ClassName75;
            char __ClassName76;
            char __ClassName77;
            char __ClassName78;
            char __ClassName79;
            char __ClassName80;
            char __ClassName81;
            char __ClassName82;
            char __ClassName83;
            char __ClassName84;
            char __ClassName85;
            char __ClassName86;
            char __ClassName87;
            char __ClassName88;
            char __ClassName89;
            char __ClassName90;
            char __ClassName91;
            char __ClassName92;
            char __ClassName93;
            char __ClassName94;
            char __ClassName95;
            char __ClassName96;
            char __ClassName97;
            char __ClassName98;
            char __ClassName99;
            char __ClassName100;
            char __ClassName101;
            char __ClassName102;
            char __ClassName103;
            char __ClassName104;
            char __ClassName105;
            char __ClassName106;
            char __ClassName107;
            char __ClassName108;
            char __ClassName109;
            char __ClassName110;
            char __ClassName111;
            char __ClassName112;
            char __ClassName113;
            char __ClassName114;
            char __ClassName115;
            char __ClassName116;
            char __ClassName117;
            char __ClassName118;
            char __ClassName119;
            char __ClassName120;
            char __ClassName121;
            char __ClassName122;
            char __ClassName123;
            char __ClassName124;
            char __ClassName125;
            char __ClassName126;
            char __ClassName127;
            char __ClassName128;
            char __ClassName129;
            char __ClassName130;
            char __ClassName131;
            char __ClassName132;
            char __ClassName133;
            char __ClassName134;
            char __ClassName135;
            char __ClassName136;
            char __ClassName137;
            char __ClassName138;
            char __ClassName139;
            char __ClassName140;
            char __ClassName141;
            char __ClassName142;
            char __ClassName143;
            char __ClassName144;
            char __ClassName145;
            char __ClassName146;
            char __ClassName147;
            char __ClassName148;
            char __ClassName149;
            char __ClassName150;
            char __ClassName151;
            char __ClassName152;
            char __ClassName153;
            char __ClassName154;
            char __ClassName155;
            char __ClassName156;
            char __ClassName157;
            char __ClassName158;
            char __ClassName159;
            char __ClassName160;
            char __ClassName161;
            char __ClassName162;
            char __ClassName163;
            char __ClassName164;
            char __ClassName165;
            char __ClassName166;
            char __ClassName167;
            char __ClassName168;
            char __ClassName169;
            char __ClassName170;
            char __ClassName171;
            char __ClassName172;
            char __ClassName173;
            char __ClassName174;
            char __ClassName175;
            char __ClassName176;
            char __ClassName177;
            char __ClassName178;
            char __ClassName179;
            char __ClassName180;
            char __ClassName181;
            char __ClassName182;
            char __ClassName183;
            char __ClassName184;
            char __ClassName185;
            char __ClassName186;
            char __ClassName187;
            char __ClassName188;
            char __ClassName189;
            char __ClassName190;
            char __ClassName191;
            char __ClassName192;
            char __ClassName193;
            char __ClassName194;
            char __ClassName195;
            char __ClassName196;
            char __ClassName197;
            char __ClassName198;
            char __ClassName199;
            char __ClassName200;
            char __ClassName201;
            char __ClassName202;
            char __ClassName203;
            char __ClassName204;
            char __ClassName205;
            char __ClassName206;
            char __ClassName207;
            char __ClassName208;
            char __ClassName209;
            char __ClassName210;
            char __ClassName211;
            char __ClassName212;
            char __ClassName213;
            char __ClassName214;
            char __ClassName215;
            char __ClassName216;
            char __ClassName217;
            char __ClassName218;
            char __ClassName219;
            char __ClassName220;
            char __ClassName221;
            char __ClassName222;
            char __ClassName223;
            char __ClassName224;
            char __ClassName225;
            char __ClassName226;
            char __ClassName227;
            char __ClassName228;
            char __ClassName229;
            char __ClassName230;
            char __ClassName231;
            char __ClassName232;
            char __ClassName233;
            char __ClassName234;
            char __ClassName235;
            char __ClassName236;
            char __ClassName237;
            char __ClassName238;
            char __ClassName239;
            char __ClassName240;
            char __ClassName241;
            char __ClassName242;
            char __ClassName243;
            char __ClassName244;
            char __ClassName245;
            char __ClassName246;
            char __ClassName247;
            char __ClassName248;
            char __ClassName249;
            char __ClassName250;
            char __ClassName251;
            char __ClassName252;
            char __ClassName253;
            char __ClassName254;
            char __ClassName255;
            char __ClassName256;
            char __ClassName257;
            char __ClassName258;
            char __ClassName259;
            public int BasePriority;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.TaskIndex = @ref.TaskIndex;
            fixed (char* __ptr = &@ref.ClassName) this.ClassName = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 260);
            this.BasePriority = @ref.BasePriority;
        }
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DIRTYRECT_INFO']/*"/>	
    /// <unmanaged>DIRTYRECT_INFO</unmanaged>	
    /// <unmanaged-short>DIRTYRECT_INFO</unmanaged-short>	
    public partial struct DirtyrectInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DIRTYRECT_INFO::FrameNumber']/*"/>	
        /// <unmanaged>unsigned int FrameNumber</unmanaged>	
        /// <unmanaged-short>unsigned int FrameNumber</unmanaged-short>	
        public int FrameNumber;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DIRTYRECT_INFO::NumDirtyRects']/*"/>	
        /// <unmanaged>unsigned int NumDirtyRects</unmanaged>	
        /// <unmanaged-short>unsigned int NumDirtyRects</unmanaged-short>	
        public int NumDirtyRects;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DIRTYRECT_INFO::DirtyRects']/*"/>	
        /// <unmanaged>RECT DirtyRects[1]</unmanaged>	
        /// <unmanaged-short>RECT DirtyRects</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle[] DirtyRects
        {
            get { return _DirtyRects ?? (_DirtyRects = new SharpDX.Mathematics.Interop.RawRectangle[1]); }
        }
        internal SharpDX.Mathematics.Interop.RawRectangle[] _DirtyRects;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int FrameNumber;
            public int NumDirtyRects;
            public SharpDX.Mathematics.Interop.RawRectangle DirtyRects;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.FrameNumber = @ref.FrameNumber;
            this.NumDirtyRects = @ref.NumDirtyRects;
            fixed (void* __to = &this.DirtyRects[0]) fixed (void* __from = &@ref.DirtyRects) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.Mathematics.Interop.RawRectangle));
        }
    }

    /// <summary>	
    /// <p> </p><p>The <strong><see cref="SharpDX.MediaFoundation.DmoMediaType"/></strong> structure describes the format of the data used by a stream in a Microsoft DirectX Media Object (DMO).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is identical to the DirectShow <strong><see cref="SharpDX.Win32.Unsupported.AMMediaType"/></strong> structure. The <strong>bFixedSizeSamples</strong>, <strong>bTemporalCompression</strong>, and <strong>lSampleSize</strong> members are for compatibility with DirectShow. Other DMO clients are not required to use them.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE']/*"/>	
    /// <msdn-id>dd375504</msdn-id>	
    /// <unmanaged>DMO_MEDIA_TYPE</unmanaged>	
    /// <unmanaged-short>DMO_MEDIA_TYPE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct DmoMediaType
    {

        /// <summary>	
        /// <dd> <p>Major type <see cref="System.Guid"/> of the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::majortype']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>GUID majortype</unmanaged>	
        /// <unmanaged-short>GUID majortype</unmanaged-short>	
        public System.Guid Majortype;

        /// <summary>	
        /// <dd> <p>Subtype <see cref="System.Guid"/> of the stream.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::subtype']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>GUID subtype</unmanaged>	
        /// <unmanaged-short>GUID subtype</unmanaged-short>	
        public System.Guid Subtype;

        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, samples are of a fixed size. This field is informational only. For audio, it is generally set to <strong>TRUE</strong>. For video, it is usually <strong>TRUE</strong> for uncompressed video and <strong><see cref="SharpDX.Result.False"/></strong> for compressed video.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::bFixedSizeSamples']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>BOOL bFixedSizeSamples</unmanaged>	
        /// <unmanaged-short>BOOL bFixedSizeSamples</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool BFixedSizeSamples;

        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, samples are compressed using temporal (interframe) compression. (A value of <strong>TRUE</strong> indicates that not all frames are key frames.) This field is informational only.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::bTemporalCompression']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>BOOL bTemporalCompression</unmanaged>	
        /// <unmanaged-short>BOOL bTemporalCompression</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool BTemporalCompression;

        /// <summary>	
        /// <dd> <p>Size of the sample in bytes. For compressed data, the value can be zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::lSampleSize']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>unsigned int lSampleSize</unmanaged>	
        /// <unmanaged-short>unsigned int lSampleSize</unmanaged-short>	
        public int LSampleSize;

        /// <summary>	
        /// <dd> <p><see cref="System.Guid"/> specifying the format type. The <strong>pbFormat</strong> member points to the corresponding format structure. Format types include the following.</p> <table> <tr><th>Format type</th><th>Format structure</th></tr> <tr><td><dl> <dt><strong>FORMAT_DvInfo</strong></dt> </dl> </td><td> <p> <strong>DVINFO</strong> </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_MPEG2Video</strong></dt> </dl> </td><td> <p> <strong><see cref="SharpDX.MediaFoundation.Mpeg2VideoInformation"/></strong> </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_MPEGVideo</strong></dt> </dl> </td><td> <p> <strong><see cref="SharpDX.MediaFoundation.Mpeg1VideoInformation"/></strong> </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_None</strong></dt> </dl> </td><td> <p>None.</p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo</strong></dt> </dl> </td><td> <p> <strong><see cref="SharpDX.Win32.Unsupported.VideoInfoHeader"/></strong> </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_VideoInfo2</strong></dt> </dl> </td><td> <p> <strong><see cref="SharpDX.MediaFoundation.VideoInformationHeader2"/></strong> </p> </td></tr> <tr><td><dl> <dt><strong>FORMAT_WaveFormatEx</strong></dt> </dl> </td><td> <p> <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> </p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::formattype']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>GUID formattype</unmanaged>	
        /// <unmanaged-short>GUID formattype</unmanaged-short>	
        public System.Guid Formattype;

        /// <summary>	
        /// <dd> <p>Not used. Set to <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::pUnk']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>IUnknown* pUnk</unmanaged>	
        /// <unmanaged-short>IUnknown pUnk</unmanaged-short>	
        public System.IntPtr PUnk;

        /// <summary>	
        /// <dd> <p>Size of the format block of the media type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::cbFormat']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>unsigned int cbFormat</unmanaged>	
        /// <unmanaged-short>unsigned int cbFormat</unmanaged-short>	
        public int CbFormat;

        /// <summary>	
        /// <dd> <p>Pointer to the format structure. The structure type is specified by the <strong>formattype</strong> member. The format structure must be present, unless <strong>formattype</strong> is GUID_NULL or FORMAT_None.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_MEDIA_TYPE::pbFormat']/*"/>	
        /// <msdn-id>dd375504</msdn-id>	
        /// <unmanaged>unsigned char* pbFormat</unmanaged>	
        /// <unmanaged-short>unsigned char pbFormat</unmanaged-short>	
        public System.IntPtr PbFormat;
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFER']/*"/>	
    /// <unmanaged>DMO_OUTPUT_DATA_BUFFER</unmanaged>	
    /// <unmanaged-short>DMO_OUTPUT_DATA_BUFFER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct DmoOutputDataBuffer
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFER::pBuffer']/*"/>	
        /// <unmanaged>IMediaBuffer* pBuffer</unmanaged>	
        /// <unmanaged-short>IMediaBuffer pBuffer</unmanaged-short>	
        public System.IntPtr PBuffer;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFER::dwStatus']/*"/>	
        /// <unmanaged>unsigned int dwStatus</unmanaged>	
        /// <unmanaged-short>unsigned int dwStatus</unmanaged-short>	
        public int DwStatus;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFER::rtTimestamp']/*"/>	
        /// <unmanaged>longlong rtTimestamp</unmanaged>	
        /// <unmanaged-short>longlong rtTimestamp</unmanaged-short>	
        public long RtTimestamp;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DMO_OUTPUT_DATA_BUFFER::rtTimelength']/*"/>	
        /// <unmanaged>longlong rtTimelength</unmanaged>	
        /// <unmanaged-short>longlong rtTimelength</unmanaged-short>	
        public long RtTimelength;
    }

    /// <summary>	
    /// <p>The <strong>FaceCharacterization</strong> structure describes the blob format for the <strong>MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS</strong> attribute.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS</strong> attribute contains the blink and facial expression state for the face ROIs identified in <strong>MF_CAPTURE_METADATA_FACEROIS</strong>.  For a  device that does not support blink or facial expression detection, this attribute should be omitted.</p><p>The facial expressions that can be detected are defined as follows:</p><pre>#define MF_METADATAFACIALEXPRESSION_SMILE             0x00000001</pre><p>The <strong>FaceCharacterizationBlobHeader</strong> and <strong>FaceCharacterization</strong> structures only describe the blob format for the <strong>MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS</strong> attribute.  The metadata item structure for the face characterizations (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + face characterizations metadata payload) is up to driver and must be 8-byte aligned. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterization']/*"/>	
    /// <msdn-id>dn927642</msdn-id>	
    /// <unmanaged>FaceCharacterization</unmanaged>	
    /// <unmanaged-short>FaceCharacterization</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FaceCharacterization
    {

        /// <summary>	
        /// <dd> <p>0 indicates no blink for the left eye, 100 indicates definite blink for the left eye (0 - 100).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterization::BlinkScoreLeft']/*"/>	
        /// <msdn-id>dn927642</msdn-id>	
        /// <unmanaged>unsigned int BlinkScoreLeft</unmanaged>	
        /// <unmanaged-short>unsigned int BlinkScoreLeft</unmanaged-short>	
        public int BlinkScoreLeft;

        /// <summary>	
        /// <dd> <p>0 indicates no blink for the right eye, 100 indicates definite blink for the right eye (0 - 100).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterization::BlinkScoreRight']/*"/>	
        /// <msdn-id>dn927642</msdn-id>	
        /// <unmanaged>unsigned int BlinkScoreRight</unmanaged>	
        /// <unmanaged-short>unsigned int BlinkScoreRight</unmanaged-short>	
        public int BlinkScoreRight;

        /// <summary>	
        /// <dd> <p>A  defined facial expression value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterization::FacialExpression']/*"/>	
        /// <msdn-id>dn927642</msdn-id>	
        /// <unmanaged>unsigned int FacialExpression</unmanaged>	
        /// <unmanaged-short>unsigned int FacialExpression</unmanaged-short>	
        public int FacialExpression;

        /// <summary>	
        /// <dd> <p>0 indicates no such facial expression as identified, 100 indicates definite such facial expression as defined (0 - 100).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterization::FacialExpressionScore']/*"/>	
        /// <msdn-id>dn927642</msdn-id>	
        /// <unmanaged>unsigned int FacialExpressionScore</unmanaged>	
        /// <unmanaged-short>unsigned int FacialExpressionScore</unmanaged-short>	
        public int FacialExpressionScore;
    }

    /// <summary>	
    /// <p>The <strong>FaceCharacterizationBlobHeader</strong> structure  describes the size and count information of the blob format for the <strong>MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS</strong> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterizationBlobHeader']/*"/>	
    /// <msdn-id>dn927643</msdn-id>	
    /// <unmanaged>FaceCharacterizationBlobHeader</unmanaged>	
    /// <unmanaged-short>FaceCharacterizationBlobHeader</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FaceCharacterizationBlobHeader
    {

        /// <summary>	
        /// <dd> <p>Size of this header + all following <strong>FaceCharacterization</strong> structures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterizationBlobHeader::Size']/*"/>	
        /// <msdn-id>dn927643</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;

        /// <summary>	
        /// <dd> <p>Number of <strong>FaceCharacterization</strong> structures in the blob. Must match the number of <strong>FaceRectInfo</strong> structures in <strong>FaceRectInfoBlobHeader</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceCharacterizationBlobHeader::Count']/*"/>	
        /// <msdn-id>dn927643</msdn-id>	
        /// <unmanaged>unsigned int Count</unmanaged>	
        /// <unmanaged-short>unsigned int Count</unmanaged-short>	
        public int Count;
    }

    /// <summary>	
    /// <p>The <strong>FaceRectInfo</strong> structure describes the blob format for the <strong>MF_CAPTURE_METADATA_FACEROIS</strong> attribute.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>MF_CAPTURE_METADATA_FACEROIS</strong> attribute contains the face rectangle info detected by the driver.   By default driver\MFT0 should provide the face information on preview stream.  If the driver advertises the capability on other streams, driver\MFT must provide the face info on the corresponding streams if the application enables face detection on those streams.  When video stabilization is enabled on the driver, the face information should be provided post-video stabilization. The dominate face must be the first <strong>FaceRectInfo</strong> in the blob.</p><p>The <strong>FaceRectInfoBlobHeader</strong> and <strong>FaceRectInfo</strong> structures only describe the blob format for the <strong>MF_CAPTURE_METADATA_FACEROIS</strong> attribute.  The metadata item structure for face ROIs (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + face ROIs metadata payload) is up to driver and must be 8-byte aligned.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfo']/*"/>	
    /// <msdn-id>dn927644</msdn-id>	
    /// <unmanaged>FaceRectInfo</unmanaged>	
    /// <unmanaged-short>FaceRectInfo</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FaceRectInfo
    {

        /// <summary>	
        /// <dd> <p>Relative coordinates on the frame that face detection is running (Q31 format).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfo::Region']/*"/>	
        /// <msdn-id>dn927644</msdn-id>	
        /// <unmanaged>RECT Region</unmanaged>	
        /// <unmanaged-short>RECT Region</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle Region;

        /// <summary>	
        /// <dd> <p>Confidence level of the region being a face (0 - 100).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfo::confidenceLevel']/*"/>	
        /// <msdn-id>dn927644</msdn-id>	
        /// <unmanaged>int confidenceLevel</unmanaged>	
        /// <unmanaged-short>int confidenceLevel</unmanaged-short>	
        public int ConfidenceLevel;
    }

    /// <summary>	
    /// <p>The <strong>FaceRectInfoBlobHeader</strong> structure describes the size and count information of the blob format for the <strong>MF_CAPTURE_METADATA_FACEROIS</strong> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfoBlobHeader']/*"/>	
    /// <msdn-id>dn927645</msdn-id>	
    /// <unmanaged>FaceRectInfoBlobHeader</unmanaged>	
    /// <unmanaged-short>FaceRectInfoBlobHeader</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FaceRectInfoBlobHeader
    {

        /// <summary>	
        /// <dd> <p>Size of this header + all following <strong>FaceRectInfo</strong> structures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfoBlobHeader::Size']/*"/>	
        /// <msdn-id>dn927645</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;

        /// <summary>	
        /// <dd> <p>Number of <strong>FaceRectInfo</strong> structures in the blob.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FaceRectInfoBlobHeader::Count']/*"/>	
        /// <msdn-id>dn927645</msdn-id>	
        /// <unmanaged>unsigned int Count</unmanaged>	
        /// <unmanaged-short>unsigned int Count</unmanaged-short>	
        public int Count;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>A vector with two components.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT2']/*"/>	
    /// <msdn-id>mt740402</msdn-id>	
    /// <unmanaged>MF_FLOAT2</unmanaged>	
    /// <unmanaged-short>MF_FLOAT2</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Float2
    {

        /// <summary>	
        /// <dd> <p>X component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT2::x']/*"/>	
        /// <msdn-id>mt740402</msdn-id>	
        /// <unmanaged>float x</unmanaged>	
        /// <unmanaged-short>float x</unmanaged-short>	
        public float X;

        /// <summary>	
        /// <dd> <p>Y component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT2::y']/*"/>	
        /// <msdn-id>mt740402</msdn-id>	
        /// <unmanaged>float y</unmanaged>	
        /// <unmanaged-short>float y</unmanaged-short>	
        public float Y;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>A vector with three components.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT3']/*"/>	
    /// <msdn-id>mt740403</msdn-id>	
    /// <unmanaged>MF_FLOAT3</unmanaged>	
    /// <unmanaged-short>MF_FLOAT3</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Float3
    {

        /// <summary>	
        /// <dd> <p>X component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT3::x']/*"/>	
        /// <msdn-id>mt740403</msdn-id>	
        /// <unmanaged>float x</unmanaged>	
        /// <unmanaged-short>float x</unmanaged-short>	
        public float X;

        /// <summary>	
        /// <dd> <p>Y component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT3::y']/*"/>	
        /// <msdn-id>mt740403</msdn-id>	
        /// <unmanaged>float y</unmanaged>	
        /// <unmanaged-short>float y</unmanaged-short>	
        public float Y;

        /// <summary>	
        /// <dd> <p>Z component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_FLOAT3::z']/*"/>	
        /// <msdn-id>mt740403</msdn-id>	
        /// <unmanaged>float z</unmanaged>	
        /// <unmanaged-short>float z</unmanaged-short>	
        public float Z;
    }

    /// <summary>	
    /// <p> </p><p>Contains coefficients used to transform multichannel audio into a smaller number of audio channels. This process is called <em>fold-down</em>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To specify this information in the media type, set the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioFolddownMatrix"/></strong> attribute.</p><p>The ASF media source supports fold-down from six channels (5.1 audio) to two channels (stereo). It gets the information from the g_wszFold6To2Channels3 attribute in the ASF header. This attribute is documented in the Windows Media Format SDK documentation.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX']/*"/>	
    /// <msdn-id>aa369731</msdn-id>	
    /// <unmanaged>MFFOLDDOWN_MATRIX</unmanaged>	
    /// <unmanaged-short>MFFOLDDOWN_MATRIX</unmanaged-short>	
    public partial struct FolddownMatrix
    {

        /// <summary>	
        /// <dd> <p>Size of the structure, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX::cbSize']/*"/>	
        /// <msdn-id>aa369731</msdn-id>	
        /// <unmanaged>unsigned int cbSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbSize</unmanaged-short>	
        public int CbSize;

        /// <summary>	
        /// <dd> <p>Number of source channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX::cSrcChannels']/*"/>	
        /// <msdn-id>aa369731</msdn-id>	
        /// <unmanaged>unsigned int cSrcChannels</unmanaged>	
        /// <unmanaged-short>unsigned int cSrcChannels</unmanaged-short>	
        public int CSrcChannels;

        /// <summary>	
        /// <dd> <p>Number of destination channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX::cDstChannels']/*"/>	
        /// <msdn-id>aa369731</msdn-id>	
        /// <unmanaged>unsigned int cDstChannels</unmanaged>	
        /// <unmanaged-short>unsigned int cDstChannels</unmanaged-short>	
        public int CDstChannels;

        /// <summary>	
        /// <dd> <p>Specifies the assignment of audio channels to speaker positions in the transformed audio. This member is a bitwise <strong>OR</strong> of flags that define the speaker positions. For a list of valid flags, see <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.AudioChannelMask"/></strong> attribute.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX::dwChannelMask']/*"/>	
        /// <msdn-id>aa369731</msdn-id>	
        /// <unmanaged>unsigned int dwChannelMask</unmanaged>	
        /// <unmanaged-short>unsigned int dwChannelMask</unmanaged-short>	
        public int DwChannelMask;

        /// <summary>	
        /// <dd> <p>Array that contains the fold-down coefficients. The number of coefficients is <strong>cSrcChannels</strong>?<strong>cDstChannels</strong>. If the number of coefficients is less than the size of the array, the remaining elements in the array are ignored. For more information about how the coefficients are applied, see Windows Media Audio Professional Codec Features.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFFOLDDOWN_MATRIX::Coeff']/*"/>	
        /// <msdn-id>aa369731</msdn-id>	
        /// <unmanaged>int Coeff[64]</unmanaged>	
        /// <unmanaged-short>int Coeff</unmanaged-short>	
        public int[] Coeff
        {
            get { return _Coeff ?? (_Coeff = new int[64]); }
        }
        internal int[] _Coeff;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int CbSize;
            public int CSrcChannels;
            public int CDstChannels;
            public int DwChannelMask;
            public int Coeff;
            int __Coeff1;
            int __Coeff2;
            int __Coeff3;
            int __Coeff4;
            int __Coeff5;
            int __Coeff6;
            int __Coeff7;
            int __Coeff8;
            int __Coeff9;
            int __Coeff10;
            int __Coeff11;
            int __Coeff12;
            int __Coeff13;
            int __Coeff14;
            int __Coeff15;
            int __Coeff16;
            int __Coeff17;
            int __Coeff18;
            int __Coeff19;
            int __Coeff20;
            int __Coeff21;
            int __Coeff22;
            int __Coeff23;
            int __Coeff24;
            int __Coeff25;
            int __Coeff26;
            int __Coeff27;
            int __Coeff28;
            int __Coeff29;
            int __Coeff30;
            int __Coeff31;
            int __Coeff32;
            int __Coeff33;
            int __Coeff34;
            int __Coeff35;
            int __Coeff36;
            int __Coeff37;
            int __Coeff38;
            int __Coeff39;
            int __Coeff40;
            int __Coeff41;
            int __Coeff42;
            int __Coeff43;
            int __Coeff44;
            int __Coeff45;
            int __Coeff46;
            int __Coeff47;
            int __Coeff48;
            int __Coeff49;
            int __Coeff50;
            int __Coeff51;
            int __Coeff52;
            int __Coeff53;
            int __Coeff54;
            int __Coeff55;
            int __Coeff56;
            int __Coeff57;
            int __Coeff58;
            int __Coeff59;
            int __Coeff60;
            int __Coeff61;
            int __Coeff62;
            int __Coeff63;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.CbSize = @ref.CbSize;
            this.CSrcChannels = @ref.CSrcChannels;
            this.CDstChannels = @ref.CDstChannels;
            this.DwChannelMask = @ref.DwChannelMask;
            fixed (void* __to = &this.Coeff[0]) fixed (void* __from = &@ref.Coeff) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 64 * sizeof(int));
        }
    }

    /// <summary>	
    /// <p>The <strong>HistogramBlobHeader</strong> structure describes the blob size and the number of histograms in the blob for the <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramBlobHeader']/*"/>	
    /// <msdn-id>dn927646</msdn-id>	
    /// <unmanaged>HistogramBlobHeader</unmanaged>	
    /// <unmanaged-short>HistogramBlobHeader</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct HistogramBlobHeader
    {

        /// <summary>	
        /// <dd> <p>Size of the entire histogram blob in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramBlobHeader::Size']/*"/>	
        /// <msdn-id>dn927646</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;

        /// <summary>	
        /// <dd> <p>Number of histograms in the blob. Each histogram is identified by a <strong>HistogramHeader</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramBlobHeader::Histograms']/*"/>	
        /// <msdn-id>dn927646</msdn-id>	
        /// <unmanaged>unsigned int Histograms</unmanaged>	
        /// <unmanaged-short>unsigned int Histograms</unmanaged-short>	
        public int Histograms;
    }

    /// <summary>	
    /// <p>The  <strong>HistogramDataHeader</strong> structure describes the blob format for the <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong> attribute.  </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramDataHeader']/*"/>	
    /// <msdn-id>dn927647</msdn-id>	
    /// <unmanaged>HistogramDataHeader</unmanaged>	
    /// <unmanaged-short>HistogramDataHeader</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct HistogramDataHeader
    {

        /// <summary>	
        /// <dd> <p>Size in bytes of this header + all following histogram data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramDataHeader::Size']/*"/>	
        /// <msdn-id>dn927647</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;

        /// <summary>	
        /// <dd> <p>Mask of the color channel for the histogram data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramDataHeader::ChannelMask']/*"/>	
        /// <msdn-id>dn927647</msdn-id>	
        /// <unmanaged>unsigned int ChannelMask</unmanaged>	
        /// <unmanaged-short>unsigned int ChannelMask</unmanaged-short>	
        public int ChannelMask;

        /// <summary>	
        /// <dd> <p>1 if linear, 0 if nonlinear.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramDataHeader::Linear']/*"/>	
        /// <msdn-id>dn927647</msdn-id>	
        /// <unmanaged>unsigned int Linear</unmanaged>	
        /// <unmanaged-short>unsigned int Linear</unmanaged-short>	
        public int Linear;
    }

    /// <summary>	
    /// <p>The  <strong>HistogramGrid</strong> structure describes the blob format for <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong>.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramGrid']/*"/>	
    /// <msdn-id>dn927648</msdn-id>	
    /// <unmanaged>HistogramGrid</unmanaged>	
    /// <unmanaged-short>HistogramGrid</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct HistogramGrid
    {

        /// <summary>	
        /// <dd> <p>Width of the sensor output that histogram is collected from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramGrid::Width']/*"/>	
        /// <msdn-id>dn927648</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;

        /// <summary>	
        /// <dd> <p>Height of the sensor output that histogram is collected from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramGrid::Height']/*"/>	
        /// <msdn-id>dn927648</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;

        /// <summary>	
        /// <dd> <p>Absolute coordinates of the region on the sensor output that the histogram is collected for.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramGrid::Region']/*"/>	
        /// <msdn-id>dn927648</msdn-id>	
        /// <unmanaged>RECT Region</unmanaged>	
        /// <unmanaged-short>RECT Region</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle Region;
    }

    /// <summary>	
    /// <p>The <strong>HistogramHeader</strong> structure describes the blob format for <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong> attribute contains a  histogram when a preview frame is captured.</p><p>For the <strong>ChannelMasks</strong> field, the following bitmasks indicate the available channels in the histogram:</p><pre>#define MF_HISTOGRAM_CHANNEL_Y  0x00000001	
    /// #define MF_HISTOGRAM_CHANNEL_R  0x00000002	
    /// #define MF_HISTOGRAM_CHANNEL_G  0x00000004	
    /// #define MF_HISTOGRAM_CHANNEL_B  0x00000008	
    /// #define MF_HISTOGRAM_CHANNEL_Cb 0x00000010	
    /// #define MF_HISTOGRAM_CHANNEL_Cr 0x00000020</pre><p>Each blob can contain multiple histograms collected from different regions or different color spaces of the same frame. Each histogram in the blob is identified by its own <strong>HistogramHeader</strong>. Each histogram has its own region and sensor output size associated. For full frame histogram, the region will match the sensor output size specified in <strong>HistogramGrid</strong>.</p><p>Histogram data for all available channels are grouped under one histogram. Histogram data for each channel is identified by a <strong>HistogramDataHeader</strong> immediate above the data. <strong>ChannelMasks</strong> indicate how many and what channels are having the histogram data, which is the bitwise OR of the supported <strong>MF_HISTOGRAM_CHANNEL_*</strong> bitmasks as defined above. <strong>ChannelMask</strong> indicates what channel the data is for, which is identified by any one of the <strong>MF_HISTOGRAM_CHANNEL_*</strong> bitmasks.</p><p>Histogram data is an array of <strong>ULONG</strong> with each entry representing the number of pixels falling under a set of tonal values as categorized by the bin.  The data in the array should start from bin 0 to bin N-1, where N is the number of bins in the histogram, for example, <strong>HistogramBlobHeader.Bins</strong>.</p><p>For Windows?10, if <strong>KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM</strong> is supported, at minimum a full frame histogram with Y channel must be provided which should be the first histogram in the histogram blob.	
    /// Note that <strong>HistogramBlobHeader</strong>, <strong>HistogramHeader</strong>, <strong>HistogramDataHeader</strong> and Histogram data only describe the blob format for the <strong>MF_CAPTURE_METADATA_HISTOGRAM</strong> attribute.  The metadata item structure for the histogram (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + all histogram metadata payload) is up to driver and must be 8-byte aligned.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader']/*"/>	
    /// <msdn-id>dn927649</msdn-id>	
    /// <unmanaged>HistogramHeader</unmanaged>	
    /// <unmanaged-short>HistogramHeader</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct HistogramHeader
    {

        /// <summary>	
        /// <dd> <p>Size of this header + (<strong>HistogramDataHeader</strong> + histogram data following) * number of channels available.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader::Size']/*"/>	
        /// <msdn-id>dn927649</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;

        /// <summary>	
        /// <dd> <p>Number of bins in the histogram.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader::Bins']/*"/>	
        /// <msdn-id>dn927649</msdn-id>	
        /// <unmanaged>unsigned int Bins</unmanaged>	
        /// <unmanaged-short>unsigned int Bins</unmanaged-short>	
        public int Bins;

        /// <summary>	
        /// <dd> <p>Color space that the histogram is collected from</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader::FourCC']/*"/>	
        /// <msdn-id>dn927649</msdn-id>	
        /// <unmanaged>unsigned int FourCC</unmanaged>	
        /// <unmanaged-short>unsigned int FourCC</unmanaged-short>	
        public int FourCC;

        /// <summary>	
        /// <dd> <p>Masks of the color channels that the histogram is collected for.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader::ChannelMasks']/*"/>	
        /// <msdn-id>dn927649</msdn-id>	
        /// <unmanaged>unsigned int ChannelMasks</unmanaged>	
        /// <unmanaged-short>unsigned int ChannelMasks</unmanaged-short>	
        public int ChannelMasks;

        /// <summary>	
        /// <dd> <p>Grid that the histogram is collected from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HistogramHeader::Grid']/*"/>	
        /// <msdn-id>dn927649</msdn-id>	
        /// <unmanaged>HistogramGrid Grid</unmanaged>	
        /// <unmanaged-short>HistogramGrid Grid</unmanaged-short>	
        public SharpDX.MediaFoundation.HistogramGrid Grid;
    }

    /// <summary>	
    /// <p> </p><p>Describes an action requested by an output trust authority (OTA). The request is sent to an input trust authority (ITA).</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_ACTION']/*"/>	
    /// <msdn-id>ms695312</msdn-id>	
    /// <unmanaged>MFINPUTTRUSTAUTHORITY_ACCESS_ACTION</unmanaged>	
    /// <unmanaged-short>MFINPUTTRUSTAUTHORITY_ACCESS_ACTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct InputTrustauthorityAccessAction
    {

        /// <summary>	
        /// <dd> <p>Specifies the action as a member of the <strong><see cref="SharpDX.MediaFoundation.PolicymanagerAction"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_ACTION::Action']/*"/>	
        /// <msdn-id>ms695312</msdn-id>	
        /// <unmanaged>MFPOLICYMANAGER_ACTION Action</unmanaged>	
        /// <unmanaged-short>MFPOLICYMANAGER_ACTION Action</unmanaged-short>	
        public SharpDX.MediaFoundation.PolicymanagerAction Action;

        /// <summary>	
        /// <dd> <p>Pointer to a buffer that contains a ticket object, provided by the OTA.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_ACTION::pbTicket']/*"/>	
        /// <msdn-id>ms695312</msdn-id>	
        /// <unmanaged>unsigned char* pbTicket</unmanaged>	
        /// <unmanaged-short>unsigned char pbTicket</unmanaged-short>	
        public System.IntPtr PbTicket;

        /// <summary>	
        /// <dd> <p>Size of the ticket object, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_ACTION::cbTicket']/*"/>	
        /// <msdn-id>ms695312</msdn-id>	
        /// <unmanaged>unsigned int cbTicket</unmanaged>	
        /// <unmanaged-short>unsigned int cbTicket</unmanaged-short>	
        public int CbTicket;
    }

    /// <summary>	
    /// <p> </p><p>Contains parameters for the <strong><see cref="SharpDX.MediaFoundation.InputTrustAuthority.BindAccess"/></strong> or <strong><see cref="SharpDX.MediaFoundation.InputTrustAuthority.UpdateAccess"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS']/*"/>	
    /// <msdn-id>ms697403</msdn-id>	
    /// <unmanaged>MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS</unmanaged>	
    /// <unmanaged-short>MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS</unmanaged-short>	
    public partial struct InputTrustauthorityAccessParameters
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::dwSize']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int dwSize</unmanaged>	
        /// <unmanaged-short>unsigned int dwSize</unmanaged-short>	
        public int DwSize;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::dwVer']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int dwVer</unmanaged>	
        /// <unmanaged-short>unsigned int dwVer</unmanaged-short>	
        public int DwVer;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::cbSignatureOffset']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int cbSignatureOffset</unmanaged>	
        /// <unmanaged-short>unsigned int cbSignatureOffset</unmanaged-short>	
        public int CbSignatureOffset;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::cbSignatureSize']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int cbSignatureSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbSignatureSize</unmanaged-short>	
        public int CbSignatureSize;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::cbExtensionOffset']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int cbExtensionOffset</unmanaged>	
        /// <unmanaged-short>unsigned int cbExtensionOffset</unmanaged-short>	
        public int CbExtensionOffset;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::cbExtensionSize']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int cbExtensionSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbExtensionSize</unmanaged-short>	
        public int CbExtensionSize;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::cActions']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>unsigned int cActions</unmanaged>	
        /// <unmanaged-short>unsigned int cActions</unmanaged-short>	
        public int CActions;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS::rgOutputActions']/*"/>	
        /// <msdn-id>ms697403</msdn-id>	
        /// <unmanaged>MFINPUTTRUSTAUTHORITY_ACCESS_ACTION rgOutputActions[1]</unmanaged>	
        /// <unmanaged-short>MFINPUTTRUSTAUTHORITY_ACCESS_ACTION rgOutputActions</unmanaged-short>	
        public SharpDX.MediaFoundation.InputTrustauthorityAccessAction[] RgOutputActions
        {
            get { return _RgOutputActions ?? (_RgOutputActions = new SharpDX.MediaFoundation.InputTrustauthorityAccessAction[1]); }
        }
        internal SharpDX.MediaFoundation.InputTrustauthorityAccessAction[] _RgOutputActions;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int DwSize;
            public int DwVer;
            public int CbSignatureOffset;
            public int CbSignatureSize;
            public int CbExtensionOffset;
            public int CbExtensionSize;
            public int CActions;
            public SharpDX.MediaFoundation.InputTrustauthorityAccessAction RgOutputActions;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.DwSize = @ref.DwSize;
            this.DwVer = @ref.DwVer;
            this.CbSignatureOffset = @ref.CbSignatureOffset;
            this.CbSignatureSize = @ref.CbSignatureSize;
            this.CbExtensionOffset = @ref.CbExtensionOffset;
            this.CbExtensionSize = @ref.CbExtensionSize;
            this.CActions = @ref.CActions;
            fixed (void* __to = &this.RgOutputActions[0]) fixed (void* __from = &@ref.RgOutputActions) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.InputTrustauthorityAccessAction));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.DwSize = this.DwSize;
            @ref.DwVer = this.DwVer;
            @ref.CbSignatureOffset = this.CbSignatureOffset;
            @ref.CbSignatureSize = this.CbSignatureSize;
            @ref.CbExtensionOffset = this.CbExtensionOffset;
            @ref.CbExtensionSize = this.CbExtensionSize;
            @ref.CActions = this.CActions;
            fixed (void* __to = &@ref.RgOutputActions) fixed (void* __from = &this.RgOutputActions[0]) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.InputTrustauthorityAccessAction));

        }
    }

    /// <summary>	
    /// <p> </p><p>Specifies the buffering requirements of a file.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure describes the buffering requirements for content encoded at the bit rate specified in the <strong>dwBitrate</strong>. The <strong>msBufferWindow</strong> member indicates how much data should be buffered before starting playback. The size of the buffer in bytes is <strong>msBufferWinow</strong>?<strong>dwBitrate</strong> / 8000.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LEAKY_BUCKET_PAIR']/*"/>	
    /// <msdn-id>aa371870</msdn-id>	
    /// <unmanaged>MF_LEAKY_BUCKET_PAIR</unmanaged>	
    /// <unmanaged-short>MF_LEAKY_BUCKET_PAIR</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct LeakyBucketPair
    {

        /// <summary>	
        /// <dd> <p>Bit rate, in bits per second.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LEAKY_BUCKET_PAIR::dwBitrate']/*"/>	
        /// <msdn-id>aa371870</msdn-id>	
        /// <unmanaged>unsigned int dwBitrate</unmanaged>	
        /// <unmanaged-short>unsigned int dwBitrate</unmanaged-short>	
        public int DwBitrate;

        /// <summary>	
        /// <dd> <p>Size of the buffer window, in milliseconds.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_LEAKY_BUCKET_PAIR::msBufferWindow']/*"/>	
        /// <msdn-id>aa371870</msdn-id>	
        /// <unmanaged>unsigned int msBufferWindow</unmanaged>	
        /// <unmanaged-short>unsigned int msBufferWindow</unmanaged-short>	
        public int MsBufferWindow;
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMediaKeyStatus']/*"/>	
    /// <unmanaged>MFMediaKeyStatus</unmanaged>	
    /// <unmanaged-short>MFMediaKeyStatus</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct MediaKeyStatus
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMediaKeyStatus::pbKeyId']/*"/>	
        /// <unmanaged>unsigned char* pbKeyId</unmanaged>	
        /// <unmanaged-short>unsigned char pbKeyId</unmanaged-short>	
        public System.IntPtr PbKeyId;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMediaKeyStatus::cbKeyId']/*"/>	
        /// <unmanaged>unsigned int cbKeyId</unmanaged>	
        /// <unmanaged-short>unsigned int cbKeyId</unmanaged-short>	
        public int CbKeyId;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMediaKeyStatus::eMediaKeyStatus']/*"/>	
        /// <unmanaged>MF_MEDIAKEY_STATUS eMediaKeyStatus</unmanaged>	
        /// <unmanaged-short>MF_MEDIAKEY_STATUS eMediaKeyStatus</unmanaged-short>	
        public SharpDX.MediaFoundation.MediaKeyStatusState EMediaKeyStatus;
    }

    /// <summary>	
    /// <p>The <strong>MetadataTimeStamps</strong> structure describes the blob format for the <strong>MF_CAPTURE_METADATA_FACEROITIMESTAMPS</strong> attribute.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>MF_CAPTURE_METADATA_FACEROITIMESTAMPS</strong> attribute contains the time stamp information for the face ROIs identified in <strong>MF_CAPTURE_METADATA_FACEROIS</strong>.  For a  device that cannot provide the time stamp for face ROIs, this attribute should be omitted.</p><p>For the <strong>Flags</strong> field, the following bit flags  indicate which time stamp is valid:</p><pre>#define MF_METADATATIMESTAMPS_DEVICE        0x00000001	
    /// #define MF_METADATATIMESTAMPS_PRESENTATION  0x00000002</pre><p>MFT0 must set <strong>Flags</strong> to <strong>MF_METADATATIEMSTAMPS_DEVICE</strong> and the appropriate QPC time for <strong>Device</strong>, if the driver provides the timestamp metadata for the face ROIs.</p><p>The <strong>MetadataTimeStamps</strong> structure only describes the blob format for the <strong>MF_CAPTURE_METADATA_FACEROITIMESTAMPS</strong> attribute.  The metadata item structure for timestamp (<strong>KSCAMERA_METADATA_ITEMHEADER</strong> + timestamp metadata payload) is up to driver and must be 8-byte aligned.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MetadataTimeStamps']/*"/>	
    /// <msdn-id>dn898736</msdn-id>	
    /// <unmanaged>MetadataTimeStamps</unmanaged>	
    /// <unmanaged-short>MetadataTimeStamps</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct MetadataTimeStamps
    {

        /// <summary>	
        /// <dd> <p>Bitwise OR of the <strong>MF_METADATATIMESTAMPS_*</strong> flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MetadataTimeStamps::Flags']/*"/>	
        /// <msdn-id>dn898736</msdn-id>	
        /// <unmanaged>unsigned int Flags</unmanaged>	
        /// <unmanaged-short>unsigned int Flags</unmanaged-short>	
        public int Flags;

        /// <summary>	
        /// <dd> <p>QPC time for the sample  the face rectangle is derived from (in 100ns).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MetadataTimeStamps::Device']/*"/>	
        /// <msdn-id>dn898736</msdn-id>	
        /// <unmanaged>longlong Device</unmanaged>	
        /// <unmanaged-short>longlong Device</unmanaged-short>	
        public long Device;

        /// <summary>	
        /// <dd> <p>PTS for the sample  the face rectangle is derived from (in 100ns).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MetadataTimeStamps::Presentation']/*"/>	
        /// <msdn-id>dn898736</msdn-id>	
        /// <unmanaged>longlong Presentation</unmanaged>	
        /// <unmanaged-short>longlong Presentation</unmanaged-short>	
        public long Presentation;
    }

    /// <summary>	
    /// <p>Provides information on a screen-to-screen move and a dirty rectangle copy operation.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVE_RECT']/*"/>	
    /// <msdn-id>hh406478</msdn-id>	
    /// <unmanaged>MOVE_RECT</unmanaged>	
    /// <unmanaged-short>MOVE_RECT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct MoveRectangle
    {

        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Mathematics.Interop.RawPoint"/></strong> structure that describes the source (<em>x, y</em>) point where the source rectangle is copied from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVE_RECT::SourcePoint']/*"/>	
        /// <msdn-id>hh406478</msdn-id>	
        /// <unmanaged>POINT SourcePoint</unmanaged>	
        /// <unmanaged-short>POINT SourcePoint</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawPoint SourcePoint;

        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that contains the destination rectangle where the dirty rectangle is copied to.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVE_RECT::DestRect']/*"/>	
        /// <msdn-id>hh406478</msdn-id>	
        /// <unmanaged>RECT DestRect</unmanaged>	
        /// <unmanaged-short>RECT DestRect</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle DestRect;
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVEREGION_INFO']/*"/>	
    /// <unmanaged>MOVEREGION_INFO</unmanaged>	
    /// <unmanaged-short>MOVEREGION_INFO</unmanaged-short>	
    public partial struct MoveregionInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVEREGION_INFO::FrameNumber']/*"/>	
        /// <unmanaged>unsigned int FrameNumber</unmanaged>	
        /// <unmanaged-short>unsigned int FrameNumber</unmanaged-short>	
        public int FrameNumber;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVEREGION_INFO::NumMoveRegions']/*"/>	
        /// <unmanaged>unsigned int NumMoveRegions</unmanaged>	
        /// <unmanaged-short>unsigned int NumMoveRegions</unmanaged-short>	
        public int NumMoveRegions;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MOVEREGION_INFO::MoveRegions']/*"/>	
        /// <unmanaged>MOVE_RECT MoveRegions[1]</unmanaged>	
        /// <unmanaged-short>MOVE_RECT MoveRegions</unmanaged-short>	
        public SharpDX.MediaFoundation.MoveRectangle[] MoveRegions
        {
            get { return _MoveRegions ?? (_MoveRegions = new SharpDX.MediaFoundation.MoveRectangle[1]); }
        }
        internal SharpDX.MediaFoundation.MoveRectangle[] _MoveRegions;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int FrameNumber;
            public int NumMoveRegions;
            public SharpDX.MediaFoundation.MoveRectangle MoveRegions;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.FrameNumber = @ref.FrameNumber;
            this.NumMoveRegions = @ref.NumMoveRegions;
            fixed (void* __to = &this.MoveRegions[0]) fixed (void* __from = &@ref.MoveRegions) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.MoveRectangle));
        }
    }

    /// <summary>	
    /// <p>Contains encoding statistics from the Digital Living Network Alliance (DLNA) media sink.</p><p>This structure is used with the <see cref="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys.Statistics"/> attribute.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS']/*"/>	
    /// <msdn-id>dd388511</msdn-id>	
    /// <unmanaged>MFMPEG2DLNASINKSTATS</unmanaged>	
    /// <unmanaged-short>MFMPEG2DLNASINKSTATS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Mpeg2dlnasinkstats
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cBytesWritten']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cBytesWritten</unmanaged>	
        /// <unmanaged-short>unsigned longlong cBytesWritten</unmanaged-short>	
        public long CBytesWritten;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::fPAL']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>BOOL fPAL</unmanaged>	
        /// <unmanaged-short>BOOL fPAL</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FPAL;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::fccVideo']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned int fccVideo</unmanaged>	
        /// <unmanaged-short>unsigned int fccVideo</unmanaged-short>	
        public int FccVideo;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::dwVideoWidth']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned int dwVideoWidth</unmanaged>	
        /// <unmanaged-short>unsigned int dwVideoWidth</unmanaged-short>	
        public int DwVideoWidth;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::dwVideoHeight']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned int dwVideoHeight</unmanaged>	
        /// <unmanaged-short>unsigned int dwVideoHeight</unmanaged-short>	
        public int DwVideoHeight;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cVideoFramesReceived']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cVideoFramesReceived</unmanaged>	
        /// <unmanaged-short>unsigned longlong cVideoFramesReceived</unmanaged-short>	
        public long CVideoFramesReceived;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cVideoFramesEncoded']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cVideoFramesEncoded</unmanaged>	
        /// <unmanaged-short>unsigned longlong cVideoFramesEncoded</unmanaged-short>	
        public long CVideoFramesEncoded;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cVideoFramesSkipped']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cVideoFramesSkipped</unmanaged>	
        /// <unmanaged-short>unsigned longlong cVideoFramesSkipped</unmanaged-short>	
        public long CVideoFramesSkipped;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cBlackVideoFramesEncoded']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cBlackVideoFramesEncoded</unmanaged>	
        /// <unmanaged-short>unsigned longlong cBlackVideoFramesEncoded</unmanaged-short>	
        public long CBlackVideoFramesEncoded;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cVideoFramesDuplicated']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cVideoFramesDuplicated</unmanaged>	
        /// <unmanaged-short>unsigned longlong cVideoFramesDuplicated</unmanaged-short>	
        public long CVideoFramesDuplicated;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cAudioSamplesPerSec']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned int cAudioSamplesPerSec</unmanaged>	
        /// <unmanaged-short>unsigned int cAudioSamplesPerSec</unmanaged-short>	
        public int CAudioSamplesPerSec;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cAudioChannels']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned int cAudioChannels</unmanaged>	
        /// <unmanaged-short>unsigned int cAudioChannels</unmanaged-short>	
        public int CAudioChannels;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cAudioBytesReceived']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cAudioBytesReceived</unmanaged>	
        /// <unmanaged-short>unsigned longlong cAudioBytesReceived</unmanaged-short>	
        public long CAudioBytesReceived;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFMPEG2DLNASINKSTATS::cAudioFramesEncoded']/*"/>	
        /// <msdn-id>dd388511</msdn-id>	
        /// <unmanaged>unsigned longlong cAudioFramesEncoded</unmanaged>	
        /// <unmanaged-short>unsigned longlong cAudioFramesEncoded</unmanaged-short>	
        public long CAudioFramesEncoded;
    }

    /// <summary>	
    /// <p>Contains format data for a binary stream in an Advanced Streaming Format (ASF) file.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used with the <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.ArbitraryHeader"/> media type attribute.</p><p>This structure corresponds to the first 60 bytes of the Type-Specific Data field of the Stream Properties Object, in files where the stream type is ASF_Binary_Media. For more information, see the ASF specification.</p><p>The Format Data field of the Type-Specific Data field is contained in the <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.ArbitraryFormat"/> attribute of the media type.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER']/*"/>	
    /// <msdn-id>dd388931</msdn-id>	
    /// <unmanaged>MT_ARBITRARY_HEADER</unmanaged>	
    /// <unmanaged-short>MT_ARBITRARY_HEADER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct MtArbitraryHeader
    {

        /// <summary>	
        /// <dd> <p>Major media type. This value is the <see cref="System.Guid"/> stored in the Major Media Type field of the Type-Specific Data field of the ASF file. It might not match the major type <see cref="System.Guid"/> from the Media Foundation media type. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::majortype']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>GUID majortype</unmanaged>	
        /// <unmanaged-short>GUID majortype</unmanaged-short>	
        public System.Guid Majortype;

        /// <summary>	
        /// <dd> <p>Media subtype. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::subtype']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>GUID subtype</unmanaged>	
        /// <unmanaged-short>GUID subtype</unmanaged-short>	
        public System.Guid Subtype;

        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, samples have a fixed size in bytes. Otherwise, samples have variable size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::bFixedSizeSamples']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>BOOL bFixedSizeSamples</unmanaged>	
        /// <unmanaged-short>BOOL bFixedSizeSamples</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool BFixedSizeSamples;

        /// <summary>	
        /// <dd> <p> If <strong>TRUE</strong>, the data in this stream uses temporal compression. Otherwise, samples are independent of each other.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::bTemporalCompression']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>BOOL bTemporalCompression</unmanaged>	
        /// <unmanaged-short>BOOL bTemporalCompression</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool BTemporalCompression;

        /// <summary>	
        /// <dd> <p>If <strong>bFixedSizeSamples</strong> is <strong>TRUE</strong>, this member specifies the sample size in bytes. Otherwise, the value is ignored and should be 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::lSampleSize']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>unsigned int lSampleSize</unmanaged>	
        /// <unmanaged-short>unsigned int lSampleSize</unmanaged-short>	
        public int LSampleSize;

        /// <summary>	
        /// <dd> <p>Format type <see cref="System.Guid"/>. This <see cref="System.Guid"/> identifies the structure of the additional format data, which is stored in the  <see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.ArbitraryFormat"/> attribute of the media type. If no additional format data is present, <strong>formattype</strong> equals GUID_NULL.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_ARBITRARY_HEADER::formattype']/*"/>	
        /// <msdn-id>dd388931</msdn-id>	
        /// <unmanaged>GUID formattype</unmanaged>	
        /// <unmanaged-short>GUID formattype</unmanaged-short>	
        public System.Guid Formattype;
    }

    /// <summary>	
    /// <p> </p><p>Defines custom color primaries for a video source. The color primaries define how to convert colors from RGB color space to CIE XYZ color space.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used with the <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.CustomVideoPrimaries"/></strong> attribute.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES']/*"/>	
    /// <msdn-id>ms696187</msdn-id>	
    /// <unmanaged>MT_CUSTOM_VIDEO_PRIMARIES</unmanaged>	
    /// <unmanaged-short>MT_CUSTOM_VIDEO_PRIMARIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct MtCustomVideoPrimaries
    {

        /// <summary>	
        /// <dd> <p>Red x-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fRx']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fRx</unmanaged>	
        /// <unmanaged-short>float fRx</unmanaged-short>	
        public float FRx;

        /// <summary>	
        /// <dd> <p>Red y-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fRy']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fRy</unmanaged>	
        /// <unmanaged-short>float fRy</unmanaged-short>	
        public float FRy;

        /// <summary>	
        /// <dd> <p>Green x-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fGx']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fGx</unmanaged>	
        /// <unmanaged-short>float fGx</unmanaged-short>	
        public float FGx;

        /// <summary>	
        /// <dd> <p>Green y-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fGy']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fGy</unmanaged>	
        /// <unmanaged-short>float fGy</unmanaged-short>	
        public float FGy;

        /// <summary>	
        /// <dd> <p>Blue x-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fBx']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fBx</unmanaged>	
        /// <unmanaged-short>float fBx</unmanaged-short>	
        public float FBx;

        /// <summary>	
        /// <dd> <p>Blue y-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fBy']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fBy</unmanaged>	
        /// <unmanaged-short>float fBy</unmanaged-short>	
        public float FBy;

        /// <summary>	
        /// <dd> <p>White point x-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fWx']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fWx</unmanaged>	
        /// <unmanaged-short>float fWx</unmanaged-short>	
        public float FWx;

        /// <summary>	
        /// <dd> <p>White point y-coordinate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MT_CUSTOM_VIDEO_PRIMARIES::fWy']/*"/>	
        /// <msdn-id>ms696187</msdn-id>	
        /// <unmanaged>float fWy</unmanaged>	
        /// <unmanaged-short>float fWy</unmanaged-short>	
        public float FWy;
    }

    /// <summary>	
    /// <p> </p><p>Contains the authentication information for the credential manager.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam']/*"/>	
    /// <msdn-id>ms701554</msdn-id>	
    /// <unmanaged>MFNetCredentialManagerGetParam</unmanaged>	
    /// <unmanaged-short>MFNetCredentialManagerGetParam</unmanaged-short>	
    public partial struct NetCredentialManagerGetParam
    {

        /// <summary>	
        /// <dd> <p>The response code of the authentication challenge. For example, NS_E_PROXY_ACCESSDENIED.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::hrOp']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>HRESULT hrOp</unmanaged>	
        /// <unmanaged-short>HRESULT hrOp</unmanaged-short>	
        public SharpDX.Result HrOp;

        /// <summary>	
        /// <dd> <p>Set this flag to <strong>TRUE</strong> if the currently logged on user's credentials should be used as the default credentials.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::fAllowLoggedOnUser']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>BOOL fAllowLoggedOnUser</unmanaged>	
        /// <unmanaged-short>BOOL fAllowLoggedOnUser</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FAllowLoggedOnUser;

        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, the authentication package will send unencrypted credentials over the network. Otherwise, the authentication package encrypts the credentials.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::fClearTextPackage']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>BOOL fClearTextPackage</unmanaged>	
        /// <unmanaged-short>BOOL fClearTextPackage</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FClearTextPackage;

        /// <summary>	
        /// <dd> <p>The original URL that requires authentication.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::pszUrl']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>const wchar_t* pszUrl</unmanaged>	
        /// <unmanaged-short>wchar_t pszUrl</unmanaged-short>	
        public string PszUrl;

        /// <summary>	
        /// <dd> <p>The name of the site or proxy that requires authentication.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::pszSite']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>const wchar_t* pszSite</unmanaged>	
        /// <unmanaged-short>wchar_t pszSite</unmanaged-short>	
        public string PszSite;

        /// <summary>	
        /// <dd> <p>The name of the realm for this authentication.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::pszRealm']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>const wchar_t* pszRealm</unmanaged>	
        /// <unmanaged-short>wchar_t pszRealm</unmanaged-short>	
        public string PszRealm;

        /// <summary>	
        /// <dd> <p>The name of the authentication package. For example, "Digest" or "MBS_BASIC".</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::pszPackage']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>const wchar_t* pszPackage</unmanaged>	
        /// <unmanaged-short>wchar_t pszPackage</unmanaged-short>	
        public string PszPackage;

        /// <summary>	
        /// <dd> <p>The number of times that the credential manager should retry after authentication fails.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFNetCredentialManagerGetParam::nRetries']/*"/>	
        /// <msdn-id>ms701554</msdn-id>	
        /// <unmanaged>int nRetries</unmanaged>	
        /// <unmanaged-short>int nRetries</unmanaged-short>	
        public int NRetries;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public SharpDX.Result HrOp;
            public SharpDX.Mathematics.Interop.RawBool FAllowLoggedOnUser;
            public SharpDX.Mathematics.Interop.RawBool FClearTextPackage;
            public System.IntPtr PszUrl;
            public System.IntPtr PszSite;
            public System.IntPtr PszRealm;
            public System.IntPtr PszPackage;
            public int NRetries;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
                if (this.PszUrl != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszUrl);
                if (this.PszSite != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszSite);
                if (this.PszRealm != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszRealm);
                if (this.PszPackage != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszPackage);
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.HrOp = @ref.HrOp;
            this.FAllowLoggedOnUser = @ref.FAllowLoggedOnUser;
            this.FClearTextPackage = @ref.FClearTextPackage;
            this.PszUrl = (@ref.PszUrl == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PszUrl);
            this.PszSite = (@ref.PszSite == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PszSite);
            this.PszRealm = (@ref.PszRealm == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PszRealm);
            this.PszPackage = (@ref.PszPackage == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PszPackage);
            this.NRetries = @ref.NRetries;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.HrOp = this.HrOp;
            @ref.FAllowLoggedOnUser = this.FAllowLoggedOnUser;
            @ref.FClearTextPackage = this.FClearTextPackage;
            @ref.PszUrl = (this.PszUrl == null) ? IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszUrl);
            @ref.PszSite = (this.PszSite == null) ? IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszSite);
            @ref.PszRealm = (this.PszRealm == null) ? IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszRealm);
            @ref.PszPackage = (this.PszPackage == null) ? IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszPackage);
            @ref.NRetries = this.NRetries;

        }
    }

    /// <summary>	
    /// <p> Specifies an offset as a fixed-point real number. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The value of the number is <strong>value</strong> + (<strong>fract</strong> / 65536.0f).</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFOffset']/*"/>	
    /// <msdn-id>ms704775</msdn-id>	
    /// <unmanaged>MFOffset</unmanaged>	
    /// <unmanaged-short>MFOffset</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Offset
    {

        /// <summary>	
        /// <dd> <p> The fractional part of the number. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFOffset::fract']/*"/>	
        /// <msdn-id>ms704775</msdn-id>	
        /// <unmanaged>unsigned short fract</unmanaged>	
        /// <unmanaged-short>unsigned short fract</unmanaged-short>	
        public short Fract;

        /// <summary>	
        /// <dd> <p> The integer part of the number. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFOffset::value']/*"/>	
        /// <msdn-id>ms704775</msdn-id>	
        /// <unmanaged>short value</unmanaged>	
        /// <unmanaged-short>short value</unmanaged-short>	
        public short Value;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.AcquireUserCredential"/></strong> event. This event is sent if the application plays a media file from a server that requires authentication. The application can respond by providing the user credentials.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> callback method.  You can use the <strong>MFP_GET_ACQUIRE_USER_CREDENTIAL_EVENT</strong> macro for this purpose.</p><p>If the <strong>flags</strong> member contains the <strong><see cref="SharpDX.MediaFoundation.MfpCredentialFlags.MfpCredentialPrompt"/></strong> flag, the application should do the following:</p><ol> <li>Prompt the user to enter a user name and password.</li> <li>Store the user name in the credentials object by calling <strong><see cref="SharpDX.MediaFoundation.NetCredential.SetUser"/></strong> on the <strong>pCredential</strong> reference.</li> <li>Store the password by calling <strong><see cref="SharpDX.MediaFoundation.NetCredential.SetPassword"/></strong> on the <strong>pCredential</strong> reference.</li> </ol><p>To cancel authentication, set <strong>fProceedWithAuthentication</strong> equal to <strong><see cref="SharpDX.Result.False"/></strong>.</p><p>By default, MFPlay uses the network source's implementation of <strong><see cref="SharpDX.MediaFoundation.NetCredentialManager"/></strong> to manage credentials. An application can provide its own implementation of this interface as follows:</p><ol> <li>Call <strong>QueryInterface</strong> on the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer"/></strong> reference to get the <strong><see cref="SharpDX.ComObject"/></strong> interface.</li> <li>Call <strong>IPropertyStore::SetValue</strong> to set the <strong>MFNETSOURCE_CREDENTIAL_MANAGER</strong> property.</li> </ol>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT']/*"/>	
    /// <msdn-id>dd375527</msdn-id>	
    /// <unmanaged>MFP_ACQUIRE_USER_CREDENTIAL_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_ACQUIRE_USER_CREDENTIAL_EVENT</unmanaged-short>	
    public partial struct PAcquireUserCredentialEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::header']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::dwUserData']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>ULONG_PTR dwUserData</unmanaged>	
        /// <unmanaged-short>ULONG_PTR dwUserData</unmanaged-short>	
        public System.IntPtr DwUserData;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::fProceedWithAuthentication']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>BOOL fProceedWithAuthentication</unmanaged>	
        /// <unmanaged-short>BOOL fProceedWithAuthentication</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FProceedWithAuthentication;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::hrAuthenticationStatus']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>HRESULT hrAuthenticationStatus</unmanaged>	
        /// <unmanaged-short>HRESULT hrAuthenticationStatus</unmanaged-short>	
        public SharpDX.Result HrAuthenticationStatus;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::pwszURL']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>const wchar_t* pwszURL</unmanaged>	
        /// <unmanaged-short>wchar_t pwszURL</unmanaged-short>	
        public string PwszURL;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::pwszSite']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>const wchar_t* pwszSite</unmanaged>	
        /// <unmanaged-short>wchar_t pwszSite</unmanaged-short>	
        public string PwszSite;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::pwszRealm']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>const wchar_t* pwszRealm</unmanaged>	
        /// <unmanaged-short>wchar_t pwszRealm</unmanaged-short>	
        public string PwszRealm;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::pwszPackage']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>const wchar_t* pwszPackage</unmanaged>	
        /// <unmanaged-short>wchar_t pwszPackage</unmanaged-short>	
        public string PwszPackage;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::nRetries']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>int nRetries</unmanaged>	
        /// <unmanaged-short>int nRetries</unmanaged-short>	
        public int NRetries;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::flags']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>unsigned int flags</unmanaged>	
        /// <unmanaged-short>unsigned int flags</unmanaged-short>	
        public int Flags;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ACQUIRE_USER_CREDENTIAL_EVENT::pCredential']/*"/>	
        /// <msdn-id>dd375527</msdn-id>	
        /// <unmanaged>IMFNetCredential* pCredential</unmanaged>	
        /// <unmanaged-short>IMFNetCredential pCredential</unmanaged-short>	
        public System.IntPtr PCredential;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public SharpDX.MediaFoundation.PEventHeader Header;
            public System.IntPtr DwUserData;
            public SharpDX.Mathematics.Interop.RawBool FProceedWithAuthentication;
            public SharpDX.Result HrAuthenticationStatus;
            public System.IntPtr PwszURL;
            public System.IntPtr PwszSite;
            public System.IntPtr PwszRealm;
            public System.IntPtr PwszPackage;
            public int NRetries;
            public int Flags;
            public System.IntPtr PCredential;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
                if (this.PwszURL != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PwszURL);
                if (this.PwszSite != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PwszSite);
                if (this.PwszRealm != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PwszRealm);
                if (this.PwszPackage != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PwszPackage);
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.Header = @ref.Header;
            this.DwUserData = @ref.DwUserData;
            this.FProceedWithAuthentication = @ref.FProceedWithAuthentication;
            this.HrAuthenticationStatus = @ref.HrAuthenticationStatus;
            this.PwszURL = (@ref.PwszURL == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PwszURL);
            this.PwszSite = (@ref.PwszSite == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PwszSite);
            this.PwszRealm = (@ref.PwszRealm == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PwszRealm);
            this.PwszPackage = (@ref.PwszPackage == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PwszPackage);
            this.NRetries = @ref.NRetries;
            this.Flags = @ref.Flags;
            this.PCredential = @ref.PCredential;
        }
    }

    /// <summary>	
    /// <p>Contains one palette entry in a color table.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This union can be used to represent both RGB palettes and Y'Cb'Cr' palettes. The video format that defines the palette determines which union member should be used.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPaletteEntry']/*"/>	
    /// <msdn-id>ms698970</msdn-id>	
    /// <unmanaged>MFPaletteEntry</unmanaged>	
    /// <unmanaged-short>MFPaletteEntry</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public partial struct PaletteEntry
    {

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> structure that contains an RGB color.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPaletteEntry::ARGB']/*"/>	
        /// <msdn-id>ms698970</msdn-id>	
        /// <unmanaged>MFARGB ARGB</unmanaged>	
        /// <unmanaged-short>MFARGB ARGB</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Mathematics.Interop.RawColorBGRA Argb;

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.MediaFoundation.AYUVSample"/></strong> structure that contains a Y'Cb'Cr' color.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPaletteEntry::AYCbCr']/*"/>	
        /// <msdn-id>ms698970</msdn-id>	
        /// <unmanaged>MFAYUVSample AYCbCr</unmanaged>	
        /// <unmanaged-short>MFAYUVSample AYCbCr</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.MediaFoundation.AYUVSample AYCbCr;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.Error"/></strong> event. This event is sent if an error occurs during playback.  </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_ERROR_EVENT</strong> macro for this purpose.</p><p>This event is not used to signal the failure of an asynchronous <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer"/></strong> method. If an asynchronous method fails, the error is reported in the standard event listed for that method. The <strong><see cref="SharpDX.MediaFoundation.PEventType.Error"/></strong> event is used for errors that happen outside the context of an asynchronous method call.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ERROR_EVENT']/*"/>	
    /// <msdn-id>dd375530</msdn-id>	
    /// <unmanaged>MFP_ERROR_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_ERROR_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PErrorEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_ERROR_EVENT::header']/*"/>	
        /// <msdn-id>dd375530</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Contains information that is common to  every type of MFPlay event.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER']/*"/>	
    /// <msdn-id>dd375531</msdn-id>	
    /// <unmanaged>MFP_EVENT_HEADER</unmanaged>	
    /// <unmanaged-short>MFP_EVENT_HEADER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PEventHeader
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER::eEventType']/*"/>	
        /// <msdn-id>dd375531</msdn-id>	
        /// <unmanaged>MFP_EVENT_TYPE eEventType</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_TYPE eEventType</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventType EEventType;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER::hrEvent']/*"/>	
        /// <msdn-id>dd375531</msdn-id>	
        /// <unmanaged>HRESULT hrEvent</unmanaged>	
        /// <unmanaged-short>HRESULT hrEvent</unmanaged-short>	
        public SharpDX.Result HrEvent;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER::pMediaPlayer']/*"/>	
        /// <msdn-id>dd375531</msdn-id>	
        /// <unmanaged>IMFPMediaPlayer* pMediaPlayer</unmanaged>	
        /// <unmanaged-short>IMFPMediaPlayer pMediaPlayer</unmanaged-short>	
        public System.IntPtr PMediaPlayer;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER::eState']/*"/>	
        /// <msdn-id>dd375531</msdn-id>	
        /// <unmanaged>MFP_MEDIAPLAYER_STATE eState</unmanaged>	
        /// <unmanaged-short>MFP_MEDIAPLAYER_STATE eState</unmanaged-short>	
        public SharpDX.MediaFoundation.PMediaPlayerState EState;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_EVENT_HEADER::pPropertyStore']/*"/>	
        /// <msdn-id>dd375531</msdn-id>	
        /// <unmanaged>IPropertyStore* pPropertyStore</unmanaged>	
        /// <unmanaged-short>IPropertyStore pPropertyStore</unmanaged-short>	
        public System.IntPtr PPropertyStore;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.FrameStep"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.FrameStep"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_FRAME_STEP_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_FRAME_STEP_EVENT']/*"/>	
    /// <msdn-id>dd375533</msdn-id>	
    /// <unmanaged>MFP_FRAME_STEP_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_FRAME_STEP_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PFrameStepEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_FRAME_STEP_EVENT::header']/*"/>	
        /// <msdn-id>dd375533</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_FRAME_STEP_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375533</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents a pinhole camera intrinsic model for a specified resolution.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsic_IntrinsicModel']/*"/>	
    /// <msdn-id>mt740397</msdn-id>	
    /// <unmanaged>MFPinholeCameraIntrinsic_IntrinsicModel</unmanaged>	
    /// <unmanaged-short>MFPinholeCameraIntrinsic_IntrinsicModel</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PinholeCameraIntrinsicIntrinsicModel
    {

        /// <summary>	
        /// <dd> <p>The width for the pinhole camera intrinsic model.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsic_IntrinsicModel::Width']/*"/>	
        /// <msdn-id>mt740397</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;

        /// <summary>	
        /// <dd> <p>The height for the pinhole camera intrinsic model.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsic_IntrinsicModel::Height']/*"/>	
        /// <msdn-id>mt740397</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;

        /// <summary>	
        /// <dd> <p> The pinhole camera model.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsic_IntrinsicModel::CameraModel']/*"/>	
        /// <msdn-id>mt740397</msdn-id>	
        /// <unmanaged>MFCameraIntrinsic_PinholeCameraModel CameraModel</unmanaged>	
        /// <unmanaged-short>MFCameraIntrinsic_PinholeCameraModel CameraModel</unmanaged-short>	
        public SharpDX.MediaFoundation.CameraIntrinsicPinholeCameraModel CameraModel;

        /// <summary>	
        /// <dd> <p> The lens distortion model.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsic_IntrinsicModel::DistortionModel']/*"/>	
        /// <msdn-id>mt740397</msdn-id>	
        /// <unmanaged>MFCameraIntrinsic_DistortionModel DistortionModel</unmanaged>	
        /// <unmanaged-short>MFCameraIntrinsic_DistortionModel DistortionModel</unmanaged-short>	
        public SharpDX.MediaFoundation.CameraIntrinsicDistortionModel DistortionModel;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Contains zero or 1 pinhole camera intrinsic models that describe how to project a 3D point in physical world onto the 2D image frame of a camera.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsics']/*"/>	
    /// <msdn-id>mt740396</msdn-id>	
    /// <unmanaged>MFPinholeCameraIntrinsics</unmanaged>	
    /// <unmanaged-short>MFPinholeCameraIntrinsics</unmanaged-short>	
    public partial struct PinholeCameraIntrinsics
    {

        /// <summary>	
        /// <dd> <p>The number of camera intrinsic models in the <em>IntrinsicModels</em> array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsics::IntrinsicModelCount']/*"/>	
        /// <msdn-id>mt740396</msdn-id>	
        /// <unmanaged>unsigned int IntrinsicModelCount</unmanaged>	
        /// <unmanaged-short>unsigned int IntrinsicModelCount</unmanaged-short>	
        public int IntrinsicModelCount;

        /// <summary>	
        /// <dd> <p>The array of camera intrinsic models in the intrinsic data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFPinholeCameraIntrinsics::IntrinsicModels']/*"/>	
        /// <msdn-id>mt740396</msdn-id>	
        /// <unmanaged>MFPinholeCameraIntrinsic_IntrinsicModel IntrinsicModels[1]</unmanaged>	
        /// <unmanaged-short>MFPinholeCameraIntrinsic_IntrinsicModel IntrinsicModels</unmanaged-short>	
        public SharpDX.MediaFoundation.PinholeCameraIntrinsicIntrinsicModel[] IntrinsicModels
        {
            get { return _IntrinsicModels ?? (_IntrinsicModels = new SharpDX.MediaFoundation.PinholeCameraIntrinsicIntrinsicModel[1]); }
        }
        internal SharpDX.MediaFoundation.PinholeCameraIntrinsicIntrinsicModel[] _IntrinsicModels;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int IntrinsicModelCount;
            public SharpDX.MediaFoundation.PinholeCameraIntrinsicIntrinsicModel IntrinsicModels;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.IntrinsicModelCount = @ref.IntrinsicModelCount;
            fixed (void* __to = &this.IntrinsicModels[0]) fixed (void* __from = &@ref.IntrinsicModels) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.PinholeCameraIntrinsicIntrinsicModel));
        }
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.MediaItemCleared"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.ClearMediaItem"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_MEDIAITEM_CLEARED_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CLEARED_EVENT']/*"/>	
    /// <msdn-id>dd375549</msdn-id>	
    /// <unmanaged>MFP_MEDIAITEM_CLEARED_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_MEDIAITEM_CLEARED_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PMediaItemClearedEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CLEARED_EVENT::header']/*"/>	
        /// <msdn-id>dd375549</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CLEARED_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375549</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.MediaItemCreateD"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.CreateMediaItemFromURL"/></strong> or  <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.CreateMediaItemFromObject"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_MEDIAITEM_CREATED_EVENT</strong> macro for this purpose.</p><p>Media items are created asynchronously. If multiple items are created, the operations can complete in any order, not necessarily in the same order as the method calls. You can use  the <strong>dwUserData</strong> member to identify the items, if you have simultaneous requests pending. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CREATED_EVENT']/*"/>	
    /// <msdn-id>dd375560</msdn-id>	
    /// <unmanaged>MFP_MEDIAITEM_CREATED_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_MEDIAITEM_CREATED_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PMediaItemCreateDEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CREATED_EVENT::header']/*"/>	
        /// <msdn-id>dd375560</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CREATED_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375560</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_CREATED_EVENT::dwUserData']/*"/>	
        /// <msdn-id>dd375560</msdn-id>	
        /// <unmanaged>ULONG_PTR dwUserData</unmanaged>	
        /// <unmanaged-short>ULONG_PTR dwUserData</unmanaged-short>	
        public System.IntPtr DwUserData;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.MediaItemSet"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.SetMediaItem"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_MEDIAITEM_SET_EVENT</strong> macro for this purpose.</p><p>If one or more streams could not be connected to a media sink, the event property store contains the MFP_PKEY_StreamRenderingResults property. The value of the property is an array of <strong><see cref="SharpDX.Result"/></strong> values, indicating which streams were connected successfully.  The event property store can be accessed through the <strong>header.pPropertyStore</strong> member.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_SET_EVENT']/*"/>	
    /// <msdn-id>dd375561</msdn-id>	
    /// <unmanaged>MFP_MEDIAITEM_SET_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_MEDIAITEM_SET_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PMediaItemSetEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_SET_EVENT::header']/*"/>	
        /// <msdn-id>dd375561</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MEDIAITEM_SET_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375561</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.Mf"/></strong> event. The MFPlay player object uses this event to forward certain events from the Media Foundation pipeline to the application.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method. You can use the <strong>MFP_GET_MF_EVENT</strong> macro for this purpose.</p><p>If <strong>MFEventType</strong> is <see cref="SharpDX.MediaFoundation.MediaEventTypes.StreamSinkFormatChanged"/>, the following property may be stored in the event property store, which can be accessed through the <strong>header.pPropertyStore</strong> member.</p><table> <tr><th>Property</th><th>Description</th></tr> <tr><td> MFP_PKEY_StreamIndex </td><td>The index of the stream whose format changed. </td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MF_EVENT']/*"/>	
    /// <msdn-id>dd375563</msdn-id>	
    /// <unmanaged>MFP_MF_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_MF_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PMfEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MF_EVENT::header']/*"/>	
        /// <msdn-id>dd375563</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MF_EVENT::MFEventType']/*"/>	
        /// <msdn-id>dd375563</msdn-id>	
        /// <unmanaged>unsigned int MFEventType</unmanaged>	
        /// <unmanaged-short>unsigned int MFEventType</unmanaged-short>	
        public int MFEventType;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MF_EVENT::pMFMediaEvent']/*"/>	
        /// <msdn-id>dd375563</msdn-id>	
        /// <unmanaged>IMFMediaEvent* pMFMediaEvent</unmanaged>	
        /// <unmanaged-short>IMFMediaEvent pMFMediaEvent</unmanaged-short>	
        public System.IntPtr PMFMediaEvent;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_MF_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375563</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.Pause"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.Pause"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_PAUSE_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PAUSE_EVENT']/*"/>	
    /// <msdn-id>dd375564</msdn-id>	
    /// <unmanaged>MFP_PAUSE_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_PAUSE_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PPauseEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PAUSE_EVENT::header']/*"/>	
        /// <msdn-id>dd375564</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PAUSE_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375564</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.PlaybackEnded"/></strong> event. This event is sent when the current media item finishes playing.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_PLAYBACK_ENDED_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAYBACK_ENDED_EVENT']/*"/>	
    /// <msdn-id>dd375566</msdn-id>	
    /// <unmanaged>MFP_PLAYBACK_ENDED_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_PLAYBACK_ENDED_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PPlaybackEndedEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAYBACK_ENDED_EVENT::header']/*"/>	
        /// <msdn-id>dd375566</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAYBACK_ENDED_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375566</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.Play"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.Play"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_PLAY_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAY_EVENT']/*"/>	
    /// <msdn-id>dd375567</msdn-id>	
    /// <unmanaged>MFP_PLAY_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_PLAY_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PPlayEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAY_EVENT::header']/*"/>	
        /// <msdn-id>dd375567</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_PLAY_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375567</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.PositionSet"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.SetPosition"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_POSITION_SET_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_POSITION_SET_EVENT']/*"/>	
    /// <msdn-id>dd375568</msdn-id>	
    /// <unmanaged>MFP_POSITION_SET_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_POSITION_SET_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PPositionSetEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_POSITION_SET_EVENT::header']/*"/>	
        /// <msdn-id>dd375568</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_POSITION_SET_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375568</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <see cref="SharpDX.MediaFoundation.PEventType.RateSet"/> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.SetRate"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_RATE_SET_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_RATE_SET_EVENT']/*"/>	
    /// <msdn-id>dd375569</msdn-id>	
    /// <unmanaged>MFP_RATE_SET_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_RATE_SET_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PRateSetEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_RATE_SET_EVENT::header']/*"/>	
        /// <msdn-id>dd375569</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_RATE_SET_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375569</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_RATE_SET_EVENT::flRate']/*"/>	
        /// <msdn-id>dd375569</msdn-id>	
        /// <unmanaged>float flRate</unmanaged>	
        /// <unmanaged-short>float flRate</unmanaged-short>	
        public float FlRate;
    }

    /// <summary>	
    /// <p> </p><strong>Important</strong>??Deprecated. This API may be removed from future releases of Windows. Applications should use the Media Session for playback.?<p>Event structure for the <strong><see cref="SharpDX.MediaFoundation.PEventType.Stop"/></strong> event. This event is sent when the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayer.Stop"/></strong> method completes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a reference to this structure, cast the <em>pEventHeader</em> parameter of the <strong><see cref="SharpDX.MediaFoundation.PMediaPlayerCallback.OnMediaPlayerEvent"/></strong> method.  You can use the <strong>MFP_GET_STOP_EVENT</strong> macro for this purpose.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_STOP_EVENT']/*"/>	
    /// <msdn-id>dd375570</msdn-id>	
    /// <unmanaged>MFP_STOP_EVENT</unmanaged>	
    /// <unmanaged-short>MFP_STOP_EVENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PStopEvent
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_STOP_EVENT::header']/*"/>	
        /// <msdn-id>dd375570</msdn-id>	
        /// <unmanaged>MFP_EVENT_HEADER header</unmanaged>	
        /// <unmanaged-short>MFP_EVENT_HEADER header</unmanaged-short>	
        public SharpDX.MediaFoundation.PEventHeader Header;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFP_STOP_EVENT::pMediaItem']/*"/>	
        /// <msdn-id>dd375570</msdn-id>	
        /// <unmanaged>IMFPMediaItem* pMediaItem</unmanaged>	
        /// <unmanaged-short>IMFPMediaItem pMediaItem</unmanaged-short>	
        public System.IntPtr PMediaItem;
    }

    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>A four dimensional vector, used to represent a rotation.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUATERNION']/*"/>	
    /// <msdn-id>mt740404</msdn-id>	
    /// <unmanaged>MF_QUATERNION</unmanaged>	
    /// <unmanaged-short>MF_QUATERNION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Quaternion
    {

        /// <summary>	
        /// <dd> <p>X component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUATERNION::x']/*"/>	
        /// <msdn-id>mt740404</msdn-id>	
        /// <unmanaged>float x</unmanaged>	
        /// <unmanaged-short>float x</unmanaged-short>	
        public float X;

        /// <summary>	
        /// <dd> <p>Y component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUATERNION::y']/*"/>	
        /// <msdn-id>mt740404</msdn-id>	
        /// <unmanaged>float y</unmanaged>	
        /// <unmanaged-short>float y</unmanaged-short>	
        public float Y;

        /// <summary>	
        /// <dd> <p>Z component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUATERNION::z']/*"/>	
        /// <msdn-id>mt740404</msdn-id>	
        /// <unmanaged>float z</unmanaged>	
        /// <unmanaged-short>float z</unmanaged-short>	
        public float Z;

        /// <summary>	
        /// <dd> <p>W component of the vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_QUATERNION::w']/*"/>	
        /// <msdn-id>mt740404</msdn-id>	
        /// <unmanaged>float w</unmanaged>	
        /// <unmanaged-short>float w</unmanaged-short>	
        public float W;
    }

    /// <summary>	
    /// <p> </p><p>Represents a ratio.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRatio']/*"/>	
    /// <msdn-id>aa473788</msdn-id>	
    /// <unmanaged>MFRatio</unmanaged>	
    /// <unmanaged-short>MFRatio</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Ratio
    {

        /// <summary>	
        /// <dd> <p>Numerator of the ratio.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRatio::Numerator']/*"/>	
        /// <msdn-id>aa473788</msdn-id>	
        /// <unmanaged>unsigned int Numerator</unmanaged>	
        /// <unmanaged-short>unsigned int Numerator</unmanaged-short>	
        public int Numerator;

        /// <summary>	
        /// <dd> <p>Denominator of the ratio.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRatio::Denominator']/*"/>	
        /// <msdn-id>aa473788</msdn-id>	
        /// <unmanaged>unsigned int Denominator</unmanaged>	
        /// <unmanaged-short>unsigned int Denominator</unmanaged-short>	
        public int Denominator;
    }

    /// <summary>	
    /// <p>Defines a regions of interest. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ROI_AREA']/*"/>	
    /// <msdn-id>dn302212</msdn-id>	
    /// <unmanaged>ROI_AREA</unmanaged>	
    /// <unmanaged-short>ROI_AREA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct RoiArea
    {

        /// <summary>	
        /// <dd> <p>The bounds of the region.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ROI_AREA::rect']/*"/>	
        /// <msdn-id>dn302212</msdn-id>	
        /// <unmanaged>RECT rect</unmanaged>	
        /// <unmanaged-short>RECT rect</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle Rect;

        /// <summary>	
        /// <dd> <p>Specifies the  quantization parameter delta for the specified region from the rest of the frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ROI_AREA::QPDelta']/*"/>	
        /// <msdn-id>dn302212</msdn-id>	
        /// <unmanaged>int QPDelta</unmanaged>	
        /// <unmanaged-short>int QPDelta</unmanaged-short>	
        public int QPDelta;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about a revoked component.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENT_HASH_INFO']/*"/>	
    /// <msdn-id>aa376487</msdn-id>	
    /// <unmanaged>MFRR_COMPONENT_HASH_INFO</unmanaged>	
    /// <unmanaged-short>MFRR_COMPONENT_HASH_INFO</unmanaged-short>	
    public partial struct RrComponentHashInformation
    {

        /// <summary>	
        /// <dd> <p>Specifies the reason for the revocation. The following values are defined.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MF_BOOT_DRIVER_VERIFICATION_FAILED</strong></dt> </dl> </td><td> <p>A boot driver could not be verified.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_CERT_REVOKED</strong></dt> </dl> </td><td> <p>A certificate in a trusted component's certificate chain was revoked.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_HS_CERT_REVOKED</strong></dt> </dl> </td><td> <p>The high-security certificate for authenticating the protected environment (PE) was revoked.</p> <p>The high-security certificate is typically used by ITAs that handle high-definition content and next-generation formats such as HD-DVD.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_INVALID_EKU</strong></dt> </dl> </td><td> <p>A certificate's extended key usage (EKU) object is invalid.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_INVALID_ROOT</strong></dt> </dl> </td><td> <p>The root certificate is not valid.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_LS_CERT_REVOKED</strong></dt> </dl> </td><td> <p>The low-security certificate for authenticating the PE was revoked.</p> <p>The low-security certificate is typically used by ITAs that handle standard-definition content and current-generation formats.</p> </td></tr> <tr><td><dl> <dt><strong>MF_COMPONENT_REVOKED</strong></dt> </dl> </td><td> <p>A trusted component was revoked.</p> </td></tr> <tr><td><dl> <dt><strong>MF_GRL_ABSENT</strong></dt> </dl> </td><td> <p>The GRL was not found.</p> </td></tr> <tr><td><dl> <dt><strong>MF_GRL_LOAD_FAILED</strong></dt> </dl> </td><td> <p>Could not load the global revocation list (GRL).</p> </td></tr> <tr><td><dl> <dt><strong>MF_INVALID_GRL_SIGNATURE</strong></dt> </dl> </td><td> <p>The GRL signature is invalid.</p> </td></tr> <tr><td><dl> <dt><strong>MF_MINCRYPT_FAILURE</strong></dt> </dl> </td><td> <p>A certificate chain was not well-formed, or a boot driver is unsigned or is signed with an untrusted certificate.</p> </td></tr> <tr><td><dl> <dt><strong>MF_TEST_SIGNED_COMPONENT_LOADING</strong></dt> </dl> </td><td> <p>A component was signed by a test certificate.</p> </td></tr> </table> <p>?</p> <p>In addition, one of the following flags might be present, indicating the type of component that failed to load.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>MF_USER_MODE_COMPONENT_LOAD</strong></dt> </dl> </td><td> <p>User-mode component.</p> </td></tr> <tr><td><dl> <dt><strong>MF_KERNEL_MODE_COMPONENT_LOAD</strong></dt> </dl> </td><td> <p>Kernel-mode component.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENT_HASH_INFO::ulReason']/*"/>	
        /// <msdn-id>aa376487</msdn-id>	
        /// <unmanaged>unsigned int ulReason</unmanaged>	
        /// <unmanaged-short>unsigned int ulReason</unmanaged-short>	
        public int UlReason;

        /// <summary>	
        /// <dd> <p>Contains a hash of the file header.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENT_HASH_INFO::rgHeaderHash']/*"/>	
        /// <msdn-id>aa376487</msdn-id>	
        /// <unmanaged>wchar_t rgHeaderHash[43]</unmanaged>	
        /// <unmanaged-short>wchar_t rgHeaderHash</unmanaged-short>	
        public string RgHeaderHash;

        /// <summary>	
        /// <dd> <p>Contains a hash of the public key in the component's certificate.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENT_HASH_INFO::rgPublicKeyHash']/*"/>	
        /// <msdn-id>aa376487</msdn-id>	
        /// <unmanaged>wchar_t rgPublicKeyHash[43]</unmanaged>	
        /// <unmanaged-short>wchar_t rgPublicKeyHash</unmanaged-short>	
        public string RgPublicKeyHash;

        /// <summary>	
        /// <dd> <p>File name of the revoked component.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENT_HASH_INFO::wszName']/*"/>	
        /// <msdn-id>aa376487</msdn-id>	
        /// <unmanaged>wchar_t wszName[260]</unmanaged>	
        /// <unmanaged-short>wchar_t wszName</unmanaged-short>	
        public string WszName;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int UlReason;
            public char RgHeaderHash;
            char __RgHeaderHash1;
            char __RgHeaderHash2;
            char __RgHeaderHash3;
            char __RgHeaderHash4;
            char __RgHeaderHash5;
            char __RgHeaderHash6;
            char __RgHeaderHash7;
            char __RgHeaderHash8;
            char __RgHeaderHash9;
            char __RgHeaderHash10;
            char __RgHeaderHash11;
            char __RgHeaderHash12;
            char __RgHeaderHash13;
            char __RgHeaderHash14;
            char __RgHeaderHash15;
            char __RgHeaderHash16;
            char __RgHeaderHash17;
            char __RgHeaderHash18;
            char __RgHeaderHash19;
            char __RgHeaderHash20;
            char __RgHeaderHash21;
            char __RgHeaderHash22;
            char __RgHeaderHash23;
            char __RgHeaderHash24;
            char __RgHeaderHash25;
            char __RgHeaderHash26;
            char __RgHeaderHash27;
            char __RgHeaderHash28;
            char __RgHeaderHash29;
            char __RgHeaderHash30;
            char __RgHeaderHash31;
            char __RgHeaderHash32;
            char __RgHeaderHash33;
            char __RgHeaderHash34;
            char __RgHeaderHash35;
            char __RgHeaderHash36;
            char __RgHeaderHash37;
            char __RgHeaderHash38;
            char __RgHeaderHash39;
            char __RgHeaderHash40;
            char __RgHeaderHash41;
            char __RgHeaderHash42;
            public char RgPublicKeyHash;
            char __RgPublicKeyHash1;
            char __RgPublicKeyHash2;
            char __RgPublicKeyHash3;
            char __RgPublicKeyHash4;
            char __RgPublicKeyHash5;
            char __RgPublicKeyHash6;
            char __RgPublicKeyHash7;
            char __RgPublicKeyHash8;
            char __RgPublicKeyHash9;
            char __RgPublicKeyHash10;
            char __RgPublicKeyHash11;
            char __RgPublicKeyHash12;
            char __RgPublicKeyHash13;
            char __RgPublicKeyHash14;
            char __RgPublicKeyHash15;
            char __RgPublicKeyHash16;
            char __RgPublicKeyHash17;
            char __RgPublicKeyHash18;
            char __RgPublicKeyHash19;
            char __RgPublicKeyHash20;
            char __RgPublicKeyHash21;
            char __RgPublicKeyHash22;
            char __RgPublicKeyHash23;
            char __RgPublicKeyHash24;
            char __RgPublicKeyHash25;
            char __RgPublicKeyHash26;
            char __RgPublicKeyHash27;
            char __RgPublicKeyHash28;
            char __RgPublicKeyHash29;
            char __RgPublicKeyHash30;
            char __RgPublicKeyHash31;
            char __RgPublicKeyHash32;
            char __RgPublicKeyHash33;
            char __RgPublicKeyHash34;
            char __RgPublicKeyHash35;
            char __RgPublicKeyHash36;
            char __RgPublicKeyHash37;
            char __RgPublicKeyHash38;
            char __RgPublicKeyHash39;
            char __RgPublicKeyHash40;
            char __RgPublicKeyHash41;
            char __RgPublicKeyHash42;
            public char WszName;
            char __WszName1;
            char __WszName2;
            char __WszName3;
            char __WszName4;
            char __WszName5;
            char __WszName6;
            char __WszName7;
            char __WszName8;
            char __WszName9;
            char __WszName10;
            char __WszName11;
            char __WszName12;
            char __WszName13;
            char __WszName14;
            char __WszName15;
            char __WszName16;
            char __WszName17;
            char __WszName18;
            char __WszName19;
            char __WszName20;
            char __WszName21;
            char __WszName22;
            char __WszName23;
            char __WszName24;
            char __WszName25;
            char __WszName26;
            char __WszName27;
            char __WszName28;
            char __WszName29;
            char __WszName30;
            char __WszName31;
            char __WszName32;
            char __WszName33;
            char __WszName34;
            char __WszName35;
            char __WszName36;
            char __WszName37;
            char __WszName38;
            char __WszName39;
            char __WszName40;
            char __WszName41;
            char __WszName42;
            char __WszName43;
            char __WszName44;
            char __WszName45;
            char __WszName46;
            char __WszName47;
            char __WszName48;
            char __WszName49;
            char __WszName50;
            char __WszName51;
            char __WszName52;
            char __WszName53;
            char __WszName54;
            char __WszName55;
            char __WszName56;
            char __WszName57;
            char __WszName58;
            char __WszName59;
            char __WszName60;
            char __WszName61;
            char __WszName62;
            char __WszName63;
            char __WszName64;
            char __WszName65;
            char __WszName66;
            char __WszName67;
            char __WszName68;
            char __WszName69;
            char __WszName70;
            char __WszName71;
            char __WszName72;
            char __WszName73;
            char __WszName74;
            char __WszName75;
            char __WszName76;
            char __WszName77;
            char __WszName78;
            char __WszName79;
            char __WszName80;
            char __WszName81;
            char __WszName82;
            char __WszName83;
            char __WszName84;
            char __WszName85;
            char __WszName86;
            char __WszName87;
            char __WszName88;
            char __WszName89;
            char __WszName90;
            char __WszName91;
            char __WszName92;
            char __WszName93;
            char __WszName94;
            char __WszName95;
            char __WszName96;
            char __WszName97;
            char __WszName98;
            char __WszName99;
            char __WszName100;
            char __WszName101;
            char __WszName102;
            char __WszName103;
            char __WszName104;
            char __WszName105;
            char __WszName106;
            char __WszName107;
            char __WszName108;
            char __WszName109;
            char __WszName110;
            char __WszName111;
            char __WszName112;
            char __WszName113;
            char __WszName114;
            char __WszName115;
            char __WszName116;
            char __WszName117;
            char __WszName118;
            char __WszName119;
            char __WszName120;
            char __WszName121;
            char __WszName122;
            char __WszName123;
            char __WszName124;
            char __WszName125;
            char __WszName126;
            char __WszName127;
            char __WszName128;
            char __WszName129;
            char __WszName130;
            char __WszName131;
            char __WszName132;
            char __WszName133;
            char __WszName134;
            char __WszName135;
            char __WszName136;
            char __WszName137;
            char __WszName138;
            char __WszName139;
            char __WszName140;
            char __WszName141;
            char __WszName142;
            char __WszName143;
            char __WszName144;
            char __WszName145;
            char __WszName146;
            char __WszName147;
            char __WszName148;
            char __WszName149;
            char __WszName150;
            char __WszName151;
            char __WszName152;
            char __WszName153;
            char __WszName154;
            char __WszName155;
            char __WszName156;
            char __WszName157;
            char __WszName158;
            char __WszName159;
            char __WszName160;
            char __WszName161;
            char __WszName162;
            char __WszName163;
            char __WszName164;
            char __WszName165;
            char __WszName166;
            char __WszName167;
            char __WszName168;
            char __WszName169;
            char __WszName170;
            char __WszName171;
            char __WszName172;
            char __WszName173;
            char __WszName174;
            char __WszName175;
            char __WszName176;
            char __WszName177;
            char __WszName178;
            char __WszName179;
            char __WszName180;
            char __WszName181;
            char __WszName182;
            char __WszName183;
            char __WszName184;
            char __WszName185;
            char __WszName186;
            char __WszName187;
            char __WszName188;
            char __WszName189;
            char __WszName190;
            char __WszName191;
            char __WszName192;
            char __WszName193;
            char __WszName194;
            char __WszName195;
            char __WszName196;
            char __WszName197;
            char __WszName198;
            char __WszName199;
            char __WszName200;
            char __WszName201;
            char __WszName202;
            char __WszName203;
            char __WszName204;
            char __WszName205;
            char __WszName206;
            char __WszName207;
            char __WszName208;
            char __WszName209;
            char __WszName210;
            char __WszName211;
            char __WszName212;
            char __WszName213;
            char __WszName214;
            char __WszName215;
            char __WszName216;
            char __WszName217;
            char __WszName218;
            char __WszName219;
            char __WszName220;
            char __WszName221;
            char __WszName222;
            char __WszName223;
            char __WszName224;
            char __WszName225;
            char __WszName226;
            char __WszName227;
            char __WszName228;
            char __WszName229;
            char __WszName230;
            char __WszName231;
            char __WszName232;
            char __WszName233;
            char __WszName234;
            char __WszName235;
            char __WszName236;
            char __WszName237;
            char __WszName238;
            char __WszName239;
            char __WszName240;
            char __WszName241;
            char __WszName242;
            char __WszName243;
            char __WszName244;
            char __WszName245;
            char __WszName246;
            char __WszName247;
            char __WszName248;
            char __WszName249;
            char __WszName250;
            char __WszName251;
            char __WszName252;
            char __WszName253;
            char __WszName254;
            char __WszName255;
            char __WszName256;
            char __WszName257;
            char __WszName258;
            char __WszName259;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.UlReason = @ref.UlReason;
            fixed (char* __ptr = &@ref.RgHeaderHash) this.RgHeaderHash = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 43);
            fixed (char* __ptr = &@ref.RgPublicKeyHash) this.RgPublicKeyHash = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 43);
            fixed (char* __ptr = &@ref.WszName) this.WszName = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 260);
        }
    }

    /// <summary>	
    /// <p> </p><p>Contains information about one or more revoked components.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENTS']/*"/>	
    /// <msdn-id>aa375568</msdn-id>	
    /// <unmanaged>MFRR_COMPONENTS</unmanaged>	
    /// <unmanaged-short>MFRR_COMPONENTS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct RrComponents
    {

        /// <summary>	
        /// <dd> <p>Revocation information version.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENTS::dwRRInfoVersion']/*"/>	
        /// <msdn-id>aa375568</msdn-id>	
        /// <unmanaged>unsigned int dwRRInfoVersion</unmanaged>	
        /// <unmanaged-short>unsigned int dwRRInfoVersion</unmanaged-short>	
        public int DwRRInfoVersion;

        /// <summary>	
        /// <dd> <p>Number of elements in the <strong>pRRComponents</strong> array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENTS::dwRRComponents']/*"/>	
        /// <msdn-id>aa375568</msdn-id>	
        /// <unmanaged>unsigned int dwRRComponents</unmanaged>	
        /// <unmanaged-short>unsigned int dwRRComponents</unmanaged-short>	
        public int DwRRComponents;

        /// <summary>	
        /// <dd> <p>Array of <strong><see cref="SharpDX.MediaFoundation.RrComponentHashInformation"/></strong> structures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFRR_COMPONENTS::pRRComponents']/*"/>	
        /// <msdn-id>aa375568</msdn-id>	
        /// <unmanaged>MFRR_COMPONENT_HASH_INFO* pRRComponents</unmanaged>	
        /// <unmanaged-short>MFRR_COMPONENT_HASH_INFO pRRComponents</unmanaged-short>	
        public System.IntPtr PRRComponents;
    }

    /// <summary>	
    /// <p>Contains statistics about the performance of the sink writer.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS']/*"/>	
    /// <msdn-id>dd375769</msdn-id>	
    /// <unmanaged>MF_SINK_WRITER_STATISTICS</unmanaged>	
    /// <unmanaged-short>MF_SINK_WRITER_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SinkWriterStatistics
    {

        /// <summary>	
        /// <dd> <p>The size of the structure, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::cb']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int cb</unmanaged>	
        /// <unmanaged-short>unsigned int cb</unmanaged-short>	
        public int Cb;

        /// <summary>	
        /// <dd> <p>The time stamp of the most recent sample given to the sink writer. The sink writer updates this value each time the application calls <strong><see cref="SharpDX.MediaFoundation.SinkWriter.WriteSample"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::llLastTimestampReceived']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>longlong llLastTimestampReceived</unmanaged>	
        /// <unmanaged-short>longlong llLastTimestampReceived</unmanaged-short>	
        public long LlLastTimestampReceived;

        /// <summary>	
        /// <dd> <p>The time stamp of the most recent sample to be encoded. The sink writer updates this value whenever it calls <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong> on the encoder.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::llLastTimestampEncoded']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>longlong llLastTimestampEncoded</unmanaged>	
        /// <unmanaged-short>longlong llLastTimestampEncoded</unmanaged-short>	
        public long LlLastTimestampEncoded;

        /// <summary>	
        /// <dd> <p>The time stamp of the most recent sample given to the media sink. The sink writer updates this value whenever it calls <strong><see cref="SharpDX.MediaFoundation.StreamSink.ProcessSample"/></strong> on the media sink.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::llLastTimestampProcessed']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>longlong llLastTimestampProcessed</unmanaged>	
        /// <unmanaged-short>longlong llLastTimestampProcessed</unmanaged-short>	
        public long LlLastTimestampProcessed;

        /// <summary>	
        /// <dd> <p>The time stamp of the most recent stream tick. The sink writer updates this value whenever the application calls <strong><see cref="SharpDX.MediaFoundation.SinkWriter.SendStreamTick"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::llLastStreamTickReceived']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>longlong llLastStreamTickReceived</unmanaged>	
        /// <unmanaged-short>longlong llLastStreamTickReceived</unmanaged-short>	
        public long LlLastStreamTickReceived;

        /// <summary>	
        /// <dd> <p>The system time of the most recent sample request from the media sink. The sink writer updates this value whenever it receives an <see cref="SharpDX.MediaFoundation.MediaEventTypes.StreamSinkRequestSample"/> event from the media sink. The value is the current system time.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::llLastSinkSampleRequest']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>longlong llLastSinkSampleRequest</unmanaged>	
        /// <unmanaged-short>longlong llLastSinkSampleRequest</unmanaged-short>	
        public long LlLastSinkSampleRequest;

        /// <summary>	
        /// <dd> <p>The number of samples received.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::qwNumSamplesReceived']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned longlong qwNumSamplesReceived</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwNumSamplesReceived</unmanaged-short>	
        public long QwNumSamplesReceived;

        /// <summary>	
        /// <dd> <p>The number of samples encoded.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::qwNumSamplesEncoded']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned longlong qwNumSamplesEncoded</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwNumSamplesEncoded</unmanaged-short>	
        public long QwNumSamplesEncoded;

        /// <summary>	
        /// <dd> <p>The number of samples given to the media sink.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::qwNumSamplesProcessed']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned longlong qwNumSamplesProcessed</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwNumSamplesProcessed</unmanaged-short>	
        public long QwNumSamplesProcessed;

        /// <summary>	
        /// <dd> <p>The number of stream ticks received.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::qwNumStreamTicksReceived']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned longlong qwNumStreamTicksReceived</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwNumStreamTicksReceived</unmanaged-short>	
        public long QwNumStreamTicksReceived;

        /// <summary>	
        /// <dd> <p>The amount of data, in bytes, currently waiting to be processed. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::dwByteCountQueued']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int dwByteCountQueued</unmanaged>	
        /// <unmanaged-short>unsigned int dwByteCountQueued</unmanaged-short>	
        public int DwByteCountQueued;

        /// <summary>	
        /// <dd> <p>The total amount of data, in bytes, that has been sent to the media sink.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::qwByteCountProcessed']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned longlong qwByteCountProcessed</unmanaged>	
        /// <unmanaged-short>unsigned longlong qwByteCountProcessed</unmanaged-short>	
        public long QwByteCountProcessed;

        /// <summary>	
        /// <dd> <p>The number of pending sample requests.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::dwNumOutstandingSinkSampleRequests']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int dwNumOutstandingSinkSampleRequests</unmanaged>	
        /// <unmanaged-short>unsigned int dwNumOutstandingSinkSampleRequests</unmanaged-short>	
        public int DwNumOutstandingSinkSampleRequests;

        /// <summary>	
        /// <dd> <p>The average rate, in media samples per 100-nanoseconds, at which the application sent samples to the sink writer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::dwAverageSampleRateReceived']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int dwAverageSampleRateReceived</unmanaged>	
        /// <unmanaged-short>unsigned int dwAverageSampleRateReceived</unmanaged-short>	
        public int DwAverageSampleRateReceived;

        /// <summary>	
        /// <dd> <p>The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the encoder.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::dwAverageSampleRateEncoded']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int dwAverageSampleRateEncoded</unmanaged>	
        /// <unmanaged-short>unsigned int dwAverageSampleRateEncoded</unmanaged-short>	
        public int DwAverageSampleRateEncoded;

        /// <summary>	
        /// <dd> <p>The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the media sink.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_SINK_WRITER_STATISTICS::dwAverageSampleRateProcessed']/*"/>	
        /// <msdn-id>dd375769</msdn-id>	
        /// <unmanaged>unsigned int dwAverageSampleRateProcessed</unmanaged>	
        /// <unmanaged-short>unsigned int dwAverageSampleRateProcessed</unmanaged-short>	
        public int DwAverageSampleRateProcessed;
    }

    /// <summary>	
    /// <p>Not for application use.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used internally by the Microsoft Media Foundation AVStream proxy.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='STREAM_MEDIUM']/*"/>	
    /// <msdn-id>dd940437</msdn-id>	
    /// <unmanaged>STREAM_MEDIUM</unmanaged>	
    /// <unmanaged-short>STREAM_MEDIUM</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StreamMedium
    {

        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='STREAM_MEDIUM::gidMedium']/*"/>	
        /// <msdn-id>dd940437</msdn-id>	
        /// <unmanaged>GUID gidMedium</unmanaged>	
        /// <unmanaged-short>GUID gidMedium</unmanaged-short>	
        public System.Guid GidMedium;

        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='STREAM_MEDIUM::unMediumInstance']/*"/>	
        /// <msdn-id>dd940437</msdn-id>	
        /// <unmanaged>unsigned int unMediumInstance</unmanaged>	
        /// <unmanaged-short>unsigned int unMediumInstance</unmanaged-short>	
        public int UnMediumInstance;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about an input stream on a Media Foundation transform (MFT). To get these values, call <strong><see cref="SharpDX.MediaFoundation.Transform.GetInputStreamInfo"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Before the media types are set, the only values that should be considered valid are the <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamRemovable"/> and <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamOptional"/> flags in the <strong>dwFlags</strong> member.</p><ul> <li> <p>The <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamRemovable"/> flag indicates that the stream can be deleted.</p> </li> <li> <p>The <see cref="SharpDX.MediaFoundation.MftInputStreamInformationFlags.MftInputStreamOptional"/> flag indicates that the stream is optional and does not require a media type.</p> </li> </ul><p>After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the <strong>GetInputStreamInfo</strong> method are valid. They might change if you set different media types.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO']/*"/>	
    /// <msdn-id>ms704067</msdn-id>	
    /// <unmanaged>MFT_INPUT_STREAM_INFO</unmanaged>	
    /// <unmanaged-short>MFT_INPUT_STREAM_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TInputStreamInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO::hnsMaxLatency']/*"/>	
        /// <msdn-id>ms704067</msdn-id>	
        /// <unmanaged>longlong hnsMaxLatency</unmanaged>	
        /// <unmanaged-short>longlong hnsMaxLatency</unmanaged-short>	
        public long HnsMaxLatency;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO::dwFlags']/*"/>	
        /// <msdn-id>ms704067</msdn-id>	
        /// <unmanaged>unsigned int dwFlags</unmanaged>	
        /// <unmanaged-short>unsigned int dwFlags</unmanaged-short>	
        public int DwFlags;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO::cbSize']/*"/>	
        /// <msdn-id>ms704067</msdn-id>	
        /// <unmanaged>unsigned int cbSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbSize</unmanaged-short>	
        public int CbSize;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO::cbMaxLookahead']/*"/>	
        /// <msdn-id>ms704067</msdn-id>	
        /// <unmanaged>unsigned int cbMaxLookahead</unmanaged>	
        /// <unmanaged-short>unsigned int cbMaxLookahead</unmanaged-short>	
        public int CbMaxLookahead;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_INPUT_STREAM_INFO::cbAlignment']/*"/>	
        /// <msdn-id>ms704067</msdn-id>	
        /// <unmanaged>unsigned int cbAlignment</unmanaged>	
        /// <unmanaged-short>unsigned int cbAlignment</unmanaged-short>	
        public int CbAlignment;
    }

    /// <summary>	
    /// <p>Specifies a new attribute value for a topology node.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Due to an error in the structure declaration, the <strong>u64</strong> member is declared as a 32-bit integer, not a 64-bit integer. Therefore, any 64-bit value passed to the <strong><see cref="SharpDX.MediaFoundation.TopologyNodeAttributeEditor.UpdateNodeAttributes"/></strong> method is truncated to 32 bits. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE']/*"/>	
    /// <msdn-id>aa371336</msdn-id>	
    /// <unmanaged>MFTOPONODE_ATTRIBUTE_UPDATE</unmanaged>	
    /// <unmanaged-short>MFTOPONODE_ATTRIBUTE_UPDATE</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public partial struct ToponodeAttributeUpdate
    {

        /// <summary>	
        /// <dd> <p> The identifier of the topology node to update. To get the identifier of a topology node, call <strong><see cref="SharpDX.MediaFoundation.TopologyNode.GetTopoNodeID"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::NodeId']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>unsigned longlong NodeId</unmanaged>	
        /// <unmanaged-short>unsigned longlong NodeId</unmanaged-short>	
        [FieldOffset(0)]
        public long NodeId;

        /// <summary>	
        /// <dd> <p> <see cref="System.Guid"/> that specifies the attribute to update. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::guidAttributeKey']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>GUID guidAttributeKey</unmanaged>	
        /// <unmanaged-short>GUID guidAttributeKey</unmanaged-short>	
        [FieldOffset(8)]
        public System.Guid GuidAttributeKey;

        /// <summary>	
        /// <dd> <p> Attribute type, specified as a member of the <strong><see cref="SharpDX.MediaFoundation.AttributeType"/></strong> enumeration. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::attrType']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>MF_ATTRIBUTE_TYPE attrType</unmanaged>	
        /// <unmanaged-short>MF_ATTRIBUTE_TYPE attrType</unmanaged-short>	
        [FieldOffset(24)]
        public SharpDX.MediaFoundation.AttributeType AttrType;

        /// <summary>	
        /// <dd> <p> Attribute value (unsigned 32-bit integer). This member is used when <strong>attrType</strong> equals <strong><see cref="SharpDX.MediaFoundation.AttributeType.UInt32"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::u32']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>unsigned int u32</unmanaged>	
        /// <unmanaged-short>unsigned int u32</unmanaged-short>	
        [FieldOffset(28)]
        public int U32;

        /// <summary>	
        /// <dd> <p> Attribute value (unsigned 32-bit integer). This member is used when <strong>attrType</strong> equals <strong><see cref="SharpDX.MediaFoundation.AttributeType.UInt64"/></strong>. See Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::u64']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>unsigned longlong u64</unmanaged>	
        /// <unmanaged-short>unsigned longlong u64</unmanaged-short>	
        [FieldOffset(32)]
        public long U64;

        /// <summary>	
        /// <dd> <p> Attribute value (floating point). This member is used when <strong>attrType</strong> equals <strong><see cref="SharpDX.MediaFoundation.AttributeType.Double"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFTOPONODE_ATTRIBUTE_UPDATE::d']/*"/>	
        /// <msdn-id>aa371336</msdn-id>	
        /// <unmanaged>double d</unmanaged>	
        /// <unmanaged-short>double d</unmanaged-short>	
        [FieldOffset(32)]
        public double D;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about an output buffer for a Media Foundation transform. This structure is used in the <strong><see cref="SharpDX.MediaFoundation.Transform.ProcessOutput"/></strong> method.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You must provide an <strong><see cref="SharpDX.MediaFoundation.TOutputDataBuffer"/></strong> structure for each selected output stream.</p><p>MFTs can support two different allocation models for output samples:</p><ul> <li> The MFT allocates the output sample. </li> <li> The client allocates the output sample. </li> </ul><p>To find which model the MFT supports for a given output stream, call <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong> and check the value of <strong>dwFlags</strong>.</p><table> <tr><th>Flag</th><th>Allocation Model</th></tr> <tr><td><see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/></td><td>The MFT allocates the output samples for the stream. Set <strong>pSample</strong> to <strong><c>null</c></strong> for this stream.</td></tr> <tr><td><see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamCanProvideSamples"/></td><td>The MFT supports both allocation models.</td></tr> <tr><td>Neither (default)</td><td>The client must allocate the output samples for the stream.</td></tr> </table><p>?</p><p>The behavior of <strong>ProcessOutput</strong> depends on the initial value of <strong>pSample</strong> and the value of the <em>dwFlags</em> parameter in the <strong>ProcessOutput</strong> method.</p><ul> <li> <p>If <strong>pSample</strong> is <strong><c>null</c></strong> and <em>dwFlags</em> contains the <see cref="SharpDX.MediaFoundation.TransformProcessOutputFlags.MftProcessOutputDiscardWhenNoBuffer"/> flag, the MFT discards the output data.</p> <p>Restriction: This output stream must have the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamDiscardable"/> or <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamLazyRead"/> flag. (To get the flags for the output stream, call the <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong> method.)</p> </li> <li> <p>If <strong>pSample</strong> is <strong><c>null</c></strong> and <em>dwFlags</em> does not contain the <see cref="SharpDX.MediaFoundation.TransformProcessOutputFlags.MftProcessOutputDiscardWhenNoBuffer"/>, the MFT provides a sample for the output data. The MFT sets <strong>pSample</strong> to point to the sample that it provides. The MFT can either allocate a new sample or re-use an input sample.</p> <p>Restriction: This output stream must have the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/> or <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamCanProvideSamples"/> flag.</p> </li> <li> <p>If <strong>pSample</strong> is non-<strong><c>null</c></strong>, the MFT uses the sample provided by the caller.</p> <p>Restriction: This output stream must not have the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamProvidesSamples"/> flag.</p> </li> </ul><p>Any other combinations are invalid and cause <strong>ProcessOutput</strong> to return E_INVALIDARG.</p><p>Each call to <strong>ProcessOutput</strong> can produce zero or more events and up to one sample per output stream.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER']/*"/>	
    /// <msdn-id>ms697247</msdn-id>	
    /// <unmanaged>MFT_OUTPUT_DATA_BUFFER</unmanaged>	
    /// <unmanaged-short>MFT_OUTPUT_DATA_BUFFER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TOutputDataBuffer
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER::dwStreamID']/*"/>	
        /// <msdn-id>ms697247</msdn-id>	
        /// <unmanaged>unsigned int dwStreamID</unmanaged>	
        /// <unmanaged-short>unsigned int dwStreamID</unmanaged-short>	
        public int DwStreamID;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER::pSample']/*"/>	
        /// <msdn-id>ms697247</msdn-id>	
        /// <unmanaged>IMFSample* pSample</unmanaged>	
        /// <unmanaged-short>IMFSample pSample</unmanaged-short>	
        public System.IntPtr PSample;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER::dwStatus']/*"/>	
        /// <msdn-id>ms697247</msdn-id>	
        /// <unmanaged>unsigned int dwStatus</unmanaged>	
        /// <unmanaged-short>unsigned int dwStatus</unmanaged-short>	
        public int DwStatus;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_DATA_BUFFER::pEvents']/*"/>	
        /// <msdn-id>ms697247</msdn-id>	
        /// <unmanaged>IMFCollection* pEvents</unmanaged>	
        /// <unmanaged-short>IMFCollection pEvents</unmanaged-short>	
        public System.IntPtr PEvents;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about an output stream on a Media Foundation transform (MFT). To get these values, call <strong><see cref="SharpDX.MediaFoundation.Transform.GetOutputStreamInfo"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Before the media types are set, the only values that should be considered valid is the <see cref="SharpDX.MediaFoundation.MftOutputStreamInformationFlags.MftOutputStreamOptional"/> flag in the <strong>dwFlags</strong> member. This flag indicates that the stream is optional and does not require a media type.</p><p>After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the <strong>GetOutputStreamInfo</strong> method are valid. They might change if you set different media types.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_INFO']/*"/>	
    /// <msdn-id>ms696974</msdn-id>	
    /// <unmanaged>MFT_OUTPUT_STREAM_INFO</unmanaged>	
    /// <unmanaged-short>MFT_OUTPUT_STREAM_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TOutputStreamInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_INFO::dwFlags']/*"/>	
        /// <msdn-id>ms696974</msdn-id>	
        /// <unmanaged>unsigned int dwFlags</unmanaged>	
        /// <unmanaged-short>unsigned int dwFlags</unmanaged-short>	
        public int DwFlags;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_INFO::cbSize']/*"/>	
        /// <msdn-id>ms696974</msdn-id>	
        /// <unmanaged>unsigned int cbSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbSize</unmanaged-short>	
        public int CbSize;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_OUTPUT_STREAM_INFO::cbAlignment']/*"/>	
        /// <msdn-id>ms696974</msdn-id>	
        /// <unmanaged>unsigned int cbAlignment</unmanaged>	
        /// <unmanaged-short>unsigned int cbAlignment</unmanaged-short>	
        public int CbAlignment;
    }

    /// <summary>	
    /// <p>Contains information about the audio and video streams for the transcode sink activation object.</p><p>To get the information stored in this structure, call <strong><see cref="SharpDX.MediaFoundation.TranscodeSinkInfoProvider.GetSinkInfo"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.MediaFoundation.TranscodeSinkInfoProvider.GetSinkInfo"/></strong> method assigns <strong><see cref="SharpDX.MediaFoundation.MediaType"/></strong> references to the <strong>pAudioMediaType</strong> and <strong>pVideoMediaType</strong> members of this structure. The method might set either member to <strong><c>null</c></strong>. If either member is non-<strong><c>null</c></strong> after the method returns, the caller must release the <strong><see cref="SharpDX.MediaFoundation.MediaType"/></strong> references.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_SINK_INFO']/*"/>	
    /// <msdn-id>dd388923</msdn-id>	
    /// <unmanaged>MF_TRANSCODE_SINK_INFO</unmanaged>	
    /// <unmanaged-short>MF_TRANSCODE_SINK_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TranscodeSinkInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_SINK_INFO::dwVideoStreamID']/*"/>	
        /// <msdn-id>dd388923</msdn-id>	
        /// <unmanaged>unsigned int dwVideoStreamID</unmanaged>	
        /// <unmanaged-short>unsigned int dwVideoStreamID</unmanaged-short>	
        public int DwVideoStreamID;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_SINK_INFO::pVideoMediaType']/*"/>	
        /// <msdn-id>dd388923</msdn-id>	
        /// <unmanaged>IMFMediaType* pVideoMediaType</unmanaged>	
        /// <unmanaged-short>IMFMediaType pVideoMediaType</unmanaged-short>	
        public System.IntPtr PVideoMediaType;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_SINK_INFO::dwAudioStreamID']/*"/>	
        /// <msdn-id>dd388923</msdn-id>	
        /// <unmanaged>unsigned int dwAudioStreamID</unmanaged>	
        /// <unmanaged-short>unsigned int dwAudioStreamID</unmanaged-short>	
        public int DwAudioStreamID;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_TRANSCODE_SINK_INFO::pAudioMediaType']/*"/>	
        /// <msdn-id>dd388923</msdn-id>	
        /// <unmanaged>IMFMediaType* pAudioMediaType</unmanaged>	
        /// <unmanaged-short>IMFMediaType pAudioMediaType</unmanaged-short>	
        public System.IntPtr PAudioMediaType;
    }

    /// <summary>	
    /// <p>Contains media type information for registering a Media Foundation transform (MFT). </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTER_TYPE_INFO']/*"/>	
    /// <msdn-id>ms694919</msdn-id>	
    /// <unmanaged>MFT_REGISTER_TYPE_INFO</unmanaged>	
    /// <unmanaged-short>MFT_REGISTER_TYPE_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TRegisterTypeInformation
    {

        /// <summary>	
        /// <dd> <p>The major media type. For a list of possible values, see Major Media Types. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTER_TYPE_INFO::guidMajorType']/*"/>	
        /// <msdn-id>ms694919</msdn-id>	
        /// <unmanaged>GUID guidMajorType</unmanaged>	
        /// <unmanaged-short>GUID guidMajorType</unmanaged-short>	
        public System.Guid GuidMajorType;

        /// <summary>	
        /// <dd> <p>The media subtype. For a list of possible values, see the following topics:</p> <ul> <li> Audio Subtype GUIDs </li> <li> Video Subtype GUIDs </li> </ul> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTER_TYPE_INFO::guidSubtype']/*"/>	
        /// <msdn-id>ms694919</msdn-id>	
        /// <unmanaged>GUID guidSubtype</unmanaged>	
        /// <unmanaged-short>GUID guidSubtype</unmanaged-short>	
        public System.Guid GuidSubtype;
    }

    /// <summary>	
    /// <p>Contains parameters for the <strong><see cref="SharpDX.MediaFoundation.LocalMFTRegistration.RegisterMFTs"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO']/*"/>	
    /// <msdn-id>dd388673</msdn-id>	
    /// <unmanaged>MFT_REGISTRATION_INFO</unmanaged>	
    /// <unmanaged-short>MFT_REGISTRATION_INFO</unmanaged-short>	
    public partial struct TRegistrationInformation
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::clsid']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>GUID clsid</unmanaged>	
        /// <unmanaged-short>GUID clsid</unmanaged-short>	
        public System.Guid Clsid;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::guidCategory']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>GUID guidCategory</unmanaged>	
        /// <unmanaged-short>GUID guidCategory</unmanaged-short>	
        public System.Guid GuidCategory;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::uiFlags']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>unsigned int uiFlags</unmanaged>	
        /// <unmanaged-short>unsigned int uiFlags</unmanaged-short>	
        public int UiFlags;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::pszName']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>const wchar_t* pszName</unmanaged>	
        /// <unmanaged-short>wchar_t pszName</unmanaged-short>	
        public string PszName;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::cInTypes']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>unsigned int cInTypes</unmanaged>	
        /// <unmanaged-short>unsigned int cInTypes</unmanaged-short>	
        public int CInTypes;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::pInTypes']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>MFT_REGISTER_TYPE_INFO* pInTypes</unmanaged>	
        /// <unmanaged-short>MFT_REGISTER_TYPE_INFO pInTypes</unmanaged-short>	
        public System.IntPtr PInTypes;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::cOutTypes']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>unsigned int cOutTypes</unmanaged>	
        /// <unmanaged-short>unsigned int cOutTypes</unmanaged-short>	
        public int COutTypes;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_REGISTRATION_INFO::pOutTypes']/*"/>	
        /// <msdn-id>dd388673</msdn-id>	
        /// <unmanaged>MFT_REGISTER_TYPE_INFO* pOutTypes</unmanaged>	
        /// <unmanaged-short>MFT_REGISTER_TYPE_INFO pOutTypes</unmanaged-short>	
        public System.IntPtr POutTypes;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public System.Guid Clsid;
            public System.Guid GuidCategory;
            public int UiFlags;
            public System.IntPtr PszName;
            public int CInTypes;
            public System.IntPtr PInTypes;
            public int COutTypes;
            public System.IntPtr POutTypes;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
                if (this.PszName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszName);
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.Clsid = @ref.Clsid;
            this.GuidCategory = @ref.GuidCategory;
            this.UiFlags = @ref.UiFlags;
            this.PszName = (@ref.PszName == IntPtr.Zero) ? null : Marshal.PtrToStringUni(@ref.PszName);
            this.CInTypes = @ref.CInTypes;
            this.PInTypes = @ref.PInTypes;
            this.COutTypes = @ref.COutTypes;
            this.POutTypes = @ref.POutTypes;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Clsid = this.Clsid;
            @ref.GuidCategory = this.GuidCategory;
            @ref.UiFlags = this.UiFlags;
            @ref.PszName = (this.PszName == null) ? IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszName);
            @ref.CInTypes = this.CInTypes;
            @ref.PInTypes = this.PInTypes;
            @ref.COutTypes = this.COutTypes;
            @ref.POutTypes = this.POutTypes;

        }
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_STREAM_STATE_PARAM']/*"/>	
    /// <unmanaged>MFT_STREAM_STATE_PARAM</unmanaged>	
    /// <unmanaged-short>MFT_STREAM_STATE_PARAM</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TStreamStateParam
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_STREAM_STATE_PARAM::StreamId']/*"/>	
        /// <unmanaged>unsigned int StreamId</unmanaged>	
        /// <unmanaged-short>unsigned int StreamId</unmanaged-short>	
        public int StreamId;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFT_STREAM_STATE_PARAM::State']/*"/>	
        /// <unmanaged>MF_STREAM_STATE State</unmanaged>	
        /// <unmanaged-short>MF_STREAM_STATE State</unmanaged-short>	
        public SharpDX.MediaFoundation.StreamState State;
    }

    /// <summary>	
    /// <p> Specifies a rectangular area within a video frame. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoArea']/*"/>	
    /// <msdn-id>ms703850</msdn-id>	
    /// <unmanaged>MFVideoArea</unmanaged>	
    /// <unmanaged-short>MFVideoArea</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct VideoArea
    {

        /// <summary>	
        /// <dd> <p> An <strong><see cref="SharpDX.MediaFoundation.Offset"/></strong> structure that contains the x-coordinate of the upper-left corner of the rectangle. This coordinate might have a fractional value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoArea::OffsetX']/*"/>	
        /// <msdn-id>ms703850</msdn-id>	
        /// <unmanaged>MFOffset OffsetX</unmanaged>	
        /// <unmanaged-short>MFOffset OffsetX</unmanaged-short>	
        public SharpDX.MediaFoundation.Offset OffsetX;

        /// <summary>	
        /// <dd> <p> An <strong><see cref="SharpDX.MediaFoundation.Offset"/></strong> structure that contains the y-coordinate of the upper-left corner of the rectangle. This coordinate might have a fractional value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoArea::OffsetY']/*"/>	
        /// <msdn-id>ms703850</msdn-id>	
        /// <unmanaged>MFOffset OffsetY</unmanaged>	
        /// <unmanaged-short>MFOffset OffsetY</unmanaged-short>	
        public SharpDX.MediaFoundation.Offset OffsetY;

        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Size2"/></strong> structure that contains the width and height of the rectangle. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoArea::Area']/*"/>	
        /// <msdn-id>ms703850</msdn-id>	
        /// <unmanaged>SIZE Area</unmanaged>	
        /// <unmanaged-short>SIZE Area</unmanaged-short>	
        public SharpDX.Size2 Area;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about a video compression format. This structure is used in the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For uncompressed video formats, set the structure members to zero.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoCompressedInfo']/*"/>	
    /// <msdn-id>aa473839</msdn-id>	
    /// <unmanaged>MFVideoCompressedInfo</unmanaged>	
    /// <unmanaged-short>MFVideoCompressedInfo</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct VideoCompressedInfo
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoCompressedInfo::AvgBitrate']/*"/>	
        /// <msdn-id>aa473839</msdn-id>	
        /// <unmanaged>longlong AvgBitrate</unmanaged>	
        /// <unmanaged-short>longlong AvgBitrate</unmanaged-short>	
        public long AvgBitrate;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoCompressedInfo::AvgBitErrorRate']/*"/>	
        /// <msdn-id>aa473839</msdn-id>	
        /// <unmanaged>longlong AvgBitErrorRate</unmanaged>	
        /// <unmanaged-short>longlong AvgBitErrorRate</unmanaged-short>	
        public long AvgBitErrorRate;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoCompressedInfo::MaxKeyFrameSpacing']/*"/>	
        /// <msdn-id>aa473839</msdn-id>	
        /// <unmanaged>unsigned int MaxKeyFrameSpacing</unmanaged>	
        /// <unmanaged-short>unsigned int MaxKeyFrameSpacing</unmanaged-short>	
        public int MaxKeyFrameSpacing;
    }

    /// <summary>	
    /// <p> </p><p>Describes a video format.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Applications should avoid using this structure. Instead, it is recommended that applications use attributes to describe the video format. For a list of media type attributes, see Media Type Attributes. With attributes, you can set just the format information that you know, which is easier (and more likely to be accurate) than trying to fill in complete format information for the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure.</p><p>To initialize a media type object from an <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure, call <strong><see cref="SharpDX.MediaFoundation.MediaFactory.InitMediaTypeFromMFVideoFormat"/></strong>.</p><p>You can use the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure as the format block for a DirectShow media type. Set the format <see cref="System.Guid"/> to FORMAT_MFVideoFormat.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT']/*"/>	
    /// <msdn-id>aa473808</msdn-id>	
    /// <unmanaged>MFVIDEOFORMAT</unmanaged>	
    /// <unmanaged-short>MFVIDEOFORMAT</unmanaged-short>	
    public partial struct VideoFormat
    {

        /// <summary>	
        /// <dd> <p>Size of the structure, in bytes. This value includes the size of the palette entries that may appear after the <strong>surfaceInfo</strong> member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT::dwSize']/*"/>	
        /// <msdn-id>aa473808</msdn-id>	
        /// <unmanaged>unsigned int dwSize</unmanaged>	
        /// <unmanaged-short>unsigned int dwSize</unmanaged-short>	
        public int DwSize;

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.MediaFoundation.VideoInfo"/></strong> structure. This structure contains information that applies to both compressed and uncompressed formats.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT::videoInfo']/*"/>	
        /// <msdn-id>aa473808</msdn-id>	
        /// <unmanaged>MFVideoInfo videoInfo</unmanaged>	
        /// <unmanaged-short>MFVideoInfo videoInfo</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoInfo VideoInfo;

        /// <summary>	
        /// <dd> <p>Video subtype. See Video Subtype GUIDs.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT::guidFormat']/*"/>	
        /// <msdn-id>aa473808</msdn-id>	
        /// <unmanaged>GUID guidFormat</unmanaged>	
        /// <unmanaged-short>GUID guidFormat</unmanaged-short>	
        public System.Guid GuidFormat;

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.MediaFoundation.VideoCompressedInfo"/></strong> structure. This structure contains information that applies only to compressed formats.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT::compressedInfo']/*"/>	
        /// <msdn-id>aa473808</msdn-id>	
        /// <unmanaged>MFVideoCompressedInfo compressedInfo</unmanaged>	
        /// <unmanaged-short>MFVideoCompressedInfo compressedInfo</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoCompressedInfo CompressedInfo;

        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.MediaFoundation.VideoSurfaceInfo"/></strong> structure. This structure contains information that applies only to uncompressed formats.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVIDEOFORMAT::surfaceInfo']/*"/>	
        /// <msdn-id>aa473808</msdn-id>	
        /// <unmanaged>MFVideoSurfaceInfo surfaceInfo</unmanaged>	
        /// <unmanaged-short>MFVideoSurfaceInfo surfaceInfo</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoSurfaceInfo SurfaceInfo;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int DwSize;
            public SharpDX.MediaFoundation.VideoInfo VideoInfo;
            public System.Guid GuidFormat;
            public SharpDX.MediaFoundation.VideoCompressedInfo CompressedInfo;
            public SharpDX.MediaFoundation.VideoSurfaceInfo.__Native SurfaceInfo;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
                this.SurfaceInfo.__MarshalFree();
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.DwSize = @ref.DwSize;
            this.VideoInfo = @ref.VideoInfo;
            this.GuidFormat = @ref.GuidFormat;
            this.CompressedInfo = @ref.CompressedInfo;
            this.SurfaceInfo = new SharpDX.MediaFoundation.VideoSurfaceInfo();
            this.SurfaceInfo.__MarshalFrom(ref @ref.SurfaceInfo);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.DwSize = this.DwSize;
            @ref.VideoInfo = this.VideoInfo;
            @ref.GuidFormat = this.GuidFormat;
            @ref.CompressedInfo = this.CompressedInfo;
            @ref.SurfaceInfo = new SharpDX.MediaFoundation.VideoSurfaceInfo.__Native();

            this.SurfaceInfo.__MarshalTo(ref @ref.SurfaceInfo);

        }
    }

    /// <summary>	
    /// <p> </p><p>Contains video format information that applies to both compressed and uncompressed formats.</p><p>This structure is used in the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Developers are encouraged to use media type attributes instead of using the <strong><see cref="SharpDX.MediaFoundation.VideoInfo"/></strong> structure. The following table lists the attributes that correspond to the members of this structure.</p><table> <tr><th>Structure Member</th><th>Media Type Attribute</th></tr> <tr><td><strong>dwWidth</strong>, <strong>dwHeight</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.FrameSize"/></strong> </td></tr> <tr><td><strong>PixelAspectRatio</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PixelAspectRatio"/></strong> </td></tr> <tr><td><strong>SourceChromaSubsampling</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoChromaSiting"/></strong> </td></tr> <tr><td><strong>InterlaceMode</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.InterlaceMode"/></strong> </td></tr> <tr><td><strong>TransferFunction</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.TransferFunction"/></strong> </td></tr> <tr><td><strong>ColorPrimaries</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoPrimaries"/></strong> </td></tr> <tr><td><strong>TransferMatrix</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.YuvMatrix"/></strong> </td></tr> <tr><td><strong>SourceLighting</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoLighting"/></strong> </td></tr> <tr><td><strong>FramesPerSecond</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.FrameRate"/></strong> </td></tr> <tr><td><strong>NominalRange</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.VideoNominalRange"/></strong> </td></tr> <tr><td><strong>GeometricAperture</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.GeometricAperture"/></strong> </td></tr> <tr><td><strong>MinimumDisplayAperture</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.MinimumDisplayAperture"/></strong> </td></tr> <tr><td><strong>PanScanAperture</strong></td><td> <strong><see cref="SharpDX.MediaFoundation.MediaTypeAttributeKeys.PanScanAperture"/></strong> </td></tr> <tr><td><strong>VideoFlags</strong></td><td>See <strong><see cref="SharpDX.MediaFoundation.VideoFlags"/></strong>.</td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo']/*"/>	
    /// <msdn-id>aa473804</msdn-id>	
    /// <unmanaged>MFVideoInfo</unmanaged>	
    /// <unmanaged-short>MFVideoInfo</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct VideoInfo
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::dwWidth']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>unsigned int dwWidth</unmanaged>	
        /// <unmanaged-short>unsigned int dwWidth</unmanaged-short>	
        public int DwWidth;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::dwHeight']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>unsigned int dwHeight</unmanaged>	
        /// <unmanaged-short>unsigned int dwHeight</unmanaged-short>	
        public int DwHeight;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::PixelAspectRatio']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFRatio PixelAspectRatio</unmanaged>	
        /// <unmanaged-short>MFRatio PixelAspectRatio</unmanaged-short>	
        public SharpDX.MediaFoundation.Ratio PixelAspectRatio;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::SourceChromaSubsampling']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoChromaSubsampling SourceChromaSubsampling</unmanaged>	
        /// <unmanaged-short>MFVideoChromaSubsampling SourceChromaSubsampling</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoChromaSubsampling SourceChromaSubsampling;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::InterlaceMode']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoInterlaceMode InterlaceMode</unmanaged>	
        /// <unmanaged-short>MFVideoInterlaceMode InterlaceMode</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoInterlaceMode InterlaceMode;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::TransferFunction']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoTransferFunction TransferFunction</unmanaged>	
        /// <unmanaged-short>MFVideoTransferFunction TransferFunction</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoTransferFunction TransferFunction;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::ColorPrimaries']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoPrimaries ColorPrimaries</unmanaged>	
        /// <unmanaged-short>MFVideoPrimaries ColorPrimaries</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoPrimaries ColorPrimaries;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::TransferMatrix']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoTransferMatrix TransferMatrix</unmanaged>	
        /// <unmanaged-short>MFVideoTransferMatrix TransferMatrix</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoTransferMatrix TransferMatrix;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::SourceLighting']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoLighting SourceLighting</unmanaged>	
        /// <unmanaged-short>MFVideoLighting SourceLighting</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoLighting SourceLighting;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::FramesPerSecond']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFRatio FramesPerSecond</unmanaged>	
        /// <unmanaged-short>MFRatio FramesPerSecond</unmanaged-short>	
        public SharpDX.MediaFoundation.Ratio FramesPerSecond;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::NominalRange']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFNominalRange NominalRange</unmanaged>	
        /// <unmanaged-short>MFNominalRange NominalRange</unmanaged-short>	
        public SharpDX.MediaFoundation.NominalRange NominalRange;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::GeometricAperture']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoArea GeometricAperture</unmanaged>	
        /// <unmanaged-short>MFVideoArea GeometricAperture</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoArea GeometricAperture;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::MinimumDisplayAperture']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoArea MinimumDisplayAperture</unmanaged>	
        /// <unmanaged-short>MFVideoArea MinimumDisplayAperture</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoArea MinimumDisplayAperture;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::PanScanAperture']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>MFVideoArea PanScanAperture</unmanaged>	
        /// <unmanaged-short>MFVideoArea PanScanAperture</unmanaged-short>	
        public SharpDX.MediaFoundation.VideoArea PanScanAperture;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoInfo::VideoFlags']/*"/>	
        /// <msdn-id>aa473804</msdn-id>	
        /// <unmanaged>unsigned longlong VideoFlags</unmanaged>	
        /// <unmanaged-short>unsigned longlong VideoFlags</unmanaged-short>	
        public long VideoFlags;
    }

    /// <summary>	
    /// <p> </p><p>Defines a normalized rectangle, which is used to specify sub-rectangles in a video rectangle. When a rectangle N is <em>normalized</em> relative to some other rectangle R, it means the following:</p><ul> <li> <p>The coordinate (0.0, 0.0) on N is mapped to the upper-left corner of R.</p> </li> <li> <p>The coordinate (1.0, 1.0) on N is mapped to the lower-right corner of R.</p> </li> </ul><p>Any coordinates of N that fall outside the range [0...1] are mapped to positions outside the rectangle R. A normalized rectangle can be used to specify a region within a video rectangle without knowing the resolution or even the aspect ratio of the video. For example, the upper-left quadrant is defined as {0.0, 0.0, 0.5, 0.5}.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoNormalizedRect']/*"/>	
    /// <msdn-id>ms703049</msdn-id>	
    /// <unmanaged>MFVideoNormalizedRect</unmanaged>	
    /// <unmanaged-short>MFVideoNormalizedRect</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct VideoNormalizedRect
    {

        /// <summary>	
        /// <dd> <p>X-coordinate of the upper-left corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoNormalizedRect::left']/*"/>	
        /// <msdn-id>ms703049</msdn-id>	
        /// <unmanaged>float left</unmanaged>	
        /// <unmanaged-short>float left</unmanaged-short>	
        public float Left;

        /// <summary>	
        /// <dd> <p>Y-coordinate of the upper-left corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoNormalizedRect::top']/*"/>	
        /// <msdn-id>ms703049</msdn-id>	
        /// <unmanaged>float top</unmanaged>	
        /// <unmanaged-short>float top</unmanaged-short>	
        public float Top;

        /// <summary>	
        /// <dd> <p>X-coordinate of the lower-right corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoNormalizedRect::right']/*"/>	
        /// <msdn-id>ms703049</msdn-id>	
        /// <unmanaged>float right</unmanaged>	
        /// <unmanaged-short>float right</unmanaged-short>	
        public float Right;

        /// <summary>	
        /// <dd> <p>Y-coordinate of the lower-right corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoNormalizedRect::bottom']/*"/>	
        /// <msdn-id>ms703049</msdn-id>	
        /// <unmanaged>float bottom</unmanaged>	
        /// <unmanaged-short>float bottom</unmanaged-short>	
        public float Bottom;
    }

    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_SPHERICAL_VIEWDIRECTION']/*"/>	
    /// <unmanaged>MF_VIDEO_SPHERICAL_VIEWDIRECTION</unmanaged>	
    /// <unmanaged-short>MF_VIDEO_SPHERICAL_VIEWDIRECTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public partial struct VideoSphericalViewDirection
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_SPHERICAL_VIEWDIRECTION::iHeading']/*"/>	
        /// <unmanaged>int iHeading</unmanaged>	
        /// <unmanaged-short>int iHeading</unmanaged-short>	
        public int IHeading;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_SPHERICAL_VIEWDIRECTION::iPitch']/*"/>	
        /// <unmanaged>int iPitch</unmanaged>	
        /// <unmanaged-short>int iPitch</unmanaged-short>	
        public int IPitch;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MF_VIDEO_SPHERICAL_VIEWDIRECTION::iRoll']/*"/>	
        /// <unmanaged>int iRoll</unmanaged>	
        /// <unmanaged-short>int iRoll</unmanaged-short>	
        public int IRoll;
    }

    /// <summary>	
    /// <p> </p><p>Contains information about an uncompressed video format. This structure is used in the <strong><see cref="SharpDX.MediaFoundation.VideoFormat"/></strong> structure.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSurfaceInfo']/*"/>	
    /// <msdn-id>aa473817</msdn-id>	
    /// <unmanaged>MFVideoSurfaceInfo</unmanaged>	
    /// <unmanaged-short>MFVideoSurfaceInfo</unmanaged-short>	
    public partial struct VideoSurfaceInfo
    {

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSurfaceInfo::Format']/*"/>	
        /// <msdn-id>aa473817</msdn-id>	
        /// <unmanaged>unsigned int Format</unmanaged>	
        /// <unmanaged-short>unsigned int Format</unmanaged-short>	
        public int Format;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSurfaceInfo::PaletteEntries']/*"/>	
        /// <msdn-id>aa473817</msdn-id>	
        /// <unmanaged>unsigned int PaletteEntries</unmanaged>	
        /// <unmanaged-short>unsigned int PaletteEntries</unmanaged-short>	
        public int PaletteEntries;

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MFVideoSurfaceInfo::Palette']/*"/>	
        /// <msdn-id>aa473817</msdn-id>	
        /// <unmanaged>MFPaletteEntry Palette[1]</unmanaged>	
        /// <unmanaged-short>MFPaletteEntry Palette</unmanaged-short>	
        public SharpDX.MediaFoundation.PaletteEntry[] Palette
        {
            get { return _Palette ?? (_Palette = new SharpDX.MediaFoundation.PaletteEntry[1]); }
        }
        internal SharpDX.MediaFoundation.PaletteEntry[] _Palette;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native
        {
            public int Format;
            public int PaletteEntries;
            public SharpDX.MediaFoundation.PaletteEntry Palette;
            // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            @ref.__MarshalFree();
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            this.Format = @ref.Format;
            this.PaletteEntries = @ref.PaletteEntries;
            fixed (void* __to = &this.Palette[0]) fixed (void* __from = &@ref.Palette) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.PaletteEntry));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Format = this.Format;
            @ref.PaletteEntries = this.PaletteEntries;
            fixed (void* __to = &@ref.Palette) fixed (void* __from = &this.Palette[0]) SharpDX.Utilities.CopyMemory((IntPtr)__to, (IntPtr)__from, 1 * sizeof(SharpDX.MediaFoundation.PaletteEntry));

        }
    }
}
