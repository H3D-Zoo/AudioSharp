// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.DXGI namespace.
//     This code was generated by a tool.
//     Date : 2017/7/15 0:31:14
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.DXGI {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Identifies the type of DXGI adapter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.AdapterFlags"/></strong> enumerated type is used by the <strong>Flags</strong> member of the <strong><see cref="SharpDX.DXGI.AdapterDescription1"/></strong> or <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure to  identify the type of DXGI adapter.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG']/*"/>	
    /// <msdn-id>ff471327</msdn-id>	
    /// <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_ADAPTER_FLAG</unmanaged-short>	
    [Flags]
    public enum AdapterFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies no flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG_NONE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Value always set to 0. This flag is reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG_REMOTE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG_REMOTE</unmanaged-short>	
        Remote = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies a software adapter. For more info about this flag, see new info in Windows?8 about enumerating adapters.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG_SOFTWARE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged-short>	
        Software = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Identifies the type of DXGI adapter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.AdapterFlags"/></strong> enumerated type is used by the <strong>Flags</strong> member of the <strong><see cref="SharpDX.DXGI.AdapterDescription1"/></strong> or <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure to  identify the type of DXGI adapter.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG3']/*"/>	
    /// <msdn-id>ff471327</msdn-id>	
    /// <unmanaged>DXGI_ADAPTER_FLAG3</unmanaged>	
    /// <unmanaged-short>DXGI_ADAPTER_FLAG3</unmanaged-short>	
    public enum AdapterFlags3 : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies no flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG3_NONE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG3_NONE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG3_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Value always set to 0. This flag is reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG3_REMOTE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG3_REMOTE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG3_REMOTE</unmanaged-short>	
        Remote = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies a software adapter. For more info about this flag, see new info in Windows?8 about enumerating adapters.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG3_SOFTWARE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG3_SOFTWARE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG3_SOFTWARE</unmanaged-short>	
        Software = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Forces this enumeration to compile to 32 bits in size. Without this value, some compilers would allow this enumeration to compile  to a size other than 32 bits. This value is not used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE']/*"/>	
        /// <msdn-id>ff471327</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE</unmanaged-short>	
        AcgCompatible = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Identifies the alpha value, transparency behavior, of a surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For more information about alpha mode, see <strong><see cref="SharpDX.Direct2D1.AlphaMode"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ALPHA_MODE']/*"/>	
    /// <msdn-id>hh404496</msdn-id>	
    /// <unmanaged>DXGI_ALPHA_MODE</unmanaged>	
    /// <unmanaged-short>DXGI_ALPHA_MODE</unmanaged-short>	
    public enum AlphaMode : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates that the transparency behavior is not specified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ALPHA_MODE_UNSPECIFIED']/*"/>	
        /// <msdn-id>hh404496</msdn-id>	
        /// <unmanaged>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged>	
        /// <unmanaged-short>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged-short>	
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Indicates that the transparency behavior is premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value. If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ALPHA_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>hh404496</msdn-id>	
        /// <unmanaged>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Indicates that the transparency behavior is not premultiplied. The alpha channel indicates the transparency of the color.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ALPHA_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>hh404496</msdn-id>	
        /// <unmanaged>DXGI_ALPHA_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>DXGI_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Indicates to ignore the transparency behavior.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ALPHA_MODE_IGNORE']/*"/>	
        /// <msdn-id>hh404496</msdn-id>	
        /// <unmanaged>DXGI_ALPHA_MODE_IGNORE</unmanaged>	
        /// <unmanaged-short>DXGI_ALPHA_MODE_IGNORE</unmanaged-short>	
        Ignore = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies color space types.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used within DXGI in  the <strong>CheckColorSpaceSupport</strong>, <strong>SetColorSpace1</strong> and <strong>CheckOverlayColorSpaceSupport</strong> methods. It is also referenced in D3D11 video methods such as <strong><see cref="SharpDX.Direct3D11.VideoContext1.VideoProcessorSetOutputColorSpace1"/></strong>, and D2D methods such as <strong><see cref="SharpDX.Direct2D1.DeviceContext2.CreateImageSourceFromDxgi"/></strong>.</p><p>The following color parameters are defined:</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_TYPE']/*"/>	
    /// <msdn-id>dn903661</msdn-id>	
    /// <unmanaged>DXGI_COLOR_SPACE_TYPE</unmanaged>	
    /// <unmanaged-short>DXGI_COLOR_SPACE_TYPE</unmanaged-short>	
    public enum ColorSpaceType : int {	
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> </table> <p>?</p> <p>This is the standard definition for sRGB.  Note that this is often implemented with a linear segment, but in that case the exponent is corrected to stay aligned with a gamma 2.2 curve.  This is usually used with 8 bit and 10 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709</unmanaged-short>	
        RgbFullG22NoneP709 = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>1.0</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> </table> <p>?</p> <p>This is the standard definition for scRGB, and is usually used with 16 bit integer, 16 bit floating point, and 32 bit floating point channels. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709</unmanaged-short>	
        RgbFullG10NoneP709 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> </table> <p>?</p> <p>This is the standard definition for ITU-R Recommendation BT.709. Note that due to the inclusion of a linear segment, the transfer curve looks similar to a pure exponential gamma of 1.9.  This is usually used with 8 bit and 10 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709</unmanaged-short>	
        RgbStudioG22NoneP709 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020</unmanaged-short>	
        RgbStudioG22NoneP2020 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RESERVED']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RESERVED</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RESERVED</unmanaged-short>	
        Reserved = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> <tr><td>Transfer</td><td>BT.601</td></tr> </table> <p>?</p> <p>This definition is commonly used for JPG, and is usually used with 8, 10, 12, or 16 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601</unmanaged-short>	
        YcbcrFullG22NoneP709X601 = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.601</td></tr> </table> <p>?</p> <p>This definition is commonly used for MPEG2, and  is usually used with 8, 10, 12, or 16 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601</unmanaged-short>	
        YcbcrStudioG22LeftP601 = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.601</td></tr> </table> <p>?</p> <p>This is sometimes used for H.264 camera capture, and is usually used with 8, 10, 12, or 16 bit color channels. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601</unmanaged-short>	
        YcbcrFullG22LeftP601 = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> </table> <p>?</p> <p>This definition is commonly used for H.264 and HEVC, and is usually used with 8, 10, 12, or 16 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709</unmanaged-short>	
        YcbcrStudioG22LeftP709 = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.709</td></tr> </table> <p>?</p> <p>This is sometimes used for H.264 camera capture, and is usually used with 8, 10, 12, or 16 bit color channels. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709</unmanaged-short>	
        YcbcrFullG22LeftP709 = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This definition may be used by HEVC, and is usually used with 10, 12, or 16 bit color channels.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020</unmanaged-short>	
        YcbcrStudioG22LeftP2020 = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020</unmanaged-short>	
        YcbcrFullG22LeftP2020 = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2084</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020</unmanaged-short>	
        RgbFullG2084NoneP2020 = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2084</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020</unmanaged-short>	
        YcbcrStudioG2084LeftP2020 = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2084</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020</unmanaged-short>	
        RgbStudioG2084NoneP2020 = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020</unmanaged-short>	
        YcbcrStudioG22TopleftP2020 = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>YCbCr</td></tr> <tr><td>Range</td><td>16-235</td></tr> <tr><td>Gamma</td><td>2084</td></tr> <tr><td>Siting</td><td>Video</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020</unmanaged-short>	
        YcbcrStudioG2084TopleftP2020 = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <table> <tr><td><strong>Property</strong></td><td><strong>Value</strong></td></tr> <tr><td>Colorspace</td><td>RGB</td></tr> <tr><td>Range</td><td>0-255</td></tr> <tr><td>Gamma</td><td>2.2</td></tr> <tr><td>Siting</td><td>Image</td></tr> <tr><td>Primaries</td><td>BT.2020</td></tr> </table> <p>?</p> <p>This is usually used with 10, 12, or 16 bit color channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020</unmanaged-short>	
        RgbFullG22NoneP2020 = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>A custom color definition is used. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020</unmanaged-short>	
        YcbcrStudioGhlgTopleftP2020 = unchecked((int)18),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020</unmanaged-short>	
        YcbcrFullGhlgTopleftP2020 = unchecked((int)19),			
        
        /// <summary>	
        /// <dd> <p>A custom color definition is used. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COLOR_SPACE_CUSTOM']/*"/>	
        /// <msdn-id>dn903661</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_CUSTOM</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_CUSTOM</unmanaged-short>	
        Custom = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p>Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current compute task.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You call the <strong><see cref="SharpDX.DXGI.Adapter2.GetDescription2"/></strong> method to retrieve the granularity level at which the GPU can be preempted from performing its current compute task. The operating system specifies the compute granularity level in the  <strong>ComputePreemptionGranularity</strong> member of the <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_GRANULARITY']/*"/>	
    /// <msdn-id>hh404499</msdn-id>	
    /// <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged>	
    /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged-short>	
    public enum ComputePreemptionGranularity : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a compute packet.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
        /// <msdn-id>hh404499</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>	
        DmaBufferBoundary = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a dispatch (for example, a call to the <strong><see cref="SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method). A dispatch is a part of a compute packet.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY']/*"/>	
        /// <msdn-id>hh404499</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged-short>	
        DispatchBoundary = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a thread group. A thread group is a part of a dispatch.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY']/*"/>	
        /// <msdn-id>hh404499</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged-short>	
        ThreadGroupBoundary = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a thread in a thread group. A thread is a part of a thread group.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY']/*"/>	
        /// <msdn-id>hh404499</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged-short>	
        ThreadBoundary = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a compute instruction in a thread.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
        /// <msdn-id>hh404499</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>	
        InstructionBoundary = unchecked((int)4),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ENUM_MODES_FLAGS']/*"/>	
    /// <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_ENUM_MODES_FLAGS</unmanaged-short>	
    [Flags]
    public enum DisplayModeEnumerationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ENUM_MODES_INTERLACED']/*"/>	
        /// <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>	
        /// <unmanaged-short>DXGI_ENUM_MODES_INTERLACED</unmanaged-short>	
        Interlaced = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ENUM_MODES_SCALING']/*"/>	
        /// <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>	
        /// <unmanaged-short>DXGI_ENUM_MODES_SCALING</unmanaged-short>	
        Scaling = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ENUM_MODES_STEREO']/*"/>	
        /// <unmanaged>DXGI_ENUM_MODES_STEREO</unmanaged>	
        /// <unmanaged-short>DXGI_ENUM_MODES_STEREO</unmanaged-short>	
        Stereo = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ENUM_MODES_DISABLED_STEREO']/*"/>	
        /// <unmanaged>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged>	
        /// <unmanaged-short>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged-short>	
        DisabledStereo = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION']/*"/>	
    /// <msdn-id>bb173065</msdn-id>	
    /// <unmanaged>DXGI_MODE_ROTATION</unmanaged>	
    /// <unmanaged-short>DXGI_MODE_ROTATION</unmanaged-short>	
    public enum DisplayModeRotation : int {	
        
        /// <summary>	
        /// <dd> <p>Unspecified rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION_UNSPECIFIED']/*"/>	
        /// <msdn-id>bb173065</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged-short>	
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies no rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION_IDENTITY']/*"/>	
        /// <msdn-id>bb173065</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION_IDENTITY</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION_IDENTITY</unmanaged-short>	
        Identity = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies 90 degrees of rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE90']/*"/>	
        /// <msdn-id>bb173065</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE90</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION_ROTATE90</unmanaged-short>	
        Rotate90 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Specifies 180 degrees of rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE180']/*"/>	
        /// <msdn-id>bb173065</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE180</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION_ROTATE180</unmanaged-short>	
        Rotate180 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Specifies 270 degrees of rotation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE270']/*"/>	
        /// <msdn-id>bb173065</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE270</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION_ROTATE270</unmanaged-short>	
        Rotate270 = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Flags indicating how an image is stretched to fit a given monitor's resolution.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Selecting the CENTERED or STRETCHED modes can result in a mode change even if you specify the native resolution of the display in the <see cref="SharpDX.DXGI.ModeDescription"/>. If you know the native resolution of the display and want to make sure that you do not initiate a mode change when transitioning a swap chain to full screen (either via ALT+ENTER or <strong><see cref="SharpDX.DXGI.SwapChain.SetFullscreenState"/></strong>), you should use UNSPECIFIED.</p><p>This enum is used by the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> and <strong><see cref="SharpDX.DXGI.SwapChainFullScreenDescription"/></strong> structures.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCALING']/*"/>	
    /// <msdn-id>bb173066</msdn-id>	
    /// <unmanaged>DXGI_MODE_SCALING</unmanaged>	
    /// <unmanaged-short>DXGI_MODE_SCALING</unmanaged-short>	
    public enum DisplayModeScaling : int {	
        
        /// <summary>	
        /// <dd> <p>Unspecified scaling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCALING_UNSPECIFIED']/*"/>	
        /// <msdn-id>bb173066</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged-short>	
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies no scaling. The image is centered on the display. This flag is typically used for a fixed-dot-pitch display (such as an LED display).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCALING_CENTERED']/*"/>	
        /// <msdn-id>bb173066</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING_CENTERED</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING_CENTERED</unmanaged-short>	
        Centered = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies stretched scaling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCALING_STRETCHED']/*"/>	
        /// <msdn-id>bb173066</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING_STRETCHED</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING_STRETCHED</unmanaged-short>	
        Stretched = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Flags indicating the method the raster uses to create an image on a surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> and <strong><see cref="SharpDX.DXGI.SwapChainFullScreenDescription"/></strong> structures.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER']/*"/>	
    /// <msdn-id>bb173067</msdn-id>	
    /// <unmanaged>DXGI_MODE_SCANLINE_ORDER</unmanaged>	
    /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER</unmanaged-short>	
    public enum DisplayModeScanlineOrder : int {	
        
        /// <summary>	
        /// <dd> <p>Scanline order is unspecified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED']/*"/>	
        /// <msdn-id>bb173067</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged-short>	
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The image is created from the first scanline to the last without skipping any.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE']/*"/>	
        /// <msdn-id>bb173067</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged-short>	
        Progressive = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The image is created beginning with the upper field.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST']/*"/>	
        /// <msdn-id>bb173067</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged-short>	
        UpperFieldFirst = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The image is created beginning with the lower field.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST']/*"/>	
        /// <msdn-id>bb173067</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged-short>	
        LowerFieldFirst = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Status codes that can be returned by DXGI functions.</p><p></p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.Result"/></strong> value for each <strong><see cref="SharpDX.DXGI.DXGIStatus"/></strong> value is determined from this macro that is defined in DXGItype.h:</p><pre> #define _FACDXGI    0x87a	
    /// #define MAKE_DXGI_STATUS(code)  MAKE_HRESULT(0, _FACDXGI, code)	
    /// </pre><p>For example, <strong><see cref="SharpDX.DXGI.DXGIStatus.Occluded"/></strong> is defined as <strong>0x087A0001</strong>:</p><pre> #define <see cref="SharpDX.DXGI.DXGIStatus.Occluded"/>                    MAKE_DXGI_STATUS(1)	
    /// </pre>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS']/*"/>	
    /// <msdn-id>cc308061</msdn-id>	
    /// <unmanaged>DXGI_STATUS</unmanaged>	
    /// <unmanaged-short>DXGI_STATUS</unmanaged-short>	
    public enum DXGIStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_OCCLUDED']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_OCCLUDED</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_OCCLUDED</unmanaged-short>	
        Occluded = unchecked((int)142213121),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_CLIPPED']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_CLIPPED</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_CLIPPED</unmanaged-short>	
        Clipped = unchecked((int)142213122),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_NO_REDIRECTION']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_NO_REDIRECTION</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_NO_REDIRECTION</unmanaged-short>	
        NoRedirection = unchecked((int)142213124),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_NO_DESKTOP_ACCESS']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged-short>	
        NoDesktopAccess = unchecked((int)142213125),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged-short>	
        GraphicsVidpnSourceInUse = unchecked((int)142213126),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGED']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_MODE_CHANGED</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_MODE_CHANGED</unmanaged-short>	
        ModeChanged = unchecked((int)142213127),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGE_IN_PROGRESS']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged-short>	
        ModeChangeInProgress = unchecked((int)142213128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_UNOCCLUDED']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_UNOCCLUDED</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_UNOCCLUDED</unmanaged-short>	
        Unoccluded = unchecked((int)142213129),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_DDA_WAS_STILL_DRAWING']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_DDA_WAS_STILL_DRAWING</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_DDA_WAS_STILL_DRAWING</unmanaged-short>	
        DdaWasStillDrawing = unchecked((int)142213130),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_STATUS_PRESENT_REQUIRED']/*"/>	
        /// <msdn-id>cc308061</msdn-id>	
        /// <unmanaged>DXGI_STATUS_PRESENT_REQUIRED</unmanaged>	
        /// <unmanaged-short>DXGI_STATUS_PRESENT_REQUIRED</unmanaged-short>	
        PresentRequired = unchecked((int)142213167),			
    }
    
    /// <summary>	
    /// <p>Specifies a range of hardware features, to be used when checking for feature support.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by the <strong>CheckFeatureSupport</strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FEATURE']/*"/>	
    /// <msdn-id>mt722565</msdn-id>	
    /// <unmanaged>DXGI_FEATURE</unmanaged>	
    /// <unmanaged-short>DXGI_FEATURE</unmanaged-short>	
    public enum Feature : int {	
        
        /// <summary>	
        /// <dd> <p>The display supports tearing, a requirement of variable refresh rate displays.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FEATURE_PRESENT_ALLOW_TEARING']/*"/>	
        /// <msdn-id>mt722565</msdn-id>	
        /// <unmanaged>DXGI_FEATURE_PRESENT_ALLOW_TEARING</unmanaged>	
        /// <unmanaged-short>DXGI_FEATURE_PRESENT_ALLOW_TEARING</unmanaged-short>	
        PresentAllowTearing = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Resource data formats, including fully-typed and typeless formats. A list of modifiers at the bottom of the page more fully describes each format type. </p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT']/*"/>	
    /// <msdn-id>bb173059</msdn-id>	
    /// <unmanaged>DXGI_FORMAT</unmanaged>	
    /// <unmanaged-short>DXGI_FORMAT</unmanaged-short>	
    public enum Format : int {	
        
        /// <summary>	
        /// <dd> <p>The format is not known.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_UNKNOWN']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_UNKNOWN</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged-short>	
        R32G32B32A32_Typeless = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1,5,8</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged-short>	
        R32G32B32A32_Float = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged-short>	
        R32G32B32A32_UInt = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged-short>	
        R32G32B32A32_SInt = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>A three-component, 96-bit typeless format that supports 32 bits per color channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged-short>	
        R32G32B32_Typeless = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>A three-component, 96-bit floating-point format that supports 32 bits per color channel.5,8</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged-short>	
        R32G32B32_Float = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32_UINT</unmanaged-short>	
        R32G32B32_UInt = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32B32_SINT</unmanaged-short>	
        R32G32B32_SInt = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged-short>	
        R16G16B16A16_Typeless = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.5,7</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged-short>	
        R16G16B16A16_Float = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged-short>	
        R16G16B16A16_UNorm = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged-short>	
        R16G16B16A16_UInt = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged-short>	
        R16G16B16A16_SNorm = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged-short>	
        R16G16B16A16_SInt = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32_TYPELESS</unmanaged-short>	
        R32G32_Typeless = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.5,8</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32_FLOAT</unmanaged-short>	
        R32G32_Float = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32_UINT</unmanaged-short>	
        R32G32_UInt = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G32_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G32_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G32_SINT</unmanaged-short>	
        R32G32_SInt = unchecked((int)18),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32G8X24_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged-short>	
        R32G8X24_Typeless = unchecked((int)19),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT_S8X24_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged-short>	
        D32_Float_S8X24_UInt = unchecked((int)20),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged-short>	
        R32_Float_X8X24_Typeless = unchecked((int)21),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_X32_TYPELESS_G8X24_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged-short>	
        X32_Typeless_G8X24_UInt = unchecked((int)22),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged-short>	
        R10G10B10A2_Typeless = unchecked((int)23),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged-short>	
        R10G10B10A2_UNorm = unchecked((int)24),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged-short>	
        R10G10B10A2_UInt = unchecked((int)25),			
        
        /// <summary>	
        /// <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.5,7</p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R11G11B10_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged-short>	
        R11G11B10_Float = unchecked((int)26),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged-short>	
        R8G8B8A8_Typeless = unchecked((int)27),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged-short>	
        R8G8B8A8_UNorm = unchecked((int)28),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged-short>	
        R8G8B8A8_UNorm_SRgb = unchecked((int)29),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged-short>	
        R8G8B8A8_UInt = unchecked((int)30),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged-short>	
        R8G8B8A8_SNorm = unchecked((int)31),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged-short>	
        R8G8B8A8_SInt = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_TYPELESS</unmanaged-short>	
        R16G16_Typeless = unchecked((int)33),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.5,7</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_FLOAT</unmanaged-short>	
        R16G16_Float = unchecked((int)34),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_UNORM</unmanaged-short>	
        R16G16_UNorm = unchecked((int)35),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_UINT</unmanaged-short>	
        R16G16_UInt = unchecked((int)36),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_SNORM</unmanaged-short>	
        R16G16_SNorm = unchecked((int)37),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16G16_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16G16_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16G16_SINT</unmanaged-short>	
        R16G16_SInt = unchecked((int)38),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32_TYPELESS</unmanaged-short>	
        R32_Typeless = unchecked((int)39),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for depth.5,8</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_D32_FLOAT</unmanaged-short>	
        D32_Float = unchecked((int)40),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.5,8</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32_FLOAT</unmanaged-short>	
        R32_Float = unchecked((int)41),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32_UINT</unmanaged-short>	
        R32_UInt = unchecked((int)42),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R32_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R32_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R32_SINT</unmanaged-short>	
        R32_SInt = unchecked((int)43),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R24G8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R24G8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R24G8_TYPELESS</unmanaged-short>	
        R24G8_Typeless = unchecked((int)44),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_D24_UNORM_S8_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged-short>	
        D24_UNorm_S8_UInt = unchecked((int)45),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R24_UNORM_X8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged-short>	
        R24_UNorm_X8_Typeless = unchecked((int)46),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_X24_TYPELESS_G8_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged-short>	
        X24_Typeless_G8_UInt = unchecked((int)47),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_TYPELESS</unmanaged-short>	
        R8G8_Typeless = unchecked((int)48),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_UNORM</unmanaged-short>	
        R8G8_UNorm = unchecked((int)49),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_UINT</unmanaged-short>	
        R8G8_UInt = unchecked((int)50),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_SNORM</unmanaged-short>	
        R8G8_SNorm = unchecked((int)51),			
        
        /// <summary>	
        /// <dd> <p>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_SINT</unmanaged-short>	
        R8G8_SInt = unchecked((int)52),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_TYPELESS</unmanaged-short>	
        R16_Typeless = unchecked((int)53),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.5,7</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_FLOAT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_FLOAT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_FLOAT</unmanaged-short>	
        R16_Float = unchecked((int)54),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_D16_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_D16_UNORM</unmanaged-short>	
        D16_UNorm = unchecked((int)55),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_UNORM</unmanaged-short>	
        R16_UNorm = unchecked((int)56),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_UINT</unmanaged-short>	
        R16_UInt = unchecked((int)57),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_SNORM</unmanaged-short>	
        R16_SNorm = unchecked((int)58),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R16_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R16_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R16_SINT</unmanaged-short>	
        R16_SInt = unchecked((int)59),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8_TYPELESS</unmanaged-short>	
        R8_Typeless = unchecked((int)60),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8_UNORM</unmanaged-short>	
        R8_UNorm = unchecked((int)61),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8_UINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8_UINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8_UINT</unmanaged-short>	
        R8_UInt = unchecked((int)62),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8_SNORM</unmanaged-short>	
        R8_SNorm = unchecked((int)63),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8_SINT']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8_SINT</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8_SINT</unmanaged-short>	
        R8_SInt = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_A8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_A8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_A8_UNORM</unmanaged-short>	
        A8_UNorm = unchecked((int)65),			
        
        /// <summary>	
        /// <dd> <p>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. ?.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R1_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R1_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R1_UNORM</unmanaged-short>	
        R1_UNorm = unchecked((int)66),			
        
        /// <summary>	
        /// <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2,6,7.</p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R9G9B9E5_SHAREDEXP']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged-short>	
        R9G9B9E5_Sharedexp = unchecked((int)67),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. ?</p> <p>Width must be even.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R8G8_B8G8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged-short>	
        R8G8_B8G8_UNorm = unchecked((int)68),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. ?</p> <p>Width must be even.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_G8R8_G8B8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged-short>	
        G8R8_G8B8_UNorm = unchecked((int)69),			
        
        /// <summary>	
        /// <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC1_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC1_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC1_TYPELESS</unmanaged-short>	
        BC1_Typeless = unchecked((int)70),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC1_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC1_UNORM</unmanaged-short>	
        BC1_UNorm = unchecked((int)71),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged-short>	
        BC1_UNorm_SRgb = unchecked((int)72),			
        
        /// <summary>	
        /// <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC2_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC2_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC2_TYPELESS</unmanaged-short>	
        BC2_Typeless = unchecked((int)73),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC2_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC2_UNORM</unmanaged-short>	
        BC2_UNorm = unchecked((int)74),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged-short>	
        BC2_UNorm_SRgb = unchecked((int)75),			
        
        /// <summary>	
        /// <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC3_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC3_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC3_TYPELESS</unmanaged-short>	
        BC3_Typeless = unchecked((int)76),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC3_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC3_UNORM</unmanaged-short>	
        BC3_UNorm = unchecked((int)77),			
        
        /// <summary>	
        /// <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged-short>	
        BC3_UNorm_SRgb = unchecked((int)78),			
        
        /// <summary>	
        /// <dd> <p>One-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC4_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC4_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC4_TYPELESS</unmanaged-short>	
        BC4_Typeless = unchecked((int)79),			
        
        /// <summary>	
        /// <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC4_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC4_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC4_UNORM</unmanaged-short>	
        BC4_UNorm = unchecked((int)80),			
        
        /// <summary>	
        /// <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC4_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC4_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC4_SNORM</unmanaged-short>	
        BC4_SNorm = unchecked((int)81),			
        
        /// <summary>	
        /// <dd> <p>Two-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC5_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC5_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC5_TYPELESS</unmanaged-short>	
        BC5_Typeless = unchecked((int)82),			
        
        /// <summary>	
        /// <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC5_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC5_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC5_UNORM</unmanaged-short>	
        BC5_UNorm = unchecked((int)83),			
        
        /// <summary>	
        /// <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC5_SNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC5_SNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC5_SNORM</unmanaged-short>	
        BC5_SNorm = unchecked((int)84),			
        
        /// <summary>	
        /// <dd> <p>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B5G6R5_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B5G6R5_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B5G6R5_UNORM</unmanaged-short>	
        B5G6R5_UNorm = unchecked((int)85),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B5G5R5A1_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged-short>	
        B5G5R5A1_UNorm = unchecked((int)86),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged-short>	
        B8G8R8A8_UNorm = unchecked((int)87),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged-short>	
        B8G8R8X8_UNorm = unchecked((int)88),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged-short>	
        R10G10B10_Xr_Bias_A2_UNorm = unchecked((int)89),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged-short>	
        B8G8R8A8_Typeless = unchecked((int)90),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged-short>	
        B8G8R8A8_UNorm_SRgb = unchecked((int)91),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged-short>	
        B8G8R8X8_Typeless = unchecked((int)92),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. ?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged-short>	
        B8G8R8X8_UNorm_SRgb = unchecked((int)93),			
        
        /// <summary>	
        /// <dd> <p>A typeless block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC6H_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC6H_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC6H_TYPELESS</unmanaged-short>	
        BC6H_Typeless = unchecked((int)94),			
        
        /// <summary>	
        /// <dd> <p>A block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC6H_UF16']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC6H_UF16</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC6H_UF16</unmanaged-short>	
        BC6H_Uf16 = unchecked((int)95),			
        
        /// <summary>	
        /// <dd> <p>A block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC6H_SF16']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC6H_SF16</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC6H_SF16</unmanaged-short>	
        BC6H_Sf16 = unchecked((int)96),			
        
        /// <summary>	
        /// <dd> <p>A typeless block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC7_TYPELESS']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC7_TYPELESS</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC7_TYPELESS</unmanaged-short>	
        BC7_Typeless = unchecked((int)97),			
        
        /// <summary>	
        /// <dd> <p>A block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC7_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC7_UNORM</unmanaged-short>	
        BC7_UNorm = unchecked((int)98),			
        
        /// <summary>	
        /// <dd> <p>A block-compression format. ? For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM_SRGB']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged-short>	
        BC7_UNorm_SRgb = unchecked((int)99),			
        
        /// <summary>	
        /// <dd> <p>Most common YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV, RTV, and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is V-&gt;R8, 	
        /// U-&gt;G8, 	
        /// Y-&gt;B8, 	
        /// and A-&gt;A8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_AYUV']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_AYUV</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_AYUV</unmanaged-short>	
        AYUV = unchecked((int)100),			
        
        /// <summary>	
        /// <dd> <p>10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. For UAVs, an additional valid view format is <see cref="SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R10,	
        /// Y-&gt;G10,	
        /// V-&gt;B10,	
        /// and A-&gt;A2.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_Y410']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_Y410</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_Y410</unmanaged-short>	
        Y410 = unchecked((int)101),			
        
        /// <summary>	
        /// <dd> <p>16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R16,	
        /// Y-&gt;G16,	
        /// V-&gt;B16,	
        /// and A-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_Y416']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_Y416</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_Y416</unmanaged-short>	
        Y416 = unchecked((int)102),			
        
        /// <summary>	
        /// <dd> <p>Most common YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
        /// V-&gt;G8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p>An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_NV12']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_NV12</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_NV12</unmanaged-short>	
        NV12 = unchecked((int)103),			
        
        /// <summary>	
        /// <dd> <p>10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="SharpDX.DXGI.Format.P010"/> is no different than <see cref="SharpDX.DXGI.Format.P016"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
        /// V-&gt;G16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p>An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_P010']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_P010</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_P010</unmanaged-short>	
        P010 = unchecked((int)104),			
        
        /// <summary>	
        /// <dd> <p>16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
        /// V-&gt;G16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p>An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_P016']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_P016</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_P016</unmanaged-short>	
        P016 = unchecked((int)105),			
        
        /// <summary>	
        /// <dd> <p>8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. The runtime requires that the width and height of all resources that are created with this format are multiples of 2. The runtime also requires that the left, right, top, and bottom members of any <see cref="SharpDX.Mathematics.Interop.RawRectangle"/> that are used for this format are multiples of 2. This format differs from <see cref="SharpDX.DXGI.Format.NV12"/> in that the layout of the data within the resource is completely opaque to applications. Applications cannot use the CPU to map the resource and then access the data within the resource. You cannot use shaders with this format. Because of this behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example, YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation better than NV12 can be used when the application does not need the data to be in a standard layout. </p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. </p> <p>An app using the YUY 4:2:0 formats  must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_420_OPAQUE']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_420_OPAQUE</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_420_OPAQUE</unmanaged-short>	
        Opaque420 = unchecked((int)106),			
        
        /// <summary>	
        /// <dd> <p>Most common YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R8, 	
        /// U0-&gt;G8, 	
        /// Y1-&gt;B8, 	
        /// and V0-&gt;A8.</p> <p>A unique valid view format for this video resource format is <see cref="SharpDX.DXGI.Format.R8G8_B8G8_UNorm"/>. With this view format, the width of the view appears to be twice what the <see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> or <see cref="SharpDX.DXGI.Format.R8G8B8A8_UInt"/> view would be when hardware reconstructs RGBA automatically on read and before filtering.  This Direct3D hardware behavior is legacy and is likely not useful any more. With this view format, the mapping to the view channel is Y0-&gt;R8, 	
        /// U0-&gt;	
        /// G8[0], 	
        /// Y1-&gt;B8, 	
        /// and V0-&gt;	
        /// G8[1].</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_YUY2']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_YUY2</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_YUY2</unmanaged-short>	
        YUY2 = unchecked((int)107),			
        
        /// <summary>	
        /// <dd> <p>10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="SharpDX.DXGI.Format.Y210"/> is no different than <see cref="SharpDX.DXGI.Format.Y216"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
        /// U-&gt;G16,	
        /// Y1-&gt;B16,	
        /// and V-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_Y210']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_Y210</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_Y210</unmanaged-short>	
        Y210 = unchecked((int)108),			
        
        /// <summary>	
        /// <dd> <p>16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
        /// U-&gt;G16,	
        /// Y1-&gt;B16,	
        /// and V-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_Y216']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_Y216</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_Y216</unmanaged-short>	
        Y216 = unchecked((int)109),			
        
        /// <summary>	
        /// <dd> <p>Most common planar YUV 4:1:1 video resource format. Valid luminance data view formats for this video resource format are <see cref="SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/4 of luminance view) for this video resource format are <see cref="SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
        /// V-&gt;G8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be a multiple of 4. Direct3D11 staging resources and initData parameters for this format use (rowPitch * height * 2) bytes. The first (SysMemPitch * height) bytes are the Y plane, the next ((SysMemPitch / 2) * height) bytes are the UV plane, and the remainder is padding. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_NV11']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_NV11</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_NV11</unmanaged-short>	
        NV11 = unchecked((int)110),			
        
        /// <summary>	
        /// <dd> <p>4-bit palletized YUV format that is commonly used for DVD subpicture.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_AI44']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_AI44</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_AI44</unmanaged-short>	
        AI44 = unchecked((int)111),			
        
        /// <summary>	
        /// <dd> <p>4-bit palletized YUV format that is commonly used for DVD subpicture.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_IA44']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_IA44</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_IA44</unmanaged-short>	
        IA44 = unchecked((int)112),			
        
        /// <summary>	
        /// <dd> <p>8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes BluRay data.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_P8']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_P8</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_P8</unmanaged-short>	
        P8 = unchecked((int)113),			
        
        /// <summary>	
        /// <dd> <p>8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes BluRay data.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_A8P8']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_A8P8</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_A8P8</unmanaged-short>	
        A8P8 = unchecked((int)114),			
        
        /// <summary>	
        /// <dd> <p>A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_B4G4R4A4_UNORM']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_B4G4R4A4_UNORM</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_B4G4R4A4_UNORM</unmanaged-short>	
        B4G4R4A4_UNorm = unchecked((int)115),			
        
        /// <summary>	
        /// <dd> <p>A video format; an 8-bit version of a hybrid planar 4:2:2 format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_P208']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_P208</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_P208</unmanaged-short>	
        P208 = unchecked((int)130),			
        
        /// <summary>	
        /// <dd> <p>An 8 bit YCbCrA 4:4 rendering format. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_V208']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_V208</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_V208</unmanaged-short>	
        V208 = unchecked((int)131),			
        
        /// <summary>	
        /// <dd> <p>An 8 bit YCbCrA 4:4:4:4 rendering format. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FORMAT_V408']/*"/>	
        /// <msdn-id>bb173059</msdn-id>	
        /// <unmanaged>DXGI_FORMAT_V408</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT_V408</unmanaged-short>	
        V408 = unchecked((int)132),			
    }
    
    /// <summary>	
    /// <p> Indicates options for presenting frames to the swap chain. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by the <strong><see cref="SharpDX.DXGI.FrameStatisticsMedia"/></strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE']/*"/>	
    /// <msdn-id>dn384107</msdn-id>	
    /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE</unmanaged>	
    /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE</unmanaged-short>	
    public enum FramePresentationMode : int {	
        
        /// <summary>	
        /// <dd> <p> Specifies that the presentation mode is a composition surface, meaning that the conversion from YUV to RGB is happening once per output refresh (for example, 60 Hz). When this value is returned, the media app should discontinue use of the decode swap chain and perform YUV to RGB conversion itself, reducing the frequency of YUV to RGB conversion to once per video frame. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_COMPOSED']/*"/>	
        /// <msdn-id>dn384107</msdn-id>	
        /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged>	
        /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged-short>	
        Composed = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Specifies that the presentation mode is an overlay surface, meaning that the YUV to RGB conversion is happening efficiently in hardware (once per video frame). When this value is returned, the media app can continue to use the decode swap chain. See <strong><see cref="SharpDX.DXGI.DecodeSwapChain"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_OVERLAY']/*"/>	
        /// <msdn-id>dn384107</msdn-id>	
        /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged>	
        /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged-short>	
        Overlay = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> No presentation is specified. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_NONE']/*"/>	
        /// <msdn-id>dn384107</msdn-id>	
        /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged>	
        /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged-short>	
        None = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>An  issue occurred that caused content protection to be invalidated in a swap-chain with hardware content protection, and is usually because the system ran out of hardware protected memory. The app will need to do one of the following:</p> <ul> <li>Drastically reduce the amount of hardware protected memory used. For example, media applications might be able to reduce their buffering.	
        /// </li> <li>Stop using hardware protection if possible.</li> </ul> <p>Note that simply re-creating the swap chain or the device will usually have no impact as the DWM will continue to run out of memory and will return the same failure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE']/*"/>	
        /// <msdn-id>dn384107</msdn-id>	
        /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged>	
        /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged-short>	
        CompositionFailure = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current graphics rendering task.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You call the <strong><see cref="SharpDX.DXGI.Adapter2.GetDescription2"/></strong> method to retrieve the granularity level at which the GPU can be preempted from performing its current graphics rendering task. The operating system specifies the graphics granularity level in the  <strong>GraphicsPreemptionGranularity</strong> member of the <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure.</p><p>The following figure shows granularity of graphics rendering tasks.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_GRANULARITY']/*"/>	
    /// <msdn-id>hh404504</msdn-id>	
    /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged>	
    /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged-short>	
    public enum GraphicsPreemptionGranularity : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a DMA buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
        /// <msdn-id>hh404504</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>	
        DmaBufferBoundary = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a graphics primitive. A primitive is a section in a DMA buffer and can be a group of triangles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY']/*"/>	
        /// <msdn-id>hh404504</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged-short>	
        PrimitiveBoundary = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a triangle. A triangle is a part of a primitive.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY']/*"/>	
        /// <msdn-id>hh404504</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged-short>	
        TriangleBoundary = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a pixel. A pixel is a part of a triangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY']/*"/>	
        /// <msdn-id>hh404504</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged-short>	
        PixelBoundary = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Indicates the preemption granularity as a graphics instruction. A graphics instruction operates on a pixel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
        /// <msdn-id>hh404504</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>	
        InstructionBoundary = unchecked((int)4),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS']/*"/>	
    /// <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS</unmanaged-short>	
    [Flags]
    public enum HardwareCompositionSupportFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN']/*"/>	
        /// <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN</unmanaged>	
        /// <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN</unmanaged-short>	
        FullScreen = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED']/*"/>	
        /// <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED</unmanaged>	
        /// <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED</unmanaged-short>	
        Windowed = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED']/*"/>	
        /// <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED</unmanaged>	
        /// <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED</unmanaged-short>	
        CursorStretched = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies the header metadata type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by the <strong>SetHDRMetaData</strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HDR_METADATA_TYPE']/*"/>	
    /// <msdn-id>mt732701</msdn-id>	
    /// <unmanaged>DXGI_HDR_METADATA_TYPE</unmanaged>	
    /// <unmanaged-short>DXGI_HDR_METADATA_TYPE</unmanaged-short>	
    public enum HdrMetadataType : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates there is no header metadata.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HDR_METADATA_TYPE_NONE']/*"/>	
        /// <msdn-id>mt732701</msdn-id>	
        /// <unmanaged>DXGI_HDR_METADATA_TYPE_NONE</unmanaged>	
        /// <unmanaged-short>DXGI_HDR_METADATA_TYPE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Indicates the header metadata is held by a  <strong><see cref="SharpDX.DXGI.HdrMetadataHdr10"/></strong> structure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_HDR_METADATA_TYPE_HDR10']/*"/>	
        /// <msdn-id>mt732701</msdn-id>	
        /// <unmanaged>DXGI_HDR_METADATA_TYPE_HDR10</unmanaged>	
        /// <unmanaged-short>DXGI_HDR_METADATA_TYPE_HDR10</unmanaged-short>	
        Hdr10 = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Get a reference to the data contained in the surface, and deny GPU access to the surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <strong><see cref="SharpDX.DXGI.Surface.Unmap"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAP_FLAGS']/*"/>	
    /// <msdn-id>bb174567</msdn-id>	
    /// <unmanaged>DXGI_MAP_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_MAP_FLAGS</unmanaged-short>	
    [Flags]
    public enum MapFlags : int {	
        
        /// <summary>	
        /// <dd>  <p>A reference to the surface data (see <strong><see cref="SharpDX.DXGI.MappedRectangle"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAP_READ']/*"/>	
        /// <msdn-id>bb174567</msdn-id>	
        /// <unmanaged>DXGI_MAP_READ</unmanaged>	
        /// <unmanaged-short>DXGI_MAP_READ</unmanaged-short>	
        Read = unchecked((int)1),			
        
        /// <summary>	
        /// <dd>  <p>CPU read-write flags. These flags can be combined with a logical OR. </p> <ul> <li><see cref="SharpDX.DXGI.MapFlags.Read"/> - Allow CPU read access.</li> <li><see cref="SharpDX.DXGI.MapFlags.Write"/> - Allow CPU write access.</li> <li><see cref="SharpDX.DXGI.MapFlags.Discard"/> - Discard the previous contents of a resource when it is mapped.</li> </ul> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAP_WRITE']/*"/>	
        /// <msdn-id>bb174567</msdn-id>	
        /// <unmanaged>DXGI_MAP_WRITE</unmanaged>	
        /// <unmanaged-short>DXGI_MAP_WRITE</unmanaged-short>	
        Write = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAP_DISCARD']/*"/>	
        /// <msdn-id>bb174567</msdn-id>	
        /// <unmanaged>DXGI_MAP_DISCARD</unmanaged>	
        /// <unmanaged-short>DXGI_MAP_DISCARD</unmanaged-short>	
        Discard = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies the memory segment group to use.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by <strong>QueryVideoMemoryInfo</strong> and <strong>SetVideoMemoryReservation</strong>.</p><p>Refer to the remarks for <strong><see cref="SharpDX.Direct3D12.MemoryPool"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP']/*"/>	
    /// <msdn-id>dn933219</msdn-id>	
    /// <unmanaged>DXGI_MEMORY_SEGMENT_GROUP</unmanaged>	
    /// <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP</unmanaged-short>	
    public enum MemorySegmentGroup : int {	
        
        /// <summary>	
        /// <dd> <p> The grouping of segments which is considered local to the video adapter, and represents the fastest available memory to the GPU. Applications should target the local segment group as the target size for their working set.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP_LOCAL']/*"/>	
        /// <msdn-id>dn933219</msdn-id>	
        /// <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged>	
        /// <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged-short>	
        Local = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The grouping of segments which is considered non-local to the video adapter, and may have slower performance than the local segment group.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL']/*"/>	
        /// <msdn-id>dn933219</msdn-id>	
        /// <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged>	
        /// <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged-short>	
        NonLocal = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Options for swap-chain color space.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by <strong>SetColorSpace</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS']/*"/>	
    /// <msdn-id>dn313170</msdn-id>	
    /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged-short>	
    [Flags]
    public enum MultiplaneOverlayYCbCrFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies nominal range YCbCr, which isn't an absolute color space, but a way of encoding RGB info.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE']/*"/>	
        /// <msdn-id>dn313170</msdn-id>	
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged>	
        /// <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged-short>	
        NominalRange = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies BT.709, which standardizes the format of high-definition television and has 16:9 (widescreen) aspect ratio.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709']/*"/>	
        /// <msdn-id>dn313170</msdn-id>	
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged>	
        /// <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged-short>	
        Bt709 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Specifies xvYCC or extended-gamut YCC (also x.v.Color) color space that can be used in the video electronics of television sets to support a gamut 1.8 times as large as that of the sRGB color space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC']/*"/>	
        /// <msdn-id>dn313170</msdn-id>	
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged>	
        /// <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged-short>	
        XvYCC = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies flags for the <strong>OfferResources1</strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_FLAGS']/*"/>	
    /// <msdn-id>mt732702</msdn-id>	
    /// <unmanaged>DXGI_OFFER_RESOURCE_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_OFFER_RESOURCE_FLAGS</unmanaged-short>	
    [Flags]
    public enum OfferResourceFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT']/*"/>	
        /// <msdn-id>mt732702</msdn-id>	
        /// <unmanaged>DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT</unmanaged>	
        /// <unmanaged-short>DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT</unmanaged-short>	
        AllowDecommit = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Identifies the importance of a resource?s content when you call the  <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong> method to offer the resource. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Priority determines how likely the operating system is to discard an offered resource.  Resources offered with lower priority are discarded first.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY']/*"/>	
    /// <msdn-id>dn933257</msdn-id>	
    /// <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged>	
    /// <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged-short>	
    public enum OfferResourcePriority : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_LOW']/*"/>	
        /// <msdn-id>dn933257</msdn-id>	
        /// <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged>	
        /// <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged-short>	
        Low = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_NORMAL']/*"/>	
        /// <msdn-id>dn933257</msdn-id>	
        /// <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged>	
        /// <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged-short>	
        Normal = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_HIGH']/*"/>	
        /// <msdn-id>dn933257</msdn-id>	
        /// <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged>	
        /// <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged-short>	
        High = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FLAG']/*"/>	
    /// <unmanaged>DXGI_OUTDUPL_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_FLAG</unmanaged-short>	
    [Flags]
    public enum OutputDuplicateFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY']/*"/>	
        /// <unmanaged>DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY</unmanaged>	
        /// <unmanaged-short>DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY</unmanaged-short>	
        CompositedUiCaptureOnly = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Identifies the type of reference shape.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE']/*"/>	
    /// <msdn-id>hh404520</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged-short>	
    public enum OutputDuplicatePointerShapeType : int {	
        
        /// <summary>	
        /// <dd> <p>The reference type is a monochrome mouse reference, which is  a monochrome bitmap. The bitmap's size is specified by width and height in a 1 bits per pixel (bpp) device independent bitmap (DIB) format AND mask that is followed by another 1 bpp DIB format XOR mask of the same size.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME']/*"/>	
        /// <msdn-id>hh404520</msdn-id>	
        /// <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged>	
        /// <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged-short>	
        Monochrome = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The reference type is a color mouse reference, which is  a color bitmap. The bitmap's size is specified by width and height in a 32 bpp ARGB DIB format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR']/*"/>	
        /// <msdn-id>hh404520</msdn-id>	
        /// <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged>	
        /// <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged-short>	
        Color = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The reference type is a masked color mouse reference.  A masked color mouse reference is a 32 bpp ARGB format bitmap with the mask value in the alpha bits. The only allowed mask values are 0 and 0xFF. When the mask value is 0, the RGB value should replace the screen pixel. When the mask value is 0xFF, an XOR operation is performed on the RGB value and the screen pixel; the result replaces the screen pixel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR']/*"/>	
        /// <msdn-id>hh404520</msdn-id>	
        /// <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged>	
        /// <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged-short>	
        MaskedColor = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies support for overlay color space.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG']/*"/>	
    /// <msdn-id>dn903665</msdn-id>	
    /// <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>	
    [Flags]
    public enum OverlayColorSpaceSupportFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Overlay color space support is present.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT']/*"/>	
        /// <msdn-id>dn903665</msdn-id>	
        /// <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>	
        /// <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>	
        Present = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies overlay support to check for in a call to <strong><see cref="SharpDX.DXGI.Output3.CheckOverlaySupport"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG']/*"/>	
    /// <msdn-id>dn903667</msdn-id>	
    /// <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged-short>	
    [Flags]
    public enum OverlaySupportFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG_DIRECT']/*"/>	
        /// <msdn-id>dn903667</msdn-id>	
        /// <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged>	
        /// <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged-short>	
        Direct = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG_SCALING']/*"/>	
        /// <msdn-id>dn903667</msdn-id>	
        /// <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged>	
        /// <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged-short>	
        Scaling = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Presents a rendered image to the user.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Starting with Direct3D 11.1, consider using <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> because you can then use dirty rectangles and the scroll rectangle in the swap chain presentation and as such use less memory bandwidth and as a result less system power. For more info about using dirty rectangles and the scroll rectangle in swap chain presentation, see Using dirty rectangles and the scroll rectangle in swap chain presentation.</p><p>For the best performance when flipping swap-chain buffers in a full-screen application, see Full-Screen Application Performance Hints.</p><p>Because calling <strong>Present</strong> might cause the render thread to wait on the message-pump thread, be careful when calling this method in an application that uses multiple threads. For more details, see Multithreading Considerations.</p><table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 10:</p> <p>Specifying <strong><see cref="SharpDX.DXGI.PresentFlags.Test"/></strong> in the <em>Flags</em> parameter is analogous to <strong>IDirect3DDevice9::TestCooperativeLevel</strong> in Direct3D 9.</p> </td></tr> </table><p>?</p><p>For flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set, a successful presentation unbinds back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_FLAGS']/*"/>	
    /// <msdn-id>bb174576</msdn-id>	
    /// <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_PRESENT_FLAGS</unmanaged-short>	
    [Flags]
    public enum PresentFlags : int {	
        
        /// <summary>	
        /// <dd>  <p>An integer that specifies how to synchronize presentation of a frame with the vertical blank.	
        /// </p> <p>For the bit-block transfer (bitblt) model (<strong><see cref="SharpDX.DXGI.SwapEffect.Discard"/></strong> or <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong>), values are:</p> <ul> <li>0 - The presentation occurs immediately, there is no synchronization.</li> <li>1 through 4 - Synchronize presentation after the <em>n</em>th vertical blank.</li> </ul> <p>For the flip model (<strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>), values are:</p> <ul> <li>0 - Cancel the remaining time on the previously presented frame and discard this frame if a newer frame is queued.	
        /// </li> <li>1 through 4 - Synchronize presentation for at least <em>n</em> vertical blanks. </li> </ul> <p>For an example that shows how sync-interval values affect a flip presentation queue, see Remarks.</p> <p>If the update region straddles more than one output (each represented by <strong><see cref="SharpDX.DXGI.Output"/></strong>), <strong>Present</strong> performs the synchronization to the output that contains the largest sub-rectangle of the target window's client area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_TEST']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_TEST</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_TEST</unmanaged-short>	
        Test = unchecked((int)1),			
        
        /// <summary>	
        /// <dd>  <p>An integer value that contains swap-chain presentation options. These options are defined by the DXGI_PRESENT constants.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_SEQUENCE']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged-short>	
        DoNotSequence = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_RESTART']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_RESTART</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_RESTART</unmanaged-short>	
        Restart = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_WAIT']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_DO_NOT_WAIT</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_DO_NOT_WAIT</unmanaged-short>	
        DoNotWait = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_STEREO_PREFER_RIGHT']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged-short>	
        StereoPreferRight = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_STEREO_TEMPORARY_MONO']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged-short>	
        StereoTemporaryMono = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_RESTRICT_TO_OUTPUT']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged-short>	
        RestrictToOutput = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_USE_DURATION']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_USE_DURATION</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_USE_DURATION</unmanaged-short>	
        UseDuration = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_ALLOW_TEARING']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>DXGI_PRESENT_ALLOW_TEARING</unmanaged>	
        /// <unmanaged-short>DXGI_PRESENT_ALLOW_TEARING</unmanaged-short>	
        AllowTearing = unchecked((int)512),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies result flags for the <strong>ReclaimResources1</strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RECLAIM_RESOURCE_RESULTS']/*"/>	
    /// <msdn-id>mt732703</msdn-id>	
    /// <unmanaged>DXGI_RECLAIM_RESOURCE_RESULTS</unmanaged>	
    /// <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULTS</unmanaged-short>	
    public enum ReclaimResourceResults : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RECLAIM_RESOURCE_RESULT_OK']/*"/>	
        /// <msdn-id>mt732703</msdn-id>	
        /// <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_OK</unmanaged>	
        /// <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_OK</unmanaged-short>	
        Ok = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED']/*"/>	
        /// <msdn-id>mt732703</msdn-id>	
        /// <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED</unmanaged>	
        /// <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED</unmanaged-short>	
        Discarded = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED']/*"/>	
        /// <msdn-id>mt732703</msdn-id>	
        /// <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED</unmanaged>	
        /// <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED</unmanaged-short>	
        NotCommitted = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Flags indicating the memory location of a resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used by <strong>QueryResourceResidency</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESIDENCY']/*"/>	
    /// <msdn-id>bb173070</msdn-id>	
    /// <unmanaged>DXGI_RESIDENCY</unmanaged>	
    /// <unmanaged-short>DXGI_RESIDENCY</unmanaged-short>	
    public enum Residency : int {	
        
        /// <summary>	
        /// <dd> <p>The resource is located in video memory.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESIDENCY_FULLY_RESIDENT']/*"/>	
        /// <msdn-id>bb173070</msdn-id>	
        /// <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>	
        /// <unmanaged-short>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged-short>	
        FullyResident = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>At least some of the resource is located in CPU memory.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
        /// <msdn-id>bb173070</msdn-id>	
        /// <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
        /// <unmanaged-short>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged-short>	
        ResidentInSharedMemory = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>At least some of the resource has been paged out to the hard drive.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESIDENCY_EVICTED_TO_DISK']/*"/>	
        /// <msdn-id>bb173070</msdn-id>	
        /// <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>	
        /// <unmanaged-short>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged-short>	
        EvictedToDisk = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Set the priority for evicting the resource from memory.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The eviction priority is a memory-management variable that is used by DXGI for determining how to populate overcommitted memory.</p><p>You can set priority levels other than the defined values when appropriate. For example, you can set a resource with a priority level of 0x78000001 to indicate that the resource is slightly above normal.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY']/*"/>	
    /// <msdn-id>bb174564</msdn-id>	
    /// <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>	
    /// <unmanaged-short>DXGI_RESOURCE_PRIORITY</unmanaged-short>	
    public enum ResourcePriority : int {	
        
        /// <summary>	
        /// <dd>  <p>The priority is one of the following values: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MINIMUM']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>	
        /// <unmanaged-short>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged-short>	
        Minimum = unchecked((int)671088640),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_LOW']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>	
        /// <unmanaged-short>DXGI_RESOURCE_PRIORITY_LOW</unmanaged-short>	
        Low = unchecked((int)1342177280),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_NORMAL']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>	
        /// <unmanaged-short>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged-short>	
        Normal = unchecked((int)2013265920),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_HIGH']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>	
        /// <unmanaged-short>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged-short>	
        High = unchecked((int)-1610612736),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MAXIMUM']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>	
        /// <unmanaged-short>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged-short>	
        Maximum = unchecked((int)-939524096),			
    }
    
    /// <summary>	
    /// <p>Identifies resize behavior when the back-buffer size does not match the size of the target output.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <see cref="SharpDX.DXGI.Scaling.None"/> value is supported only for flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value. You pass these values in a call to <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>. </p><p><see cref="SharpDX.DXGI.Scaling.AspectRatioStretch"/> will prefer to use a horizontal fill, otherwise it will use a vertical fill, using the following logic.</p><code>float aspectRatio = backBufferWidth / float(backBufferHeight); // Horizontal fill float scaledWidth = outputWidth; float scaledHeight = outputWidth / aspectRatio; if (scaledHeight &gt;= outputHeight) { // Do vertical fill scaledWidth = outputHeight * aspectRatio; scaledHeight = outputHeight; } float offsetX = (outputWidth - scaledWidth) * 0.5f; float offsetY = (outputHeight - scaledHeight) * 0.5f; rect.left = static_cast&lt;LONG&gt;(offsetX); rect.top = static_cast&lt;LONG&gt;(offsetY); rect.right = static_cast&lt;LONG&gt;(offsetX + scaledWidth); rect.bottom = static_cast&lt;LONG&gt;(offsetY + scaledHeight); rect.left = std::max&lt;LONG&gt;(0, rect.left); rect.top = std::max&lt;LONG&gt;(0, rect.top); rect.right = std::min&lt;LONG&gt;(static_cast&lt;LONG&gt;(outputWidth), rect.right); rect.bottom = std::min&lt;LONG&gt;(static_cast&lt;LONG&gt;(outputHeight), rect.bottom);	
    /// </code><p>Note that <em>outputWidth</em> and <em>outputHeight</em> are the pixel sizes of the presentation target size. In the case of <strong>CoreWindow</strong>, this requires converting the <em>logicalWidth</em> and <em>logicalHeight</em> values from DIPS to pixels using the window's DPI property.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SCALING']/*"/>	
    /// <msdn-id>hh404526</msdn-id>	
    /// <unmanaged>DXGI_SCALING</unmanaged>	
    /// <unmanaged-short>DXGI_SCALING</unmanaged-short>	
    public enum Scaling : int {	
        
        /// <summary>	
        /// <dd> <p>Directs DXGI to make the back-buffer contents scale to fit the presentation target size. This is the implicit behavior of DXGI when you call the <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SCALING_STRETCH']/*"/>	
        /// <msdn-id>hh404526</msdn-id>	
        /// <unmanaged>DXGI_SCALING_STRETCH</unmanaged>	
        /// <unmanaged-short>DXGI_SCALING_STRETCH</unmanaged-short>	
        Stretch = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Directs DXGI to make the back-buffer contents appear without any scaling when the presentation target size is not equal to the back-buffer size. The top edges of the back buffer and presentation target are aligned together. If the WS_EX_LAYOUTRTL style is associated with the <strong><see cref="System.IntPtr"/></strong> handle to the target output window, the right edges of the back buffer and presentation target are aligned together; otherwise, the left edges are aligned together. All target area outside the back buffer is filled with window background color.</p> <p>This value specifies that all target areas outside the back buffer of a swap chain are filled with the background color that you specify in a call to <strong><see cref="SharpDX.DXGI.SwapChain1.SetBackgroundColor"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SCALING_NONE']/*"/>	
        /// <msdn-id>hh404526</msdn-id>	
        /// <unmanaged>DXGI_SCALING_NONE</unmanaged>	
        /// <unmanaged-short>DXGI_SCALING_NONE</unmanaged-short>	
        None = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Directs DXGI to make the back-buffer contents scale to fit the presentation target size, while preserving the aspect ratio of the back-buffer. If the scaled back-buffer does not fill the presentation area, it will be centered with black borders.</p> <p>This constant is supported on Windows Phone 8 and Windows 10. </p> <p>Note that with legacy Win32 window swapchains, this works the same as <see cref="SharpDX.DXGI.Scaling.Stretch"/>.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SCALING_ASPECT_RATIO_STRETCH']/*"/>	
        /// <msdn-id>hh404526</msdn-id>	
        /// <unmanaged>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged>	
        /// <unmanaged-short>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged-short>	
        AspectRatioStretch = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SHARED_RESOURCE_FLAGS']/*"/>	
    /// <unmanaged>DXGI_SHARED_RESOURCE_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_SHARED_RESOURCE_FLAGS</unmanaged-short>	
    [Flags]
    public enum SharedResourceFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SHARED_RESOURCE_READ']/*"/>	
        /// <unmanaged>DXGI_SHARED_RESOURCE_READ</unmanaged>	
        /// <unmanaged-short>DXGI_SHARED_RESOURCE_READ</unmanaged-short>	
        Read = unchecked((int)-2147483648),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SHARED_RESOURCE_WRITE']/*"/>	
        /// <unmanaged>DXGI_SHARED_RESOURCE_WRITE</unmanaged>	
        /// <unmanaged-short>DXGI_SHARED_RESOURCE_WRITE</unmanaged-short>	
        Write = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies color space support for the swap chain.</p>	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG']/*"/>	
    /// <msdn-id>dn903668</msdn-id>	
    /// <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>	
    [Flags]
    public enum SwapChainColorSpaceSupportFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Color space support is present.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT']/*"/>	
        /// <msdn-id>dn903668</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>	
        Present = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Overlay color space support is present.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT']/*"/>	
        /// <msdn-id>dn903668</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged-short>	
        OverlayPresent = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Options for swap-chain behavior.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used by the <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong> structure and the <strong><see cref="SharpDX.DXGI.SwapChain.ResizeTarget"/></strong> method.</p><p>This enumeration is also used by the  <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure.</p><p>You don't need to set <strong><see cref="SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> for swap chains that you create in full-screen mode  with the <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method because those swap chains already behave as if <strong><see cref="SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. That is, presented content is not accessible by remote access or through the <strong>desktop duplication APIs</strong>.</p><p>Swap chains that you create with the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, and  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> methods are not protected if <strong><see cref="SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is not set and are protected if <strong><see cref="SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the <strong>desktop duplication APIs</strong>.</p><p>When you call <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> to change the swap chain's back buffer, you can reset or change all <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong> flags.</p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG']/*"/>	
    /// <msdn-id>bb173076</msdn-id>	
    /// <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG</unmanaged-short>	
    [Flags]
    public enum SwapChainFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_NONPREROTATED']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged-short>	
        Nonprerotated = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to enable an application to switch modes by calling <strong><see cref="SharpDX.DXGI.SwapChain.ResizeTarget"/></strong>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged-short>	
        AllowModeSwitch = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to enable an application to render using GDI on a swap chain or a surface.  This will allow the application to call <strong><see cref="SharpDX.DXGI.Surface1.GetDC"/></strong> on the 0th back buffer or a surface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged-short>	
        GdiCompatible = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to indicate that the swap chain might contain protected content; therefore, the operating system supports the creation of the swap chain only when driver and hardware protection is used.  If the driver and hardware do not support content protection, the call to create a resource for the swap chain fails.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged-short>	
        RestrictedContent = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to indicate that shared resources that are created within the swap chain must be protected by using the driver?s mechanism for restricting access to shared surfaces.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged-short>	
        RestrictSharedResourceDriver = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to restrict presented content to the local displays. Therefore, the presented content is not accessible via remote accessing or through the <strong>desktop duplication APIs</strong>.  </p> <p>This flag supports the window content protection features of Windows. Applications can use this flag to protect their own onscreen window content from being captured or copied through a specific set of public operating system features and APIs.</p> <p>If you use this flag with windowed (<strong><see cref="System.IntPtr"/></strong> or <strong>IWindow</strong>) swap chains where another process created the <strong><see cref="System.IntPtr"/></strong>, the owner of the <strong><see cref="System.IntPtr"/></strong> must use the  <strong>SetWindowDisplayAffinity</strong> function appropriately in order to allow calls to <strong><see cref="SharpDX.DXGI.SwapChain.TryPresent"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> to succeed.	
        /// </p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged-short>	
        DisplayOnly = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to create a waitable object you can use to ensure rendering does not begin while a frame is still being presented. When this flag is used, the swapchain's latency must be set with the <strong><see cref="SharpDX.DXGI.SwapChain2.SetMaximumFrameLatency"/></strong> API instead of <strong><see cref="SharpDX.DXGI.Device1.SetMaximumFrameLatency"/></strong>.</p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged-short>	
        FrameLatencyWaitAbleObject = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to create a swap chain in the foreground layer for multi-plane rendering. This flag can only be used with <strong>CoreWindow</strong> swap chains, which are created with <strong>CreateSwapChainForCoreWindow</strong>. Apps should not create foreground swap chains if <strong><see cref="SharpDX.DXGI.Output2.SupportsOverlays_"/></strong> indicates that hardware support for overlays is not available.</p> <p>Note that <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> cannot be used to add or remove this flag.</p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged-short>	
        ForegroundLayer = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to create a swap chain for full-screen video. </p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged-short>	
        FullScreenVideo = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p>Set this flag to create a swap chain for YUV video.</p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged-short>	
        YuvVideo = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p>Indicates that the swap chain should be created such that all underlying resources can be protected by the hardware.  Resource creation will fail if hardware content protection is not supported.</p> <p>This flag has the following restrictions:</p> <ul> <li>This flag can only be used with swap effect <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>.</li> </ul> <strong>Note</strong>??Creating a swap chain using this flag does not automatically guarantee that hardware protection will be enabled for the underlying allocation. Some implementations require that the DRM components are first initialized prior to any guarantees of protection. ? <p><strong>Note</strong>??This enumeration value is supported starting with Windows?10.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged-short>	
        HwProtected = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p>Tearing support is a requirement to enable displays that support variable refresh rates to function properly when the application presents a swap chain tied to a full screen borderless window.  Win32 apps can already achieve tearing in fullscreen exclusive mode by calling <strong>SetFullscreenState</strong>(TRUE), but the recommended approach for Win32 developers is to use this tearing flag instead.</p> <p>To check for hardware support of this feature, refer to <strong><see cref="SharpDX.DXGI.Factory5.CheckFeatureSupport"/></strong>. For usage information refer to <strong><see cref="SharpDX.DXGI.SwapChain.TryPresent"/></strong> and the <strong>DXGI_PRESENT</strong> flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING</unmanaged-short>	
        AllowTearing = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS']/*"/>	
        /// <msdn-id>bb173076</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS</unmanaged-short>	
        RestrictedToAllHolographicDisplayS = unchecked((int)4096),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p> Options for handling pixels in a display surface after calling <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enumeration is used by the <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong> and <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong>structures. </p><p> To use multisampling with <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>, you must perform the multisampling in a separate render target. For example, create a multisampled texture by calling <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> with a filled <strong><see cref="SharpDX.Direct3D11.Texture2DDescription"/></strong> structure (<strong>BindFlags</strong> member set to <strong><see cref="SharpDX.Direct3D11.BindFlags.RenderTarget"/></strong> and <strong>SampleDesc</strong> member with multisampling parameters). Next call <strong><see cref="SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong> to create a render-target view for the texture, and render your scene into the texture. Finally call <strong><see cref="SharpDX.Direct3D11.DeviceContext.ResolveSubresource_"/></strong> to resolve the multisampled texture into your non-multisampled swap chain. </p><p> The primary difference between presentation models is how back-buffer contents get to the Desktop Window Manager (DWM) for composition. In the bitblt model, which is used with the <strong><see cref="SharpDX.DXGI.SwapEffect.Discard"/></strong> and <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong> values, contents of the back buffer get copied into the redirection surface on each call to <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>. In the flip model, which is used with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value, all back buffers are shared with the DWM. Therefore, the DWM can compose straight from those back buffers without any additional copy operations. In general, the flip model is the more efficient model. The flip model also provides more features, such as enhanced present statistics. </p><p> When you call <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> on a flip model swap chain (<strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>) with 0 specified in the <em>SyncInterval</em> parameter, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>'s behavior is the same as the behavior of Direct3D 9Ex's <strong>IDirect3DDevice9Ex::PresentEx</strong> with <strong>D3DSWAPEFFECT_FLIPEX</strong> and D3DPRESENT_FORCEIMMEDIATE. That is, the runtime not only presents the next frame instead of any previously queued frames, it also terminates any remaining time left on the previously queued frames. </p><p> Regardless of whether the flip model is more efficient, an application still might choose the bitblt model because the bitblt model is the only way to mix GDI and DirectX presentation. In the flip model, the application must create the swap chain with <strong><see cref="SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, and then must use <strong>GetDC</strong> on the back buffer explicitly. After the first successful call to <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> on a flip-model swap chain, GDI no longer works with the <strong><see cref="System.IntPtr"/></strong> that is associated with that swap chain, even after the destruction of the swap chain. This restriction even extends to methods like <strong>ScrollWindowEx</strong>. </p><p> For more info about the flip-model swap chain and optimizing presentation, see Enhancing presentation with the flip model, dirty rectangles, and scrolled areas. </p>	
    /// </remarks>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_EFFECT']/*"/>	
    /// <msdn-id>bb173077</msdn-id>	
    /// <unmanaged>DXGI_SWAP_EFFECT</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_EFFECT</unmanaged-short>	
    public enum SwapEffect : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_EFFECT_DISCARD']/*"/>	
        /// <msdn-id>bb173077</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT_DISCARD</unmanaged-short>	
        Discard = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_EFFECT_SEQUENTIAL']/*"/>	
        /// <msdn-id>bb173077</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged-short>	
        Sequential = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL']/*"/>	
        /// <msdn-id>bb173077</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged-short>	
        FlipSequential = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_EFFECT_FLIP_DISCARD']/*"/>	
        /// <msdn-id>bb173077</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged-short>	
        FlipDiscard = unchecked((int)4),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_ENUM']/*"/>	
    /// <unmanaged>DXGI_USAGE_ENUM</unmanaged>	
    /// <unmanaged-short>DXGI_USAGE_ENUM</unmanaged-short>	
    [Flags]
    public enum Usage : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_SHADER_INPUT']/*"/>	
        /// <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_SHADER_INPUT</unmanaged-short>	
        ShaderInput = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_RENDER_TARGET_OUTPUT']/*"/>	
        /// <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged-short>	
        RenderTargetOutput = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_BACK_BUFFER']/*"/>	
        /// <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_BACK_BUFFER</unmanaged-short>	
        BackBuffer = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_SHARED']/*"/>	
        /// <unmanaged>DXGI_USAGE_SHARED</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_SHARED</unmanaged-short>	
        Shared = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_READ_ONLY']/*"/>	
        /// <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_READ_ONLY</unmanaged-short>	
        ReadOnly = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_DISCARD_ON_PRESENT']/*"/>	
        /// <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged-short>	
        DiscardOnPresent = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_USAGE_UNORDERED_ACCESS']/*"/>	
        /// <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_UNORDERED_ACCESS</unmanaged-short>	
        UnorderedAccess = unchecked((int)1024),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MWA_FLAGS']/*"/>	
    /// <unmanaged>DXGI_MWA_FLAGS</unmanaged>	
    /// <unmanaged-short>DXGI_MWA_FLAGS</unmanaged-short>	
    [Flags]
    public enum WindowAssociationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MWA_NO_WINDOW_CHANGES']/*"/>	
        /// <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>	
        /// <unmanaged-short>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged-short>	
        IgnoreAll = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MWA_NO_ALT_ENTER']/*"/>	
        /// <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>	
        /// <unmanaged-short>DXGI_MWA_NO_ALT_ENTER</unmanaged-short>	
        IgnoreAltEnter = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MWA_NO_PRINT_SCREEN']/*"/>	
        /// <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>	
        /// <unmanaged-short>DXGI_MWA_NO_PRINT_SCREEN</unmanaged-short>	
        IgnorePrintScreen = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MWA_VALID']/*"/>	
        /// <unmanaged>DXGI_MWA_VALID</unmanaged>	
        /// <unmanaged-short>DXGI_MWA_VALID</unmanaged-short>	
        Valid = unchecked((int)7),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
}
